/*
 * hatchyverse-api
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.0.0
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.Net;
using System.Net.Mime;
using HatchyverseAPI.Client;
using HatchyverseAPI.Model;

namespace HatchyverseAPI.Api
{

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface IVouchersApiSync : IApiAccessor
    {
        #region Synchronous Operations
        /// <summary>
        /// 
        /// </summary>
        /// <exception cref="HatchyverseAPI.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="voucherId"></param>
        /// <returns>MessageResponse</returns>
        MessageResponse DeleteVoucher(string voucherId);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="HatchyverseAPI.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="voucherId"></param>
        /// <returns>ApiResponse of MessageResponse</returns>
        ApiResponse<MessageResponse> DeleteVoucherWithHttpInfo(string voucherId);
        /// <summary>
        /// 
        /// </summary>
        /// <exception cref="HatchyverseAPI.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>string</returns>
        string GetRandomBigNumber();

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="HatchyverseAPI.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>ApiResponse of string</returns>
        ApiResponse<string> GetRandomBigNumberWithHttpInfo();
        /// <summary>
        /// 
        /// </summary>
        /// <exception cref="HatchyverseAPI.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="getVoucherClaimSignatureRequest"></param>
        /// <returns>VoucherClaimSignature</returns>
        VoucherClaimSignature GetVoucherClaimSignature(GetVoucherClaimSignatureRequest getVoucherClaimSignatureRequest);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="HatchyverseAPI.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="getVoucherClaimSignatureRequest"></param>
        /// <returns>ApiResponse of VoucherClaimSignature</returns>
        ApiResponse<VoucherClaimSignature> GetVoucherClaimSignatureWithHttpInfo(GetVoucherClaimSignatureRequest getVoucherClaimSignatureRequest);
        /// <summary>
        /// 
        /// </summary>
        /// <exception cref="HatchyverseAPI.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>List&lt;Voucher&gt;</returns>
        List<Voucher> GetVouchers();

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="HatchyverseAPI.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>ApiResponse of List&lt;Voucher&gt;</returns>
        ApiResponse<List<Voucher>> GetVouchersWithHttpInfo();
        /// <summary>
        /// 
        /// </summary>
        /// <exception cref="HatchyverseAPI.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="giveVoucherToUserRequest"></param>
        /// <returns>MessageResponse</returns>
        MessageResponse GiveVoucherToUser(GiveVoucherToUserRequest giveVoucherToUserRequest);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="HatchyverseAPI.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="giveVoucherToUserRequest"></param>
        /// <returns>ApiResponse of MessageResponse</returns>
        ApiResponse<MessageResponse> GiveVoucherToUserWithHttpInfo(GiveVoucherToUserRequest giveVoucherToUserRequest);
        /// <summary>
        /// 
        /// </summary>
        /// <exception cref="HatchyverseAPI.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="transferVouchersRequest"></param>
        /// <returns>MessageResponse</returns>
        MessageResponse TransferVouchers(TransferVouchersRequest transferVouchersRequest);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="HatchyverseAPI.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="transferVouchersRequest"></param>
        /// <returns>ApiResponse of MessageResponse</returns>
        ApiResponse<MessageResponse> TransferVouchersWithHttpInfo(TransferVouchersRequest transferVouchersRequest);
        #endregion Synchronous Operations
    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface IVouchersApiAsync : IApiAccessor
    {
        #region Asynchronous Operations
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="HatchyverseAPI.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="voucherId"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of MessageResponse</returns>
        System.Threading.Tasks.Task<MessageResponse> DeleteVoucherAsync(string voucherId, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken));

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="HatchyverseAPI.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="voucherId"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (MessageResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<MessageResponse>> DeleteVoucherWithHttpInfoAsync(string voucherId, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken));
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="HatchyverseAPI.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of string</returns>
        System.Threading.Tasks.Task<string> GetRandomBigNumberAsync(System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken));

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="HatchyverseAPI.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (string)</returns>
        System.Threading.Tasks.Task<ApiResponse<string>> GetRandomBigNumberWithHttpInfoAsync(System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken));
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="HatchyverseAPI.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="getVoucherClaimSignatureRequest"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of VoucherClaimSignature</returns>
        System.Threading.Tasks.Task<VoucherClaimSignature> GetVoucherClaimSignatureAsync(GetVoucherClaimSignatureRequest getVoucherClaimSignatureRequest, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken));

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="HatchyverseAPI.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="getVoucherClaimSignatureRequest"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (VoucherClaimSignature)</returns>
        System.Threading.Tasks.Task<ApiResponse<VoucherClaimSignature>> GetVoucherClaimSignatureWithHttpInfoAsync(GetVoucherClaimSignatureRequest getVoucherClaimSignatureRequest, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken));
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="HatchyverseAPI.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of List&lt;Voucher&gt;</returns>
        System.Threading.Tasks.Task<List<Voucher>> GetVouchersAsync(System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken));

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="HatchyverseAPI.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (List&lt;Voucher&gt;)</returns>
        System.Threading.Tasks.Task<ApiResponse<List<Voucher>>> GetVouchersWithHttpInfoAsync(System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken));
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="HatchyverseAPI.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="giveVoucherToUserRequest"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of MessageResponse</returns>
        System.Threading.Tasks.Task<MessageResponse> GiveVoucherToUserAsync(GiveVoucherToUserRequest giveVoucherToUserRequest, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken));

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="HatchyverseAPI.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="giveVoucherToUserRequest"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (MessageResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<MessageResponse>> GiveVoucherToUserWithHttpInfoAsync(GiveVoucherToUserRequest giveVoucherToUserRequest, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken));
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="HatchyverseAPI.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="transferVouchersRequest"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of MessageResponse</returns>
        System.Threading.Tasks.Task<MessageResponse> TransferVouchersAsync(TransferVouchersRequest transferVouchersRequest, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken));

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="HatchyverseAPI.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="transferVouchersRequest"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (MessageResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<MessageResponse>> TransferVouchersWithHttpInfoAsync(TransferVouchersRequest transferVouchersRequest, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken));
        #endregion Asynchronous Operations
    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface IVouchersApi : IVouchersApiSync, IVouchersApiAsync
    {

    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public partial class VouchersApi : IDisposable, IVouchersApi
    {
        private HatchyverseAPI.Client.ExceptionFactory _exceptionFactory = (name, response) => null;

        /// <summary>
        /// Initializes a new instance of the <see cref="VouchersApi"/> class.
        /// **IMPORTANT** This will also create an instance of HttpClient, which is less than ideal.
        /// It's better to reuse the <see href="https://docs.microsoft.com/en-us/dotnet/architecture/microservices/implement-resilient-applications/use-httpclientfactory-to-implement-resilient-http-requests#issues-with-the-original-httpclient-class-available-in-net">HttpClient and HttpClientHandler</see>.
        /// </summary>
        /// <returns></returns>
        public VouchersApi() : this((string)null)
        {
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="VouchersApi"/> class.
        /// **IMPORTANT** This will also create an instance of HttpClient, which is less than ideal.
        /// It's better to reuse the <see href="https://docs.microsoft.com/en-us/dotnet/architecture/microservices/implement-resilient-applications/use-httpclientfactory-to-implement-resilient-http-requests#issues-with-the-original-httpclient-class-available-in-net">HttpClient and HttpClientHandler</see>.
        /// </summary>
        /// <param name="basePath">The target service's base path in URL format.</param>
        /// <exception cref="ArgumentException"></exception>
        /// <returns></returns>
        public VouchersApi(string basePath)
        {
            this.Configuration = HatchyverseAPI.Client.Configuration.MergeConfigurations(
                HatchyverseAPI.Client.GlobalConfiguration.Instance,
                new HatchyverseAPI.Client.Configuration { BasePath = basePath }
            );
            this.ApiClient = new HatchyverseAPI.Client.ApiClient(this.Configuration.BasePath);
            this.Client =  this.ApiClient;
            this.AsynchronousClient = this.ApiClient;
            this.ExceptionFactory = HatchyverseAPI.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="VouchersApi"/> class using Configuration object.
        /// **IMPORTANT** This will also create an instance of HttpClient, which is less than ideal.
        /// It's better to reuse the <see href="https://docs.microsoft.com/en-us/dotnet/architecture/microservices/implement-resilient-applications/use-httpclientfactory-to-implement-resilient-http-requests#issues-with-the-original-httpclient-class-available-in-net">HttpClient and HttpClientHandler</see>.
        /// </summary>
        /// <param name="configuration">An instance of Configuration.</param>
        /// <exception cref="ArgumentNullException"></exception>
        /// <returns></returns>
        public VouchersApi(HatchyverseAPI.Client.Configuration configuration)
        {
            if (configuration == null) throw new ArgumentNullException("configuration");

            this.Configuration = HatchyverseAPI.Client.Configuration.MergeConfigurations(
                HatchyverseAPI.Client.GlobalConfiguration.Instance,
                configuration
            );
            this.ApiClient = new HatchyverseAPI.Client.ApiClient(this.Configuration.BasePath);
            this.Client = this.ApiClient;
            this.AsynchronousClient = this.ApiClient;
            ExceptionFactory = HatchyverseAPI.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="VouchersApi"/> class
        /// using a Configuration object and client instance.
        /// </summary>
        /// <param name="client">The client interface for synchronous API access.</param>
        /// <param name="asyncClient">The client interface for asynchronous API access.</param>
        /// <param name="configuration">The configuration object.</param>
        /// <exception cref="ArgumentNullException"></exception>
        public VouchersApi(HatchyverseAPI.Client.ISynchronousClient client, HatchyverseAPI.Client.IAsynchronousClient asyncClient, HatchyverseAPI.Client.IReadableConfiguration configuration)
        {
            if (client == null) throw new ArgumentNullException("client");
            if (asyncClient == null) throw new ArgumentNullException("asyncClient");
            if (configuration == null) throw new ArgumentNullException("configuration");

            this.Client = client;
            this.AsynchronousClient = asyncClient;
            this.Configuration = configuration;
            this.ExceptionFactory = HatchyverseAPI.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Disposes resources if they were created by us
        /// </summary>
        public void Dispose()
        {
            this.ApiClient?.Dispose();
        }

        /// <summary>
        /// Holds the ApiClient if created
        /// </summary>
        public HatchyverseAPI.Client.ApiClient ApiClient { get; set; } = null;

        /// <summary>
        /// The client for accessing this underlying API asynchronously.
        /// </summary>
        public HatchyverseAPI.Client.IAsynchronousClient AsynchronousClient { get; set; }

        /// <summary>
        /// The client for accessing this underlying API synchronously.
        /// </summary>
        public HatchyverseAPI.Client.ISynchronousClient Client { get; set; }

        /// <summary>
        /// Gets the base path of the API client.
        /// </summary>
        /// <value>The base path</value>
        public string GetBasePath()
        {
            return this.Configuration.BasePath;
        }

        /// <summary>
        /// Gets or sets the configuration object
        /// </summary>
        /// <value>An instance of the Configuration</value>
        public HatchyverseAPI.Client.IReadableConfiguration Configuration { get; set; }

        /// <summary>
        /// Provides a factory method hook for the creation of exceptions.
        /// </summary>
        public HatchyverseAPI.Client.ExceptionFactory ExceptionFactory
        {
            get
            {
                if (_exceptionFactory != null && _exceptionFactory.GetInvocationList().Length > 1)
                {
                    throw new InvalidOperationException("Multicast delegate for ExceptionFactory is unsupported.");
                }
                return _exceptionFactory;
            }
            set { _exceptionFactory = value; }
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="HatchyverseAPI.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="voucherId"></param>
        /// <returns>MessageResponse</returns>
        public MessageResponse DeleteVoucher(string voucherId)
        {
            HatchyverseAPI.Client.ApiResponse<MessageResponse> localVarResponse = DeleteVoucherWithHttpInfo(voucherId);
            return localVarResponse.Data;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="HatchyverseAPI.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="voucherId"></param>
        /// <returns>ApiResponse of MessageResponse</returns>
        public HatchyverseAPI.Client.ApiResponse<MessageResponse> DeleteVoucherWithHttpInfo(string voucherId)
        {
            // verify the required parameter 'voucherId' is set
            if (voucherId == null)
                throw new HatchyverseAPI.Client.ApiException(400, "Missing required parameter 'voucherId' when calling VouchersApi->DeleteVoucher");

            HatchyverseAPI.Client.RequestOptions localVarRequestOptions = new HatchyverseAPI.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = HatchyverseAPI.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = HatchyverseAPI.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("voucherId", HatchyverseAPI.Client.ClientUtils.ParameterToString(voucherId)); // path parameter


            // make the HTTP request
            var localVarResponse = this.Client.Delete<MessageResponse>("/vouchers/{voucherId}", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("DeleteVoucher", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="HatchyverseAPI.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="voucherId"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of MessageResponse</returns>
        public async System.Threading.Tasks.Task<MessageResponse> DeleteVoucherAsync(string voucherId, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
        {
            var task = DeleteVoucherWithHttpInfoAsync(voucherId, cancellationToken);
#if UNITY_EDITOR || !UNITY_WEBGL
            HatchyverseAPI.Client.ApiResponse<MessageResponse> localVarResponse = await task.ConfigureAwait(false);
#else
            HatchyverseAPI.Client.ApiResponse<MessageResponse> localVarResponse = await task;
#endif
            return localVarResponse.Data;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="HatchyverseAPI.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="voucherId"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (MessageResponse)</returns>
        public async System.Threading.Tasks.Task<HatchyverseAPI.Client.ApiResponse<MessageResponse>> DeleteVoucherWithHttpInfoAsync(string voucherId, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
        {
            // verify the required parameter 'voucherId' is set
            if (voucherId == null)
                throw new HatchyverseAPI.Client.ApiException(400, "Missing required parameter 'voucherId' when calling VouchersApi->DeleteVoucher");


            HatchyverseAPI.Client.RequestOptions localVarRequestOptions = new HatchyverseAPI.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };


            var localVarContentType = HatchyverseAPI.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = HatchyverseAPI.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("voucherId", HatchyverseAPI.Client.ClientUtils.ParameterToString(voucherId)); // path parameter


            // make the HTTP request

            var task = this.AsynchronousClient.DeleteAsync<MessageResponse>("/vouchers/{voucherId}", localVarRequestOptions, this.Configuration, cancellationToken);

#if UNITY_EDITOR || !UNITY_WEBGL
            var localVarResponse = await task.ConfigureAwait(false);
#else
            var localVarResponse = await task;
#endif

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("DeleteVoucher", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="HatchyverseAPI.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>string</returns>
        public string GetRandomBigNumber()
        {
            HatchyverseAPI.Client.ApiResponse<string> localVarResponse = GetRandomBigNumberWithHttpInfo();
            return localVarResponse.Data;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="HatchyverseAPI.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>ApiResponse of string</returns>
        public HatchyverseAPI.Client.ApiResponse<string> GetRandomBigNumberWithHttpInfo()
        {
            HatchyverseAPI.Client.RequestOptions localVarRequestOptions = new HatchyverseAPI.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = HatchyverseAPI.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = HatchyverseAPI.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);



            // make the HTTP request
            var localVarResponse = this.Client.Get<string>("/vouchers/random", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetRandomBigNumber", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="HatchyverseAPI.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of string</returns>
        public async System.Threading.Tasks.Task<string> GetRandomBigNumberAsync(System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
        {
            var task = GetRandomBigNumberWithHttpInfoAsync(cancellationToken);
#if UNITY_EDITOR || !UNITY_WEBGL
            HatchyverseAPI.Client.ApiResponse<string> localVarResponse = await task.ConfigureAwait(false);
#else
            HatchyverseAPI.Client.ApiResponse<string> localVarResponse = await task;
#endif
            return localVarResponse.Data;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="HatchyverseAPI.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (string)</returns>
        public async System.Threading.Tasks.Task<HatchyverseAPI.Client.ApiResponse<string>> GetRandomBigNumberWithHttpInfoAsync(System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
        {

            HatchyverseAPI.Client.RequestOptions localVarRequestOptions = new HatchyverseAPI.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };


            var localVarContentType = HatchyverseAPI.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = HatchyverseAPI.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);



            // make the HTTP request

            var task = this.AsynchronousClient.GetAsync<string>("/vouchers/random", localVarRequestOptions, this.Configuration, cancellationToken);

#if UNITY_EDITOR || !UNITY_WEBGL
            var localVarResponse = await task.ConfigureAwait(false);
#else
            var localVarResponse = await task;
#endif

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetRandomBigNumber", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="HatchyverseAPI.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="getVoucherClaimSignatureRequest"></param>
        /// <returns>VoucherClaimSignature</returns>
        public VoucherClaimSignature GetVoucherClaimSignature(GetVoucherClaimSignatureRequest getVoucherClaimSignatureRequest)
        {
            HatchyverseAPI.Client.ApiResponse<VoucherClaimSignature> localVarResponse = GetVoucherClaimSignatureWithHttpInfo(getVoucherClaimSignatureRequest);
            return localVarResponse.Data;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="HatchyverseAPI.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="getVoucherClaimSignatureRequest"></param>
        /// <returns>ApiResponse of VoucherClaimSignature</returns>
        public HatchyverseAPI.Client.ApiResponse<VoucherClaimSignature> GetVoucherClaimSignatureWithHttpInfo(GetVoucherClaimSignatureRequest getVoucherClaimSignatureRequest)
        {
            // verify the required parameter 'getVoucherClaimSignatureRequest' is set
            if (getVoucherClaimSignatureRequest == null)
                throw new HatchyverseAPI.Client.ApiException(400, "Missing required parameter 'getVoucherClaimSignatureRequest' when calling VouchersApi->GetVoucherClaimSignature");

            HatchyverseAPI.Client.RequestOptions localVarRequestOptions = new HatchyverseAPI.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = HatchyverseAPI.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = HatchyverseAPI.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.Data = getVoucherClaimSignatureRequest;


            // make the HTTP request
            var localVarResponse = this.Client.Post<VoucherClaimSignature>("/vouchers/claim", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetVoucherClaimSignature", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="HatchyverseAPI.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="getVoucherClaimSignatureRequest"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of VoucherClaimSignature</returns>
        public async System.Threading.Tasks.Task<VoucherClaimSignature> GetVoucherClaimSignatureAsync(GetVoucherClaimSignatureRequest getVoucherClaimSignatureRequest, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
        {
            var task = GetVoucherClaimSignatureWithHttpInfoAsync(getVoucherClaimSignatureRequest, cancellationToken);
#if UNITY_EDITOR || !UNITY_WEBGL
            HatchyverseAPI.Client.ApiResponse<VoucherClaimSignature> localVarResponse = await task.ConfigureAwait(false);
#else
            HatchyverseAPI.Client.ApiResponse<VoucherClaimSignature> localVarResponse = await task;
#endif
            return localVarResponse.Data;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="HatchyverseAPI.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="getVoucherClaimSignatureRequest"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (VoucherClaimSignature)</returns>
        public async System.Threading.Tasks.Task<HatchyverseAPI.Client.ApiResponse<VoucherClaimSignature>> GetVoucherClaimSignatureWithHttpInfoAsync(GetVoucherClaimSignatureRequest getVoucherClaimSignatureRequest, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
        {
            // verify the required parameter 'getVoucherClaimSignatureRequest' is set
            if (getVoucherClaimSignatureRequest == null)
                throw new HatchyverseAPI.Client.ApiException(400, "Missing required parameter 'getVoucherClaimSignatureRequest' when calling VouchersApi->GetVoucherClaimSignature");


            HatchyverseAPI.Client.RequestOptions localVarRequestOptions = new HatchyverseAPI.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };


            var localVarContentType = HatchyverseAPI.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = HatchyverseAPI.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.Data = getVoucherClaimSignatureRequest;


            // make the HTTP request

            var task = this.AsynchronousClient.PostAsync<VoucherClaimSignature>("/vouchers/claim", localVarRequestOptions, this.Configuration, cancellationToken);

#if UNITY_EDITOR || !UNITY_WEBGL
            var localVarResponse = await task.ConfigureAwait(false);
#else
            var localVarResponse = await task;
#endif

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetVoucherClaimSignature", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="HatchyverseAPI.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>List&lt;Voucher&gt;</returns>
        public List<Voucher> GetVouchers()
        {
            HatchyverseAPI.Client.ApiResponse<List<Voucher>> localVarResponse = GetVouchersWithHttpInfo();
            return localVarResponse.Data;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="HatchyverseAPI.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>ApiResponse of List&lt;Voucher&gt;</returns>
        public HatchyverseAPI.Client.ApiResponse<List<Voucher>> GetVouchersWithHttpInfo()
        {
            HatchyverseAPI.Client.RequestOptions localVarRequestOptions = new HatchyverseAPI.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = HatchyverseAPI.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = HatchyverseAPI.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);



            // make the HTTP request
            var localVarResponse = this.Client.Get<List<Voucher>>("/vouchers", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetVouchers", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="HatchyverseAPI.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of List&lt;Voucher&gt;</returns>
        public async System.Threading.Tasks.Task<List<Voucher>> GetVouchersAsync(System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
        {
            var task = GetVouchersWithHttpInfoAsync(cancellationToken);
#if UNITY_EDITOR || !UNITY_WEBGL
            HatchyverseAPI.Client.ApiResponse<List<Voucher>> localVarResponse = await task.ConfigureAwait(false);
#else
            HatchyverseAPI.Client.ApiResponse<List<Voucher>> localVarResponse = await task;
#endif
            return localVarResponse.Data;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="HatchyverseAPI.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (List&lt;Voucher&gt;)</returns>
        public async System.Threading.Tasks.Task<HatchyverseAPI.Client.ApiResponse<List<Voucher>>> GetVouchersWithHttpInfoAsync(System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
        {

            HatchyverseAPI.Client.RequestOptions localVarRequestOptions = new HatchyverseAPI.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };


            var localVarContentType = HatchyverseAPI.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = HatchyverseAPI.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);



            // make the HTTP request

            var task = this.AsynchronousClient.GetAsync<List<Voucher>>("/vouchers", localVarRequestOptions, this.Configuration, cancellationToken);

#if UNITY_EDITOR || !UNITY_WEBGL
            var localVarResponse = await task.ConfigureAwait(false);
#else
            var localVarResponse = await task;
#endif

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetVouchers", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="HatchyverseAPI.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="giveVoucherToUserRequest"></param>
        /// <returns>MessageResponse</returns>
        public MessageResponse GiveVoucherToUser(GiveVoucherToUserRequest giveVoucherToUserRequest)
        {
            HatchyverseAPI.Client.ApiResponse<MessageResponse> localVarResponse = GiveVoucherToUserWithHttpInfo(giveVoucherToUserRequest);
            return localVarResponse.Data;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="HatchyverseAPI.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="giveVoucherToUserRequest"></param>
        /// <returns>ApiResponse of MessageResponse</returns>
        public HatchyverseAPI.Client.ApiResponse<MessageResponse> GiveVoucherToUserWithHttpInfo(GiveVoucherToUserRequest giveVoucherToUserRequest)
        {
            // verify the required parameter 'giveVoucherToUserRequest' is set
            if (giveVoucherToUserRequest == null)
                throw new HatchyverseAPI.Client.ApiException(400, "Missing required parameter 'giveVoucherToUserRequest' when calling VouchersApi->GiveVoucherToUser");

            HatchyverseAPI.Client.RequestOptions localVarRequestOptions = new HatchyverseAPI.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = HatchyverseAPI.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = HatchyverseAPI.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.Data = giveVoucherToUserRequest;


            // make the HTTP request
            var localVarResponse = this.Client.Post<MessageResponse>("/vouchers/admin/give", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GiveVoucherToUser", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="HatchyverseAPI.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="giveVoucherToUserRequest"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of MessageResponse</returns>
        public async System.Threading.Tasks.Task<MessageResponse> GiveVoucherToUserAsync(GiveVoucherToUserRequest giveVoucherToUserRequest, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
        {
            var task = GiveVoucherToUserWithHttpInfoAsync(giveVoucherToUserRequest, cancellationToken);
#if UNITY_EDITOR || !UNITY_WEBGL
            HatchyverseAPI.Client.ApiResponse<MessageResponse> localVarResponse = await task.ConfigureAwait(false);
#else
            HatchyverseAPI.Client.ApiResponse<MessageResponse> localVarResponse = await task;
#endif
            return localVarResponse.Data;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="HatchyverseAPI.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="giveVoucherToUserRequest"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (MessageResponse)</returns>
        public async System.Threading.Tasks.Task<HatchyverseAPI.Client.ApiResponse<MessageResponse>> GiveVoucherToUserWithHttpInfoAsync(GiveVoucherToUserRequest giveVoucherToUserRequest, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
        {
            // verify the required parameter 'giveVoucherToUserRequest' is set
            if (giveVoucherToUserRequest == null)
                throw new HatchyverseAPI.Client.ApiException(400, "Missing required parameter 'giveVoucherToUserRequest' when calling VouchersApi->GiveVoucherToUser");


            HatchyverseAPI.Client.RequestOptions localVarRequestOptions = new HatchyverseAPI.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };


            var localVarContentType = HatchyverseAPI.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = HatchyverseAPI.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.Data = giveVoucherToUserRequest;


            // make the HTTP request

            var task = this.AsynchronousClient.PostAsync<MessageResponse>("/vouchers/admin/give", localVarRequestOptions, this.Configuration, cancellationToken);

#if UNITY_EDITOR || !UNITY_WEBGL
            var localVarResponse = await task.ConfigureAwait(false);
#else
            var localVarResponse = await task;
#endif

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GiveVoucherToUser", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="HatchyverseAPI.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="transferVouchersRequest"></param>
        /// <returns>MessageResponse</returns>
        public MessageResponse TransferVouchers(TransferVouchersRequest transferVouchersRequest)
        {
            HatchyverseAPI.Client.ApiResponse<MessageResponse> localVarResponse = TransferVouchersWithHttpInfo(transferVouchersRequest);
            return localVarResponse.Data;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="HatchyverseAPI.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="transferVouchersRequest"></param>
        /// <returns>ApiResponse of MessageResponse</returns>
        public HatchyverseAPI.Client.ApiResponse<MessageResponse> TransferVouchersWithHttpInfo(TransferVouchersRequest transferVouchersRequest)
        {
            // verify the required parameter 'transferVouchersRequest' is set
            if (transferVouchersRequest == null)
                throw new HatchyverseAPI.Client.ApiException(400, "Missing required parameter 'transferVouchersRequest' when calling VouchersApi->TransferVouchers");

            HatchyverseAPI.Client.RequestOptions localVarRequestOptions = new HatchyverseAPI.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = HatchyverseAPI.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = HatchyverseAPI.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.Data = transferVouchersRequest;


            // make the HTTP request
            var localVarResponse = this.Client.Post<MessageResponse>("/vouchers/transfer", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("TransferVouchers", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="HatchyverseAPI.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="transferVouchersRequest"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of MessageResponse</returns>
        public async System.Threading.Tasks.Task<MessageResponse> TransferVouchersAsync(TransferVouchersRequest transferVouchersRequest, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
        {
            var task = TransferVouchersWithHttpInfoAsync(transferVouchersRequest, cancellationToken);
#if UNITY_EDITOR || !UNITY_WEBGL
            HatchyverseAPI.Client.ApiResponse<MessageResponse> localVarResponse = await task.ConfigureAwait(false);
#else
            HatchyverseAPI.Client.ApiResponse<MessageResponse> localVarResponse = await task;
#endif
            return localVarResponse.Data;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="HatchyverseAPI.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="transferVouchersRequest"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (MessageResponse)</returns>
        public async System.Threading.Tasks.Task<HatchyverseAPI.Client.ApiResponse<MessageResponse>> TransferVouchersWithHttpInfoAsync(TransferVouchersRequest transferVouchersRequest, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
        {
            // verify the required parameter 'transferVouchersRequest' is set
            if (transferVouchersRequest == null)
                throw new HatchyverseAPI.Client.ApiException(400, "Missing required parameter 'transferVouchersRequest' when calling VouchersApi->TransferVouchers");


            HatchyverseAPI.Client.RequestOptions localVarRequestOptions = new HatchyverseAPI.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };


            var localVarContentType = HatchyverseAPI.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = HatchyverseAPI.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.Data = transferVouchersRequest;


            // make the HTTP request

            var task = this.AsynchronousClient.PostAsync<MessageResponse>("/vouchers/transfer", localVarRequestOptions, this.Configuration, cancellationToken);

#if UNITY_EDITOR || !UNITY_WEBGL
            var localVarResponse = await task.ConfigureAwait(false);
#else
            var localVarResponse = await task;
#endif

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("TransferVouchers", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

    }
}
