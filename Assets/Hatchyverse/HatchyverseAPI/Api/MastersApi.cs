/*
 * hatchyverse-api
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.0.0
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.Net;
using System.Net.Mime;
using HatchyverseAPI.Client;
using HatchyverseAPI.Model;

namespace HatchyverseAPI.Api
{

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface IMastersApiSync : IApiAccessor
    {
        #region Synchronous Operations
        /// <summary>
        /// 
        /// </summary>
        /// <exception cref="HatchyverseAPI.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="buyLootboxRequest"></param>
        /// <returns>List&lt;MastersItem&gt;</returns>
        List<MastersItem> BuyLootbox(BuyLootboxRequest buyLootboxRequest);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="HatchyverseAPI.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="buyLootboxRequest"></param>
        /// <returns>ApiResponse of List&lt;MastersItem&gt;</returns>
        ApiResponse<List<MastersItem>> BuyLootboxWithHttpInfo(BuyLootboxRequest buyLootboxRequest);
        /// <summary>
        /// 
        /// </summary>
        /// <exception cref="HatchyverseAPI.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="chainId"> (optional)</param>
        /// <returns>List&lt;Object&gt;</returns>
        List<Object> GetAccountMastersAvatarBalance(double? chainId = default(double?));

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="HatchyverseAPI.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="chainId"> (optional)</param>
        /// <returns>ApiResponse of List&lt;Object&gt;</returns>
        ApiResponse<List<Object>> GetAccountMastersAvatarBalanceWithHttpInfo(double? chainId = default(double?));
        /// <summary>
        /// 
        /// </summary>
        /// <exception cref="HatchyverseAPI.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="chainId"> (optional)</param>
        /// <param name="includeSubnet"> (optional)</param>
        /// <returns>List&lt;MastersItemBalance&gt;</returns>
        List<MastersItemBalance> GetAccountMastersItemsBalance(double? chainId = default(double?), bool? includeSubnet = default(bool?));

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="HatchyverseAPI.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="chainId"> (optional)</param>
        /// <param name="includeSubnet"> (optional)</param>
        /// <returns>ApiResponse of List&lt;MastersItemBalance&gt;</returns>
        ApiResponse<List<MastersItemBalance>> GetAccountMastersItemsBalanceWithHttpInfo(double? chainId = default(double?), bool? includeSubnet = default(bool?));
        /// <summary>
        /// 
        /// </summary>
        /// <exception cref="HatchyverseAPI.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="tokenId"></param>
        /// <param name="chainId"> (optional)</param>
        /// <returns>MastersAvatar</returns>
        MastersAvatar GetMastersAvatar(string tokenId, double? chainId = default(double?));

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="HatchyverseAPI.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="tokenId"></param>
        /// <param name="chainId"> (optional)</param>
        /// <returns>ApiResponse of MastersAvatar</returns>
        ApiResponse<MastersAvatar> GetMastersAvatarWithHttpInfo(string tokenId, double? chainId = default(double?));
        /// <summary>
        /// 
        /// </summary>
        /// <exception cref="HatchyverseAPI.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="address"></param>
        /// <param name="chainId"> (optional)</param>
        /// <returns>List&lt;Object&gt;</returns>
        List<Object> GetMastersAvatarBalance(string address, double? chainId = default(double?));

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="HatchyverseAPI.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="address"></param>
        /// <param name="chainId"> (optional)</param>
        /// <returns>ApiResponse of List&lt;Object&gt;</returns>
        ApiResponse<List<Object>> GetMastersAvatarBalanceWithHttpInfo(string address, double? chainId = default(double?));
        /// <summary>
        /// 
        /// </summary>
        /// <exception cref="HatchyverseAPI.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="address"></param>
        /// <param name="chainId"> (optional)</param>
        /// <returns>GetMastersAvatarImage200Response</returns>
        GetMastersAvatarImage200Response GetMastersAvatarImage(string address, double? chainId = default(double?));

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="HatchyverseAPI.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="address"></param>
        /// <param name="chainId"> (optional)</param>
        /// <returns>ApiResponse of GetMastersAvatarImage200Response</returns>
        ApiResponse<GetMastersAvatarImage200Response> GetMastersAvatarImageWithHttpInfo(string address, double? chainId = default(double?));
        /// <summary>
        /// 
        /// </summary>
        /// <exception cref="HatchyverseAPI.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="chainId"> (optional)</param>
        /// <returns>List&lt;Object&gt;</returns>
        List<Object> GetMastersAvatarPrices(double? chainId = default(double?));

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="HatchyverseAPI.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="chainId"> (optional)</param>
        /// <returns>ApiResponse of List&lt;Object&gt;</returns>
        ApiResponse<List<Object>> GetMastersAvatarPricesWithHttpInfo(double? chainId = default(double?));
        /// <summary>
        /// 
        /// </summary>
        /// <exception cref="HatchyverseAPI.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="chainId"> (optional)</param>
        /// <param name="typeId"> (optional)</param>
        /// <returns>List&lt;MastersColor&gt;</returns>
        List<MastersColor> GetMastersColors(double? chainId = default(double?), double? typeId = default(double?));

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="HatchyverseAPI.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="chainId"> (optional)</param>
        /// <param name="typeId"> (optional)</param>
        /// <returns>ApiResponse of List&lt;MastersColor&gt;</returns>
        ApiResponse<List<MastersColor>> GetMastersColorsWithHttpInfo(double? chainId = default(double?), double? typeId = default(double?));
        /// <summary>
        /// 
        /// </summary>
        /// <exception cref="HatchyverseAPI.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="getMastersEquipSignatureRequest"></param>
        /// <param name="chainId"> (optional)</param>
        /// <returns>GetMastersEquipSignature200Response</returns>
        GetMastersEquipSignature200Response GetMastersEquipSignature(GetMastersEquipSignatureRequest getMastersEquipSignatureRequest, double? chainId = default(double?));

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="HatchyverseAPI.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="getMastersEquipSignatureRequest"></param>
        /// <param name="chainId"> (optional)</param>
        /// <returns>ApiResponse of GetMastersEquipSignature200Response</returns>
        ApiResponse<GetMastersEquipSignature200Response> GetMastersEquipSignatureWithHttpInfo(GetMastersEquipSignatureRequest getMastersEquipSignatureRequest, double? chainId = default(double?));
        /// <summary>
        /// 
        /// </summary>
        /// <exception cref="HatchyverseAPI.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="getMastersFreePFPSignatureRequest"></param>
        /// <param name="chainId"> (optional)</param>
        /// <returns>GetMastersFreePFPSignature200Response</returns>
        GetMastersFreePFPSignature200Response GetMastersFreePFPSignature(GetMastersFreePFPSignatureRequest getMastersFreePFPSignatureRequest, double? chainId = default(double?));

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="HatchyverseAPI.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="getMastersFreePFPSignatureRequest"></param>
        /// <param name="chainId"> (optional)</param>
        /// <returns>ApiResponse of GetMastersFreePFPSignature200Response</returns>
        ApiResponse<GetMastersFreePFPSignature200Response> GetMastersFreePFPSignatureWithHttpInfo(GetMastersFreePFPSignatureRequest getMastersFreePFPSignatureRequest, double? chainId = default(double?));
        /// <summary>
        /// 
        /// </summary>
        /// <exception cref="HatchyverseAPI.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="chainId"> (optional)</param>
        /// <returns>List&lt;TraitGender&gt;</returns>
        List<TraitGender> GetMastersGenders(double? chainId = default(double?));

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="HatchyverseAPI.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="chainId"> (optional)</param>
        /// <returns>ApiResponse of List&lt;TraitGender&gt;</returns>
        ApiResponse<List<TraitGender>> GetMastersGendersWithHttpInfo(double? chainId = default(double?));
        /// <summary>
        /// 
        /// </summary>
        /// <exception cref="HatchyverseAPI.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="tokenId"></param>
        /// <param name="chainId"> (optional)</param>
        /// <returns>MastersItem</returns>
        MastersItem GetMastersItem(string tokenId, double? chainId = default(double?));

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="HatchyverseAPI.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="tokenId"></param>
        /// <param name="chainId"> (optional)</param>
        /// <returns>ApiResponse of MastersItem</returns>
        ApiResponse<MastersItem> GetMastersItemWithHttpInfo(string tokenId, double? chainId = default(double?));
        /// <summary>
        /// 
        /// </summary>
        /// <exception cref="HatchyverseAPI.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="chainId"> (optional)</param>
        /// <returns>List&lt;ItemCategory&gt;</returns>
        List<ItemCategory> GetMastersItemCategories(double? chainId = default(double?));

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="HatchyverseAPI.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="chainId"> (optional)</param>
        /// <returns>ApiResponse of List&lt;ItemCategory&gt;</returns>
        ApiResponse<List<ItemCategory>> GetMastersItemCategoriesWithHttpInfo(double? chainId = default(double?));
        /// <summary>
        /// 
        /// </summary>
        /// <exception cref="HatchyverseAPI.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="chainId"> (optional)</param>
        /// <returns>List&lt;MastersItem&gt;</returns>
        List<MastersItem> GetMastersItems(double? chainId = default(double?));

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="HatchyverseAPI.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="chainId"> (optional)</param>
        /// <returns>ApiResponse of List&lt;MastersItem&gt;</returns>
        ApiResponse<List<MastersItem>> GetMastersItemsWithHttpInfo(double? chainId = default(double?));
        /// <summary>
        /// 
        /// </summary>
        /// <exception cref="HatchyverseAPI.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="address"></param>
        /// <param name="chainId"> (optional)</param>
        /// <param name="includeSubnet"> (optional)</param>
        /// <returns>List&lt;MastersItemBalance&gt;</returns>
        List<MastersItemBalance> GetMastersItemsBalance(string address, double? chainId = default(double?), bool? includeSubnet = default(bool?));

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="HatchyverseAPI.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="address"></param>
        /// <param name="chainId"> (optional)</param>
        /// <param name="includeSubnet"> (optional)</param>
        /// <returns>ApiResponse of List&lt;MastersItemBalance&gt;</returns>
        ApiResponse<List<MastersItemBalance>> GetMastersItemsBalanceWithHttpInfo(string address, double? chainId = default(double?), bool? includeSubnet = default(bool?));
        /// <summary>
        /// 
        /// </summary>
        /// <exception cref="HatchyverseAPI.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="getMastersLootboxJPSignatureRequest"></param>
        /// <param name="chainId"> (optional)</param>
        /// <returns>MastersLootboxJoepegsSignature</returns>
        MastersLootboxJoepegsSignature GetMastersLootboxJPSignature(GetMastersLootboxJPSignatureRequest getMastersLootboxJPSignatureRequest, double? chainId = default(double?));

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="HatchyverseAPI.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="getMastersLootboxJPSignatureRequest"></param>
        /// <param name="chainId"> (optional)</param>
        /// <returns>ApiResponse of MastersLootboxJoepegsSignature</returns>
        ApiResponse<MastersLootboxJoepegsSignature> GetMastersLootboxJPSignatureWithHttpInfo(GetMastersLootboxJPSignatureRequest getMastersLootboxJPSignatureRequest, double? chainId = default(double?));
        /// <summary>
        /// 
        /// </summary>
        /// <exception cref="HatchyverseAPI.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="getMastersLootboxSignatureRequest"></param>
        /// <param name="chainId"> (optional)</param>
        /// <returns>MastersLootboxSignature</returns>
        MastersLootboxSignature GetMastersLootboxSignature(GetMastersLootboxSignatureRequest getMastersLootboxSignatureRequest, double? chainId = default(double?));

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="HatchyverseAPI.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="getMastersLootboxSignatureRequest"></param>
        /// <param name="chainId"> (optional)</param>
        /// <returns>ApiResponse of MastersLootboxSignature</returns>
        ApiResponse<MastersLootboxSignature> GetMastersLootboxSignatureWithHttpInfo(GetMastersLootboxSignatureRequest getMastersLootboxSignatureRequest, double? chainId = default(double?));
        /// <summary>
        /// 
        /// </summary>
        /// <exception cref="HatchyverseAPI.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="chainId"> (optional)</param>
        /// <param name="gameId"> (optional)</param>
        /// <returns>List&lt;MastersLootbox&gt;</returns>
        List<MastersLootbox> GetMastersLootboxes(double? chainId = default(double?), string gameId = default(string));

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="HatchyverseAPI.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="chainId"> (optional)</param>
        /// <param name="gameId"> (optional)</param>
        /// <returns>ApiResponse of List&lt;MastersLootbox&gt;</returns>
        ApiResponse<List<MastersLootbox>> GetMastersLootboxesWithHttpInfo(double? chainId = default(double?), string gameId = default(string));
        /// <summary>
        /// 
        /// </summary>
        /// <exception cref="HatchyverseAPI.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="tokenId"></param>
        /// <param name="extension"> (optional)</param>
        /// <param name="chainId"> (optional)</param>
        /// <param name="authorization"> (optional)</param>
        /// <returns>GetMastersPFPImageUploadURL200Response</returns>
        GetMastersPFPImageUploadURL200Response GetMastersPFPImageUploadURL(double tokenId, string extension = default(string), double? chainId = default(double?), string authorization = default(string));

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="HatchyverseAPI.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="tokenId"></param>
        /// <param name="extension"> (optional)</param>
        /// <param name="chainId"> (optional)</param>
        /// <param name="authorization"> (optional)</param>
        /// <returns>ApiResponse of GetMastersPFPImageUploadURL200Response</returns>
        ApiResponse<GetMastersPFPImageUploadURL200Response> GetMastersPFPImageUploadURLWithHttpInfo(double tokenId, string extension = default(string), double? chainId = default(double?), string authorization = default(string));
        /// <summary>
        /// 
        /// </summary>
        /// <exception cref="HatchyverseAPI.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="getMastersPFPSignatureRequest"></param>
        /// <param name="chainId"> (optional)</param>
        /// <returns>Object</returns>
        Object GetMastersPFPSignature(GetMastersPFPSignatureRequest getMastersPFPSignatureRequest, double? chainId = default(double?));

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="HatchyverseAPI.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="getMastersPFPSignatureRequest"></param>
        /// <param name="chainId"> (optional)</param>
        /// <returns>ApiResponse of Object</returns>
        ApiResponse<Object> GetMastersPFPSignatureWithHttpInfo(GetMastersPFPSignatureRequest getMastersPFPSignatureRequest, double? chainId = default(double?));
        /// <summary>
        /// 
        /// </summary>
        /// <exception cref="HatchyverseAPI.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="chainId"> (optional)</param>
        /// <returns>List&lt;MastersTraitType&gt;</returns>
        List<MastersTraitType> GetMastersTraitTypes(double? chainId = default(double?));

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="HatchyverseAPI.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="chainId"> (optional)</param>
        /// <returns>ApiResponse of List&lt;MastersTraitType&gt;</returns>
        ApiResponse<List<MastersTraitType>> GetMastersTraitTypesWithHttpInfo(double? chainId = default(double?));
        /// <summary>
        /// 
        /// </summary>
        /// <exception cref="HatchyverseAPI.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="chainId"> (optional)</param>
        /// <returns>List&lt;MastersTrait&gt;</returns>
        List<MastersTrait> GetMastersTraits(double? chainId = default(double?));

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="HatchyverseAPI.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="chainId"> (optional)</param>
        /// <returns>ApiResponse of List&lt;MastersTrait&gt;</returns>
        ApiResponse<List<MastersTrait>> GetMastersTraitsWithHttpInfo(double? chainId = default(double?));
        /// <summary>
        /// 
        /// </summary>
        /// <exception cref="HatchyverseAPI.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="chainId"> (optional)</param>
        /// <returns>List&lt;MastersMintTrait&gt;</returns>
        List<MastersMintTrait> GetMintTraits(double? chainId = default(double?));

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="HatchyverseAPI.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="chainId"> (optional)</param>
        /// <returns>ApiResponse of List&lt;MastersMintTrait&gt;</returns>
        ApiResponse<List<MastersMintTrait>> GetMintTraitsWithHttpInfo(double? chainId = default(double?));
        /// <summary>
        /// 
        /// </summary>
        /// <exception cref="HatchyverseAPI.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="mintMastersItemRequest"></param>
        /// <param name="chainId"> (optional)</param>
        /// <returns>MintMastersItem200Response</returns>
        MintMastersItem200Response MintMastersItem(MintMastersItemRequest mintMastersItemRequest, double? chainId = default(double?));

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="HatchyverseAPI.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="mintMastersItemRequest"></param>
        /// <param name="chainId"> (optional)</param>
        /// <returns>ApiResponse of MintMastersItem200Response</returns>
        ApiResponse<MintMastersItem200Response> MintMastersItemWithHttpInfo(MintMastersItemRequest mintMastersItemRequest, double? chainId = default(double?));
        /// <summary>
        /// 
        /// </summary>
        /// <exception cref="HatchyverseAPI.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="tokenId"></param>
        /// <param name="chainId"> (optional)</param>
        /// <param name="extension"> (optional)</param>
        /// <returns>MintMastersItem200Response</returns>
        MintMastersItem200Response UpdateImage(double tokenId, double? chainId = default(double?), double? extension = default(double?));

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="HatchyverseAPI.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="tokenId"></param>
        /// <param name="chainId"> (optional)</param>
        /// <param name="extension"> (optional)</param>
        /// <returns>ApiResponse of MintMastersItem200Response</returns>
        ApiResponse<MintMastersItem200Response> UpdateImageWithHttpInfo(double tokenId, double? chainId = default(double?), double? extension = default(double?));
        #endregion Synchronous Operations
    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface IMastersApiAsync : IApiAccessor
    {
        #region Asynchronous Operations
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="HatchyverseAPI.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="buyLootboxRequest"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of List&lt;MastersItem&gt;</returns>
        System.Threading.Tasks.Task<List<MastersItem>> BuyLootboxAsync(BuyLootboxRequest buyLootboxRequest, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken));

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="HatchyverseAPI.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="buyLootboxRequest"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (List&lt;MastersItem&gt;)</returns>
        System.Threading.Tasks.Task<ApiResponse<List<MastersItem>>> BuyLootboxWithHttpInfoAsync(BuyLootboxRequest buyLootboxRequest, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken));
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="HatchyverseAPI.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="chainId"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of List&lt;Object&gt;</returns>
        System.Threading.Tasks.Task<List<Object>> GetAccountMastersAvatarBalanceAsync(double? chainId = default(double?), System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken));

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="HatchyverseAPI.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="chainId"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (List&lt;Object&gt;)</returns>
        System.Threading.Tasks.Task<ApiResponse<List<Object>>> GetAccountMastersAvatarBalanceWithHttpInfoAsync(double? chainId = default(double?), System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken));
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="HatchyverseAPI.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="chainId"> (optional)</param>
        /// <param name="includeSubnet"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of List&lt;MastersItemBalance&gt;</returns>
        System.Threading.Tasks.Task<List<MastersItemBalance>> GetAccountMastersItemsBalanceAsync(double? chainId = default(double?), bool? includeSubnet = default(bool?), System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken));

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="HatchyverseAPI.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="chainId"> (optional)</param>
        /// <param name="includeSubnet"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (List&lt;MastersItemBalance&gt;)</returns>
        System.Threading.Tasks.Task<ApiResponse<List<MastersItemBalance>>> GetAccountMastersItemsBalanceWithHttpInfoAsync(double? chainId = default(double?), bool? includeSubnet = default(bool?), System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken));
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="HatchyverseAPI.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="tokenId"></param>
        /// <param name="chainId"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of MastersAvatar</returns>
        System.Threading.Tasks.Task<MastersAvatar> GetMastersAvatarAsync(string tokenId, double? chainId = default(double?), System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken));

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="HatchyverseAPI.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="tokenId"></param>
        /// <param name="chainId"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (MastersAvatar)</returns>
        System.Threading.Tasks.Task<ApiResponse<MastersAvatar>> GetMastersAvatarWithHttpInfoAsync(string tokenId, double? chainId = default(double?), System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken));
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="HatchyverseAPI.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="address"></param>
        /// <param name="chainId"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of List&lt;Object&gt;</returns>
        System.Threading.Tasks.Task<List<Object>> GetMastersAvatarBalanceAsync(string address, double? chainId = default(double?), System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken));

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="HatchyverseAPI.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="address"></param>
        /// <param name="chainId"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (List&lt;Object&gt;)</returns>
        System.Threading.Tasks.Task<ApiResponse<List<Object>>> GetMastersAvatarBalanceWithHttpInfoAsync(string address, double? chainId = default(double?), System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken));
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="HatchyverseAPI.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="address"></param>
        /// <param name="chainId"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of GetMastersAvatarImage200Response</returns>
        System.Threading.Tasks.Task<GetMastersAvatarImage200Response> GetMastersAvatarImageAsync(string address, double? chainId = default(double?), System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken));

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="HatchyverseAPI.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="address"></param>
        /// <param name="chainId"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (GetMastersAvatarImage200Response)</returns>
        System.Threading.Tasks.Task<ApiResponse<GetMastersAvatarImage200Response>> GetMastersAvatarImageWithHttpInfoAsync(string address, double? chainId = default(double?), System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken));
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="HatchyverseAPI.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="chainId"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of List&lt;Object&gt;</returns>
        System.Threading.Tasks.Task<List<Object>> GetMastersAvatarPricesAsync(double? chainId = default(double?), System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken));

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="HatchyverseAPI.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="chainId"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (List&lt;Object&gt;)</returns>
        System.Threading.Tasks.Task<ApiResponse<List<Object>>> GetMastersAvatarPricesWithHttpInfoAsync(double? chainId = default(double?), System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken));
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="HatchyverseAPI.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="chainId"> (optional)</param>
        /// <param name="typeId"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of List&lt;MastersColor&gt;</returns>
        System.Threading.Tasks.Task<List<MastersColor>> GetMastersColorsAsync(double? chainId = default(double?), double? typeId = default(double?), System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken));

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="HatchyverseAPI.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="chainId"> (optional)</param>
        /// <param name="typeId"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (List&lt;MastersColor&gt;)</returns>
        System.Threading.Tasks.Task<ApiResponse<List<MastersColor>>> GetMastersColorsWithHttpInfoAsync(double? chainId = default(double?), double? typeId = default(double?), System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken));
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="HatchyverseAPI.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="getMastersEquipSignatureRequest"></param>
        /// <param name="chainId"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of GetMastersEquipSignature200Response</returns>
        System.Threading.Tasks.Task<GetMastersEquipSignature200Response> GetMastersEquipSignatureAsync(GetMastersEquipSignatureRequest getMastersEquipSignatureRequest, double? chainId = default(double?), System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken));

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="HatchyverseAPI.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="getMastersEquipSignatureRequest"></param>
        /// <param name="chainId"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (GetMastersEquipSignature200Response)</returns>
        System.Threading.Tasks.Task<ApiResponse<GetMastersEquipSignature200Response>> GetMastersEquipSignatureWithHttpInfoAsync(GetMastersEquipSignatureRequest getMastersEquipSignatureRequest, double? chainId = default(double?), System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken));
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="HatchyverseAPI.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="getMastersFreePFPSignatureRequest"></param>
        /// <param name="chainId"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of GetMastersFreePFPSignature200Response</returns>
        System.Threading.Tasks.Task<GetMastersFreePFPSignature200Response> GetMastersFreePFPSignatureAsync(GetMastersFreePFPSignatureRequest getMastersFreePFPSignatureRequest, double? chainId = default(double?), System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken));

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="HatchyverseAPI.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="getMastersFreePFPSignatureRequest"></param>
        /// <param name="chainId"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (GetMastersFreePFPSignature200Response)</returns>
        System.Threading.Tasks.Task<ApiResponse<GetMastersFreePFPSignature200Response>> GetMastersFreePFPSignatureWithHttpInfoAsync(GetMastersFreePFPSignatureRequest getMastersFreePFPSignatureRequest, double? chainId = default(double?), System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken));
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="HatchyverseAPI.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="chainId"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of List&lt;TraitGender&gt;</returns>
        System.Threading.Tasks.Task<List<TraitGender>> GetMastersGendersAsync(double? chainId = default(double?), System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken));

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="HatchyverseAPI.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="chainId"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (List&lt;TraitGender&gt;)</returns>
        System.Threading.Tasks.Task<ApiResponse<List<TraitGender>>> GetMastersGendersWithHttpInfoAsync(double? chainId = default(double?), System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken));
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="HatchyverseAPI.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="tokenId"></param>
        /// <param name="chainId"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of MastersItem</returns>
        System.Threading.Tasks.Task<MastersItem> GetMastersItemAsync(string tokenId, double? chainId = default(double?), System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken));

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="HatchyverseAPI.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="tokenId"></param>
        /// <param name="chainId"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (MastersItem)</returns>
        System.Threading.Tasks.Task<ApiResponse<MastersItem>> GetMastersItemWithHttpInfoAsync(string tokenId, double? chainId = default(double?), System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken));
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="HatchyverseAPI.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="chainId"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of List&lt;ItemCategory&gt;</returns>
        System.Threading.Tasks.Task<List<ItemCategory>> GetMastersItemCategoriesAsync(double? chainId = default(double?), System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken));

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="HatchyverseAPI.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="chainId"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (List&lt;ItemCategory&gt;)</returns>
        System.Threading.Tasks.Task<ApiResponse<List<ItemCategory>>> GetMastersItemCategoriesWithHttpInfoAsync(double? chainId = default(double?), System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken));
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="HatchyverseAPI.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="chainId"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of List&lt;MastersItem&gt;</returns>
        System.Threading.Tasks.Task<List<MastersItem>> GetMastersItemsAsync(double? chainId = default(double?), System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken));

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="HatchyverseAPI.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="chainId"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (List&lt;MastersItem&gt;)</returns>
        System.Threading.Tasks.Task<ApiResponse<List<MastersItem>>> GetMastersItemsWithHttpInfoAsync(double? chainId = default(double?), System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken));
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="HatchyverseAPI.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="address"></param>
        /// <param name="chainId"> (optional)</param>
        /// <param name="includeSubnet"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of List&lt;MastersItemBalance&gt;</returns>
        System.Threading.Tasks.Task<List<MastersItemBalance>> GetMastersItemsBalanceAsync(string address, double? chainId = default(double?), bool? includeSubnet = default(bool?), System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken));

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="HatchyverseAPI.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="address"></param>
        /// <param name="chainId"> (optional)</param>
        /// <param name="includeSubnet"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (List&lt;MastersItemBalance&gt;)</returns>
        System.Threading.Tasks.Task<ApiResponse<List<MastersItemBalance>>> GetMastersItemsBalanceWithHttpInfoAsync(string address, double? chainId = default(double?), bool? includeSubnet = default(bool?), System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken));
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="HatchyverseAPI.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="getMastersLootboxJPSignatureRequest"></param>
        /// <param name="chainId"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of MastersLootboxJoepegsSignature</returns>
        System.Threading.Tasks.Task<MastersLootboxJoepegsSignature> GetMastersLootboxJPSignatureAsync(GetMastersLootboxJPSignatureRequest getMastersLootboxJPSignatureRequest, double? chainId = default(double?), System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken));

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="HatchyverseAPI.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="getMastersLootboxJPSignatureRequest"></param>
        /// <param name="chainId"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (MastersLootboxJoepegsSignature)</returns>
        System.Threading.Tasks.Task<ApiResponse<MastersLootboxJoepegsSignature>> GetMastersLootboxJPSignatureWithHttpInfoAsync(GetMastersLootboxJPSignatureRequest getMastersLootboxJPSignatureRequest, double? chainId = default(double?), System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken));
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="HatchyverseAPI.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="getMastersLootboxSignatureRequest"></param>
        /// <param name="chainId"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of MastersLootboxSignature</returns>
        System.Threading.Tasks.Task<MastersLootboxSignature> GetMastersLootboxSignatureAsync(GetMastersLootboxSignatureRequest getMastersLootboxSignatureRequest, double? chainId = default(double?), System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken));

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="HatchyverseAPI.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="getMastersLootboxSignatureRequest"></param>
        /// <param name="chainId"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (MastersLootboxSignature)</returns>
        System.Threading.Tasks.Task<ApiResponse<MastersLootboxSignature>> GetMastersLootboxSignatureWithHttpInfoAsync(GetMastersLootboxSignatureRequest getMastersLootboxSignatureRequest, double? chainId = default(double?), System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken));
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="HatchyverseAPI.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="chainId"> (optional)</param>
        /// <param name="gameId"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of List&lt;MastersLootbox&gt;</returns>
        System.Threading.Tasks.Task<List<MastersLootbox>> GetMastersLootboxesAsync(double? chainId = default(double?), string gameId = default(string), System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken));

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="HatchyverseAPI.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="chainId"> (optional)</param>
        /// <param name="gameId"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (List&lt;MastersLootbox&gt;)</returns>
        System.Threading.Tasks.Task<ApiResponse<List<MastersLootbox>>> GetMastersLootboxesWithHttpInfoAsync(double? chainId = default(double?), string gameId = default(string), System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken));
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="HatchyverseAPI.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="tokenId"></param>
        /// <param name="extension"> (optional)</param>
        /// <param name="chainId"> (optional)</param>
        /// <param name="authorization"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of GetMastersPFPImageUploadURL200Response</returns>
        System.Threading.Tasks.Task<GetMastersPFPImageUploadURL200Response> GetMastersPFPImageUploadURLAsync(double tokenId, string extension = default(string), double? chainId = default(double?), string authorization = default(string), System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken));

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="HatchyverseAPI.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="tokenId"></param>
        /// <param name="extension"> (optional)</param>
        /// <param name="chainId"> (optional)</param>
        /// <param name="authorization"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (GetMastersPFPImageUploadURL200Response)</returns>
        System.Threading.Tasks.Task<ApiResponse<GetMastersPFPImageUploadURL200Response>> GetMastersPFPImageUploadURLWithHttpInfoAsync(double tokenId, string extension = default(string), double? chainId = default(double?), string authorization = default(string), System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken));
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="HatchyverseAPI.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="getMastersPFPSignatureRequest"></param>
        /// <param name="chainId"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of Object</returns>
        System.Threading.Tasks.Task<Object> GetMastersPFPSignatureAsync(GetMastersPFPSignatureRequest getMastersPFPSignatureRequest, double? chainId = default(double?), System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken));

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="HatchyverseAPI.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="getMastersPFPSignatureRequest"></param>
        /// <param name="chainId"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (Object)</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> GetMastersPFPSignatureWithHttpInfoAsync(GetMastersPFPSignatureRequest getMastersPFPSignatureRequest, double? chainId = default(double?), System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken));
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="HatchyverseAPI.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="chainId"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of List&lt;MastersTraitType&gt;</returns>
        System.Threading.Tasks.Task<List<MastersTraitType>> GetMastersTraitTypesAsync(double? chainId = default(double?), System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken));

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="HatchyverseAPI.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="chainId"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (List&lt;MastersTraitType&gt;)</returns>
        System.Threading.Tasks.Task<ApiResponse<List<MastersTraitType>>> GetMastersTraitTypesWithHttpInfoAsync(double? chainId = default(double?), System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken));
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="HatchyverseAPI.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="chainId"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of List&lt;MastersTrait&gt;</returns>
        System.Threading.Tasks.Task<List<MastersTrait>> GetMastersTraitsAsync(double? chainId = default(double?), System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken));

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="HatchyverseAPI.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="chainId"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (List&lt;MastersTrait&gt;)</returns>
        System.Threading.Tasks.Task<ApiResponse<List<MastersTrait>>> GetMastersTraitsWithHttpInfoAsync(double? chainId = default(double?), System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken));
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="HatchyverseAPI.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="chainId"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of List&lt;MastersMintTrait&gt;</returns>
        System.Threading.Tasks.Task<List<MastersMintTrait>> GetMintTraitsAsync(double? chainId = default(double?), System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken));

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="HatchyverseAPI.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="chainId"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (List&lt;MastersMintTrait&gt;)</returns>
        System.Threading.Tasks.Task<ApiResponse<List<MastersMintTrait>>> GetMintTraitsWithHttpInfoAsync(double? chainId = default(double?), System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken));
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="HatchyverseAPI.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="mintMastersItemRequest"></param>
        /// <param name="chainId"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of MintMastersItem200Response</returns>
        System.Threading.Tasks.Task<MintMastersItem200Response> MintMastersItemAsync(MintMastersItemRequest mintMastersItemRequest, double? chainId = default(double?), System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken));

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="HatchyverseAPI.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="mintMastersItemRequest"></param>
        /// <param name="chainId"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (MintMastersItem200Response)</returns>
        System.Threading.Tasks.Task<ApiResponse<MintMastersItem200Response>> MintMastersItemWithHttpInfoAsync(MintMastersItemRequest mintMastersItemRequest, double? chainId = default(double?), System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken));
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="HatchyverseAPI.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="tokenId"></param>
        /// <param name="chainId"> (optional)</param>
        /// <param name="extension"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of MintMastersItem200Response</returns>
        System.Threading.Tasks.Task<MintMastersItem200Response> UpdateImageAsync(double tokenId, double? chainId = default(double?), double? extension = default(double?), System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken));

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="HatchyverseAPI.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="tokenId"></param>
        /// <param name="chainId"> (optional)</param>
        /// <param name="extension"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (MintMastersItem200Response)</returns>
        System.Threading.Tasks.Task<ApiResponse<MintMastersItem200Response>> UpdateImageWithHttpInfoAsync(double tokenId, double? chainId = default(double?), double? extension = default(double?), System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken));
        #endregion Asynchronous Operations
    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface IMastersApi : IMastersApiSync, IMastersApiAsync
    {

    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public partial class MastersApi : IDisposable, IMastersApi
    {
        private HatchyverseAPI.Client.ExceptionFactory _exceptionFactory = (name, response) => null;

        /// <summary>
        /// Initializes a new instance of the <see cref="MastersApi"/> class.
        /// **IMPORTANT** This will also create an instance of HttpClient, which is less than ideal.
        /// It's better to reuse the <see href="https://docs.microsoft.com/en-us/dotnet/architecture/microservices/implement-resilient-applications/use-httpclientfactory-to-implement-resilient-http-requests#issues-with-the-original-httpclient-class-available-in-net">HttpClient and HttpClientHandler</see>.
        /// </summary>
        /// <returns></returns>
        public MastersApi() : this((string)null)
        {
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="MastersApi"/> class.
        /// **IMPORTANT** This will also create an instance of HttpClient, which is less than ideal.
        /// It's better to reuse the <see href="https://docs.microsoft.com/en-us/dotnet/architecture/microservices/implement-resilient-applications/use-httpclientfactory-to-implement-resilient-http-requests#issues-with-the-original-httpclient-class-available-in-net">HttpClient and HttpClientHandler</see>.
        /// </summary>
        /// <param name="basePath">The target service's base path in URL format.</param>
        /// <exception cref="ArgumentException"></exception>
        /// <returns></returns>
        public MastersApi(string basePath)
        {
            this.Configuration = HatchyverseAPI.Client.Configuration.MergeConfigurations(
                HatchyverseAPI.Client.GlobalConfiguration.Instance,
                new HatchyverseAPI.Client.Configuration { BasePath = basePath }
            );
            this.ApiClient = new HatchyverseAPI.Client.ApiClient(this.Configuration.BasePath);
            this.Client =  this.ApiClient;
            this.AsynchronousClient = this.ApiClient;
            this.ExceptionFactory = HatchyverseAPI.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="MastersApi"/> class using Configuration object.
        /// **IMPORTANT** This will also create an instance of HttpClient, which is less than ideal.
        /// It's better to reuse the <see href="https://docs.microsoft.com/en-us/dotnet/architecture/microservices/implement-resilient-applications/use-httpclientfactory-to-implement-resilient-http-requests#issues-with-the-original-httpclient-class-available-in-net">HttpClient and HttpClientHandler</see>.
        /// </summary>
        /// <param name="configuration">An instance of Configuration.</param>
        /// <exception cref="ArgumentNullException"></exception>
        /// <returns></returns>
        public MastersApi(HatchyverseAPI.Client.Configuration configuration)
        {
            if (configuration == null) throw new ArgumentNullException("configuration");

            this.Configuration = HatchyverseAPI.Client.Configuration.MergeConfigurations(
                HatchyverseAPI.Client.GlobalConfiguration.Instance,
                configuration
            );
            this.ApiClient = new HatchyverseAPI.Client.ApiClient(this.Configuration.BasePath);
            this.Client = this.ApiClient;
            this.AsynchronousClient = this.ApiClient;
            ExceptionFactory = HatchyverseAPI.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="MastersApi"/> class
        /// using a Configuration object and client instance.
        /// </summary>
        /// <param name="client">The client interface for synchronous API access.</param>
        /// <param name="asyncClient">The client interface for asynchronous API access.</param>
        /// <param name="configuration">The configuration object.</param>
        /// <exception cref="ArgumentNullException"></exception>
        public MastersApi(HatchyverseAPI.Client.ISynchronousClient client, HatchyverseAPI.Client.IAsynchronousClient asyncClient, HatchyverseAPI.Client.IReadableConfiguration configuration)
        {
            if (client == null) throw new ArgumentNullException("client");
            if (asyncClient == null) throw new ArgumentNullException("asyncClient");
            if (configuration == null) throw new ArgumentNullException("configuration");

            this.Client = client;
            this.AsynchronousClient = asyncClient;
            this.Configuration = configuration;
            this.ExceptionFactory = HatchyverseAPI.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Disposes resources if they were created by us
        /// </summary>
        public void Dispose()
        {
            this.ApiClient?.Dispose();
        }

        /// <summary>
        /// Holds the ApiClient if created
        /// </summary>
        public HatchyverseAPI.Client.ApiClient ApiClient { get; set; } = null;

        /// <summary>
        /// The client for accessing this underlying API asynchronously.
        /// </summary>
        public HatchyverseAPI.Client.IAsynchronousClient AsynchronousClient { get; set; }

        /// <summary>
        /// The client for accessing this underlying API synchronously.
        /// </summary>
        public HatchyverseAPI.Client.ISynchronousClient Client { get; set; }

        /// <summary>
        /// Gets the base path of the API client.
        /// </summary>
        /// <value>The base path</value>
        public string GetBasePath()
        {
            return this.Configuration.BasePath;
        }

        /// <summary>
        /// Gets or sets the configuration object
        /// </summary>
        /// <value>An instance of the Configuration</value>
        public HatchyverseAPI.Client.IReadableConfiguration Configuration { get; set; }

        /// <summary>
        /// Provides a factory method hook for the creation of exceptions.
        /// </summary>
        public HatchyverseAPI.Client.ExceptionFactory ExceptionFactory
        {
            get
            {
                if (_exceptionFactory != null && _exceptionFactory.GetInvocationList().Length > 1)
                {
                    throw new InvalidOperationException("Multicast delegate for ExceptionFactory is unsupported.");
                }
                return _exceptionFactory;
            }
            set { _exceptionFactory = value; }
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="HatchyverseAPI.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="buyLootboxRequest"></param>
        /// <returns>List&lt;MastersItem&gt;</returns>
        public List<MastersItem> BuyLootbox(BuyLootboxRequest buyLootboxRequest)
        {
            HatchyverseAPI.Client.ApiResponse<List<MastersItem>> localVarResponse = BuyLootboxWithHttpInfo(buyLootboxRequest);
            return localVarResponse.Data;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="HatchyverseAPI.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="buyLootboxRequest"></param>
        /// <returns>ApiResponse of List&lt;MastersItem&gt;</returns>
        public HatchyverseAPI.Client.ApiResponse<List<MastersItem>> BuyLootboxWithHttpInfo(BuyLootboxRequest buyLootboxRequest)
        {
            // verify the required parameter 'buyLootboxRequest' is set
            if (buyLootboxRequest == null)
                throw new HatchyverseAPI.Client.ApiException(400, "Missing required parameter 'buyLootboxRequest' when calling MastersApi->BuyLootbox");

            HatchyverseAPI.Client.RequestOptions localVarRequestOptions = new HatchyverseAPI.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = HatchyverseAPI.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = HatchyverseAPI.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.Data = buyLootboxRequest;


            // make the HTTP request
            var localVarResponse = this.Client.Post<List<MastersItem>>("/masters/lootbox/buy", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("BuyLootbox", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="HatchyverseAPI.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="buyLootboxRequest"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of List&lt;MastersItem&gt;</returns>
        public async System.Threading.Tasks.Task<List<MastersItem>> BuyLootboxAsync(BuyLootboxRequest buyLootboxRequest, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
        {
            var task = BuyLootboxWithHttpInfoAsync(buyLootboxRequest, cancellationToken);
#if UNITY_EDITOR || !UNITY_WEBGL
            HatchyverseAPI.Client.ApiResponse<List<MastersItem>> localVarResponse = await task.ConfigureAwait(false);
#else
            HatchyverseAPI.Client.ApiResponse<List<MastersItem>> localVarResponse = await task;
#endif
            return localVarResponse.Data;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="HatchyverseAPI.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="buyLootboxRequest"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (List&lt;MastersItem&gt;)</returns>
        public async System.Threading.Tasks.Task<HatchyverseAPI.Client.ApiResponse<List<MastersItem>>> BuyLootboxWithHttpInfoAsync(BuyLootboxRequest buyLootboxRequest, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
        {
            // verify the required parameter 'buyLootboxRequest' is set
            if (buyLootboxRequest == null)
                throw new HatchyverseAPI.Client.ApiException(400, "Missing required parameter 'buyLootboxRequest' when calling MastersApi->BuyLootbox");


            HatchyverseAPI.Client.RequestOptions localVarRequestOptions = new HatchyverseAPI.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };


            var localVarContentType = HatchyverseAPI.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = HatchyverseAPI.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.Data = buyLootboxRequest;


            // make the HTTP request

            var task = this.AsynchronousClient.PostAsync<List<MastersItem>>("/masters/lootbox/buy", localVarRequestOptions, this.Configuration, cancellationToken);

#if UNITY_EDITOR || !UNITY_WEBGL
            var localVarResponse = await task.ConfigureAwait(false);
#else
            var localVarResponse = await task;
#endif

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("BuyLootbox", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="HatchyverseAPI.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="chainId"> (optional)</param>
        /// <returns>List&lt;Object&gt;</returns>
        public List<Object> GetAccountMastersAvatarBalance(double? chainId = default(double?))
        {
            HatchyverseAPI.Client.ApiResponse<List<Object>> localVarResponse = GetAccountMastersAvatarBalanceWithHttpInfo(chainId);
            return localVarResponse.Data;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="HatchyverseAPI.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="chainId"> (optional)</param>
        /// <returns>ApiResponse of List&lt;Object&gt;</returns>
        public HatchyverseAPI.Client.ApiResponse<List<Object>> GetAccountMastersAvatarBalanceWithHttpInfo(double? chainId = default(double?))
        {
            HatchyverseAPI.Client.RequestOptions localVarRequestOptions = new HatchyverseAPI.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = HatchyverseAPI.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = HatchyverseAPI.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            if (chainId != null)
            {
                localVarRequestOptions.QueryParameters.Add(HatchyverseAPI.Client.ClientUtils.ParameterToMultiMap("", "chainId", chainId));
            }


            // make the HTTP request
            var localVarResponse = this.Client.Get<List<Object>>("/masters/avatars/balance", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetAccountMastersAvatarBalance", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="HatchyverseAPI.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="chainId"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of List&lt;Object&gt;</returns>
        public async System.Threading.Tasks.Task<List<Object>> GetAccountMastersAvatarBalanceAsync(double? chainId = default(double?), System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
        {
            var task = GetAccountMastersAvatarBalanceWithHttpInfoAsync(chainId, cancellationToken);
#if UNITY_EDITOR || !UNITY_WEBGL
            HatchyverseAPI.Client.ApiResponse<List<Object>> localVarResponse = await task.ConfigureAwait(false);
#else
            HatchyverseAPI.Client.ApiResponse<List<Object>> localVarResponse = await task;
#endif
            return localVarResponse.Data;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="HatchyverseAPI.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="chainId"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (List&lt;Object&gt;)</returns>
        public async System.Threading.Tasks.Task<HatchyverseAPI.Client.ApiResponse<List<Object>>> GetAccountMastersAvatarBalanceWithHttpInfoAsync(double? chainId = default(double?), System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
        {

            HatchyverseAPI.Client.RequestOptions localVarRequestOptions = new HatchyverseAPI.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };


            var localVarContentType = HatchyverseAPI.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = HatchyverseAPI.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            if (chainId != null)
            {
                localVarRequestOptions.QueryParameters.Add(HatchyverseAPI.Client.ClientUtils.ParameterToMultiMap("", "chainId", chainId));
            }


            // make the HTTP request

            var task = this.AsynchronousClient.GetAsync<List<Object>>("/masters/avatars/balance", localVarRequestOptions, this.Configuration, cancellationToken);

#if UNITY_EDITOR || !UNITY_WEBGL
            var localVarResponse = await task.ConfigureAwait(false);
#else
            var localVarResponse = await task;
#endif

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetAccountMastersAvatarBalance", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="HatchyverseAPI.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="chainId"> (optional)</param>
        /// <param name="includeSubnet"> (optional)</param>
        /// <returns>List&lt;MastersItemBalance&gt;</returns>
        public List<MastersItemBalance> GetAccountMastersItemsBalance(double? chainId = default(double?), bool? includeSubnet = default(bool?))
        {
            HatchyverseAPI.Client.ApiResponse<List<MastersItemBalance>> localVarResponse = GetAccountMastersItemsBalanceWithHttpInfo(chainId, includeSubnet);
            return localVarResponse.Data;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="HatchyverseAPI.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="chainId"> (optional)</param>
        /// <param name="includeSubnet"> (optional)</param>
        /// <returns>ApiResponse of List&lt;MastersItemBalance&gt;</returns>
        public HatchyverseAPI.Client.ApiResponse<List<MastersItemBalance>> GetAccountMastersItemsBalanceWithHttpInfo(double? chainId = default(double?), bool? includeSubnet = default(bool?))
        {
            HatchyverseAPI.Client.RequestOptions localVarRequestOptions = new HatchyverseAPI.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = HatchyverseAPI.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = HatchyverseAPI.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            if (chainId != null)
            {
                localVarRequestOptions.QueryParameters.Add(HatchyverseAPI.Client.ClientUtils.ParameterToMultiMap("", "chainId", chainId));
            }
            if (includeSubnet != null)
            {
                localVarRequestOptions.QueryParameters.Add(HatchyverseAPI.Client.ClientUtils.ParameterToMultiMap("", "includeSubnet", includeSubnet));
            }


            // make the HTTP request
            var localVarResponse = this.Client.Get<List<MastersItemBalance>>("/masters/items/balance", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetAccountMastersItemsBalance", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="HatchyverseAPI.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="chainId"> (optional)</param>
        /// <param name="includeSubnet"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of List&lt;MastersItemBalance&gt;</returns>
        public async System.Threading.Tasks.Task<List<MastersItemBalance>> GetAccountMastersItemsBalanceAsync(double? chainId = default(double?), bool? includeSubnet = default(bool?), System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
        {
            var task = GetAccountMastersItemsBalanceWithHttpInfoAsync(chainId, includeSubnet, cancellationToken);
#if UNITY_EDITOR || !UNITY_WEBGL
            HatchyverseAPI.Client.ApiResponse<List<MastersItemBalance>> localVarResponse = await task.ConfigureAwait(false);
#else
            HatchyverseAPI.Client.ApiResponse<List<MastersItemBalance>> localVarResponse = await task;
#endif
            return localVarResponse.Data;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="HatchyverseAPI.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="chainId"> (optional)</param>
        /// <param name="includeSubnet"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (List&lt;MastersItemBalance&gt;)</returns>
        public async System.Threading.Tasks.Task<HatchyverseAPI.Client.ApiResponse<List<MastersItemBalance>>> GetAccountMastersItemsBalanceWithHttpInfoAsync(double? chainId = default(double?), bool? includeSubnet = default(bool?), System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
        {

            HatchyverseAPI.Client.RequestOptions localVarRequestOptions = new HatchyverseAPI.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };


            var localVarContentType = HatchyverseAPI.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = HatchyverseAPI.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            if (chainId != null)
            {
                localVarRequestOptions.QueryParameters.Add(HatchyverseAPI.Client.ClientUtils.ParameterToMultiMap("", "chainId", chainId));
            }
            if (includeSubnet != null)
            {
                localVarRequestOptions.QueryParameters.Add(HatchyverseAPI.Client.ClientUtils.ParameterToMultiMap("", "includeSubnet", includeSubnet));
            }


            // make the HTTP request

            var task = this.AsynchronousClient.GetAsync<List<MastersItemBalance>>("/masters/items/balance", localVarRequestOptions, this.Configuration, cancellationToken);

#if UNITY_EDITOR || !UNITY_WEBGL
            var localVarResponse = await task.ConfigureAwait(false);
#else
            var localVarResponse = await task;
#endif

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetAccountMastersItemsBalance", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="HatchyverseAPI.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="tokenId"></param>
        /// <param name="chainId"> (optional)</param>
        /// <returns>MastersAvatar</returns>
        public MastersAvatar GetMastersAvatar(string tokenId, double? chainId = default(double?))
        {
            HatchyverseAPI.Client.ApiResponse<MastersAvatar> localVarResponse = GetMastersAvatarWithHttpInfo(tokenId, chainId);
            return localVarResponse.Data;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="HatchyverseAPI.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="tokenId"></param>
        /// <param name="chainId"> (optional)</param>
        /// <returns>ApiResponse of MastersAvatar</returns>
        public HatchyverseAPI.Client.ApiResponse<MastersAvatar> GetMastersAvatarWithHttpInfo(string tokenId, double? chainId = default(double?))
        {
            // verify the required parameter 'tokenId' is set
            if (tokenId == null)
                throw new HatchyverseAPI.Client.ApiException(400, "Missing required parameter 'tokenId' when calling MastersApi->GetMastersAvatar");

            HatchyverseAPI.Client.RequestOptions localVarRequestOptions = new HatchyverseAPI.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = HatchyverseAPI.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = HatchyverseAPI.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("tokenId", HatchyverseAPI.Client.ClientUtils.ParameterToString(tokenId)); // path parameter
            if (chainId != null)
            {
                localVarRequestOptions.QueryParameters.Add(HatchyverseAPI.Client.ClientUtils.ParameterToMultiMap("", "chainId", chainId));
            }


            // make the HTTP request
            var localVarResponse = this.Client.Get<MastersAvatar>("/masters/avatars/{tokenId}", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetMastersAvatar", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="HatchyverseAPI.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="tokenId"></param>
        /// <param name="chainId"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of MastersAvatar</returns>
        public async System.Threading.Tasks.Task<MastersAvatar> GetMastersAvatarAsync(string tokenId, double? chainId = default(double?), System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
        {
            var task = GetMastersAvatarWithHttpInfoAsync(tokenId, chainId, cancellationToken);
#if UNITY_EDITOR || !UNITY_WEBGL
            HatchyverseAPI.Client.ApiResponse<MastersAvatar> localVarResponse = await task.ConfigureAwait(false);
#else
            HatchyverseAPI.Client.ApiResponse<MastersAvatar> localVarResponse = await task;
#endif
            return localVarResponse.Data;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="HatchyverseAPI.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="tokenId"></param>
        /// <param name="chainId"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (MastersAvatar)</returns>
        public async System.Threading.Tasks.Task<HatchyverseAPI.Client.ApiResponse<MastersAvatar>> GetMastersAvatarWithHttpInfoAsync(string tokenId, double? chainId = default(double?), System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
        {
            // verify the required parameter 'tokenId' is set
            if (tokenId == null)
                throw new HatchyverseAPI.Client.ApiException(400, "Missing required parameter 'tokenId' when calling MastersApi->GetMastersAvatar");


            HatchyverseAPI.Client.RequestOptions localVarRequestOptions = new HatchyverseAPI.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };


            var localVarContentType = HatchyverseAPI.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = HatchyverseAPI.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("tokenId", HatchyverseAPI.Client.ClientUtils.ParameterToString(tokenId)); // path parameter
            if (chainId != null)
            {
                localVarRequestOptions.QueryParameters.Add(HatchyverseAPI.Client.ClientUtils.ParameterToMultiMap("", "chainId", chainId));
            }


            // make the HTTP request

            var task = this.AsynchronousClient.GetAsync<MastersAvatar>("/masters/avatars/{tokenId}", localVarRequestOptions, this.Configuration, cancellationToken);

#if UNITY_EDITOR || !UNITY_WEBGL
            var localVarResponse = await task.ConfigureAwait(false);
#else
            var localVarResponse = await task;
#endif

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetMastersAvatar", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="HatchyverseAPI.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="address"></param>
        /// <param name="chainId"> (optional)</param>
        /// <returns>List&lt;Object&gt;</returns>
        public List<Object> GetMastersAvatarBalance(string address, double? chainId = default(double?))
        {
            HatchyverseAPI.Client.ApiResponse<List<Object>> localVarResponse = GetMastersAvatarBalanceWithHttpInfo(address, chainId);
            return localVarResponse.Data;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="HatchyverseAPI.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="address"></param>
        /// <param name="chainId"> (optional)</param>
        /// <returns>ApiResponse of List&lt;Object&gt;</returns>
        public HatchyverseAPI.Client.ApiResponse<List<Object>> GetMastersAvatarBalanceWithHttpInfo(string address, double? chainId = default(double?))
        {
            // verify the required parameter 'address' is set
            if (address == null)
                throw new HatchyverseAPI.Client.ApiException(400, "Missing required parameter 'address' when calling MastersApi->GetMastersAvatarBalance");

            HatchyverseAPI.Client.RequestOptions localVarRequestOptions = new HatchyverseAPI.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = HatchyverseAPI.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = HatchyverseAPI.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("address", HatchyverseAPI.Client.ClientUtils.ParameterToString(address)); // path parameter
            if (chainId != null)
            {
                localVarRequestOptions.QueryParameters.Add(HatchyverseAPI.Client.ClientUtils.ParameterToMultiMap("", "chainId", chainId));
            }


            // make the HTTP request
            var localVarResponse = this.Client.Get<List<Object>>("/masters/avatars/balance/{address}", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetMastersAvatarBalance", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="HatchyverseAPI.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="address"></param>
        /// <param name="chainId"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of List&lt;Object&gt;</returns>
        public async System.Threading.Tasks.Task<List<Object>> GetMastersAvatarBalanceAsync(string address, double? chainId = default(double?), System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
        {
            var task = GetMastersAvatarBalanceWithHttpInfoAsync(address, chainId, cancellationToken);
#if UNITY_EDITOR || !UNITY_WEBGL
            HatchyverseAPI.Client.ApiResponse<List<Object>> localVarResponse = await task.ConfigureAwait(false);
#else
            HatchyverseAPI.Client.ApiResponse<List<Object>> localVarResponse = await task;
#endif
            return localVarResponse.Data;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="HatchyverseAPI.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="address"></param>
        /// <param name="chainId"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (List&lt;Object&gt;)</returns>
        public async System.Threading.Tasks.Task<HatchyverseAPI.Client.ApiResponse<List<Object>>> GetMastersAvatarBalanceWithHttpInfoAsync(string address, double? chainId = default(double?), System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
        {
            // verify the required parameter 'address' is set
            if (address == null)
                throw new HatchyverseAPI.Client.ApiException(400, "Missing required parameter 'address' when calling MastersApi->GetMastersAvatarBalance");


            HatchyverseAPI.Client.RequestOptions localVarRequestOptions = new HatchyverseAPI.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };


            var localVarContentType = HatchyverseAPI.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = HatchyverseAPI.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("address", HatchyverseAPI.Client.ClientUtils.ParameterToString(address)); // path parameter
            if (chainId != null)
            {
                localVarRequestOptions.QueryParameters.Add(HatchyverseAPI.Client.ClientUtils.ParameterToMultiMap("", "chainId", chainId));
            }


            // make the HTTP request

            var task = this.AsynchronousClient.GetAsync<List<Object>>("/masters/avatars/balance/{address}", localVarRequestOptions, this.Configuration, cancellationToken);

#if UNITY_EDITOR || !UNITY_WEBGL
            var localVarResponse = await task.ConfigureAwait(false);
#else
            var localVarResponse = await task;
#endif

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetMastersAvatarBalance", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="HatchyverseAPI.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="address"></param>
        /// <param name="chainId"> (optional)</param>
        /// <returns>GetMastersAvatarImage200Response</returns>
        public GetMastersAvatarImage200Response GetMastersAvatarImage(string address, double? chainId = default(double?))
        {
            HatchyverseAPI.Client.ApiResponse<GetMastersAvatarImage200Response> localVarResponse = GetMastersAvatarImageWithHttpInfo(address, chainId);
            return localVarResponse.Data;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="HatchyverseAPI.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="address"></param>
        /// <param name="chainId"> (optional)</param>
        /// <returns>ApiResponse of GetMastersAvatarImage200Response</returns>
        public HatchyverseAPI.Client.ApiResponse<GetMastersAvatarImage200Response> GetMastersAvatarImageWithHttpInfo(string address, double? chainId = default(double?))
        {
            // verify the required parameter 'address' is set
            if (address == null)
                throw new HatchyverseAPI.Client.ApiException(400, "Missing required parameter 'address' when calling MastersApi->GetMastersAvatarImage");

            HatchyverseAPI.Client.RequestOptions localVarRequestOptions = new HatchyverseAPI.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = HatchyverseAPI.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = HatchyverseAPI.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("address", HatchyverseAPI.Client.ClientUtils.ParameterToString(address)); // path parameter
            if (chainId != null)
            {
                localVarRequestOptions.QueryParameters.Add(HatchyverseAPI.Client.ClientUtils.ParameterToMultiMap("", "chainId", chainId));
            }


            // make the HTTP request
            var localVarResponse = this.Client.Get<GetMastersAvatarImage200Response>("/masters/avatars/images/{address}", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetMastersAvatarImage", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="HatchyverseAPI.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="address"></param>
        /// <param name="chainId"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of GetMastersAvatarImage200Response</returns>
        public async System.Threading.Tasks.Task<GetMastersAvatarImage200Response> GetMastersAvatarImageAsync(string address, double? chainId = default(double?), System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
        {
            var task = GetMastersAvatarImageWithHttpInfoAsync(address, chainId, cancellationToken);
#if UNITY_EDITOR || !UNITY_WEBGL
            HatchyverseAPI.Client.ApiResponse<GetMastersAvatarImage200Response> localVarResponse = await task.ConfigureAwait(false);
#else
            HatchyverseAPI.Client.ApiResponse<GetMastersAvatarImage200Response> localVarResponse = await task;
#endif
            return localVarResponse.Data;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="HatchyverseAPI.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="address"></param>
        /// <param name="chainId"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (GetMastersAvatarImage200Response)</returns>
        public async System.Threading.Tasks.Task<HatchyverseAPI.Client.ApiResponse<GetMastersAvatarImage200Response>> GetMastersAvatarImageWithHttpInfoAsync(string address, double? chainId = default(double?), System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
        {
            // verify the required parameter 'address' is set
            if (address == null)
                throw new HatchyverseAPI.Client.ApiException(400, "Missing required parameter 'address' when calling MastersApi->GetMastersAvatarImage");


            HatchyverseAPI.Client.RequestOptions localVarRequestOptions = new HatchyverseAPI.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };


            var localVarContentType = HatchyverseAPI.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = HatchyverseAPI.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("address", HatchyverseAPI.Client.ClientUtils.ParameterToString(address)); // path parameter
            if (chainId != null)
            {
                localVarRequestOptions.QueryParameters.Add(HatchyverseAPI.Client.ClientUtils.ParameterToMultiMap("", "chainId", chainId));
            }


            // make the HTTP request

            var task = this.AsynchronousClient.GetAsync<GetMastersAvatarImage200Response>("/masters/avatars/images/{address}", localVarRequestOptions, this.Configuration, cancellationToken);

#if UNITY_EDITOR || !UNITY_WEBGL
            var localVarResponse = await task.ConfigureAwait(false);
#else
            var localVarResponse = await task;
#endif

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetMastersAvatarImage", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="HatchyverseAPI.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="chainId"> (optional)</param>
        /// <returns>List&lt;Object&gt;</returns>
        public List<Object> GetMastersAvatarPrices(double? chainId = default(double?))
        {
            HatchyverseAPI.Client.ApiResponse<List<Object>> localVarResponse = GetMastersAvatarPricesWithHttpInfo(chainId);
            return localVarResponse.Data;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="HatchyverseAPI.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="chainId"> (optional)</param>
        /// <returns>ApiResponse of List&lt;Object&gt;</returns>
        public HatchyverseAPI.Client.ApiResponse<List<Object>> GetMastersAvatarPricesWithHttpInfo(double? chainId = default(double?))
        {
            HatchyverseAPI.Client.RequestOptions localVarRequestOptions = new HatchyverseAPI.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = HatchyverseAPI.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = HatchyverseAPI.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            if (chainId != null)
            {
                localVarRequestOptions.QueryParameters.Add(HatchyverseAPI.Client.ClientUtils.ParameterToMultiMap("", "chainId", chainId));
            }


            // make the HTTP request
            var localVarResponse = this.Client.Get<List<Object>>("/masters/avatars/prices", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetMastersAvatarPrices", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="HatchyverseAPI.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="chainId"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of List&lt;Object&gt;</returns>
        public async System.Threading.Tasks.Task<List<Object>> GetMastersAvatarPricesAsync(double? chainId = default(double?), System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
        {
            var task = GetMastersAvatarPricesWithHttpInfoAsync(chainId, cancellationToken);
#if UNITY_EDITOR || !UNITY_WEBGL
            HatchyverseAPI.Client.ApiResponse<List<Object>> localVarResponse = await task.ConfigureAwait(false);
#else
            HatchyverseAPI.Client.ApiResponse<List<Object>> localVarResponse = await task;
#endif
            return localVarResponse.Data;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="HatchyverseAPI.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="chainId"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (List&lt;Object&gt;)</returns>
        public async System.Threading.Tasks.Task<HatchyverseAPI.Client.ApiResponse<List<Object>>> GetMastersAvatarPricesWithHttpInfoAsync(double? chainId = default(double?), System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
        {

            HatchyverseAPI.Client.RequestOptions localVarRequestOptions = new HatchyverseAPI.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };


            var localVarContentType = HatchyverseAPI.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = HatchyverseAPI.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            if (chainId != null)
            {
                localVarRequestOptions.QueryParameters.Add(HatchyverseAPI.Client.ClientUtils.ParameterToMultiMap("", "chainId", chainId));
            }


            // make the HTTP request

            var task = this.AsynchronousClient.GetAsync<List<Object>>("/masters/avatars/prices", localVarRequestOptions, this.Configuration, cancellationToken);

#if UNITY_EDITOR || !UNITY_WEBGL
            var localVarResponse = await task.ConfigureAwait(false);
#else
            var localVarResponse = await task;
#endif

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetMastersAvatarPrices", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="HatchyverseAPI.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="chainId"> (optional)</param>
        /// <param name="typeId"> (optional)</param>
        /// <returns>List&lt;MastersColor&gt;</returns>
        public List<MastersColor> GetMastersColors(double? chainId = default(double?), double? typeId = default(double?))
        {
            HatchyverseAPI.Client.ApiResponse<List<MastersColor>> localVarResponse = GetMastersColorsWithHttpInfo(chainId, typeId);
            return localVarResponse.Data;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="HatchyverseAPI.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="chainId"> (optional)</param>
        /// <param name="typeId"> (optional)</param>
        /// <returns>ApiResponse of List&lt;MastersColor&gt;</returns>
        public HatchyverseAPI.Client.ApiResponse<List<MastersColor>> GetMastersColorsWithHttpInfo(double? chainId = default(double?), double? typeId = default(double?))
        {
            HatchyverseAPI.Client.RequestOptions localVarRequestOptions = new HatchyverseAPI.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = HatchyverseAPI.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = HatchyverseAPI.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            if (chainId != null)
            {
                localVarRequestOptions.QueryParameters.Add(HatchyverseAPI.Client.ClientUtils.ParameterToMultiMap("", "chainId", chainId));
            }
            if (typeId != null)
            {
                localVarRequestOptions.QueryParameters.Add(HatchyverseAPI.Client.ClientUtils.ParameterToMultiMap("", "typeId", typeId));
            }


            // make the HTTP request
            var localVarResponse = this.Client.Get<List<MastersColor>>("/masters/colors", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetMastersColors", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="HatchyverseAPI.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="chainId"> (optional)</param>
        /// <param name="typeId"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of List&lt;MastersColor&gt;</returns>
        public async System.Threading.Tasks.Task<List<MastersColor>> GetMastersColorsAsync(double? chainId = default(double?), double? typeId = default(double?), System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
        {
            var task = GetMastersColorsWithHttpInfoAsync(chainId, typeId, cancellationToken);
#if UNITY_EDITOR || !UNITY_WEBGL
            HatchyverseAPI.Client.ApiResponse<List<MastersColor>> localVarResponse = await task.ConfigureAwait(false);
#else
            HatchyverseAPI.Client.ApiResponse<List<MastersColor>> localVarResponse = await task;
#endif
            return localVarResponse.Data;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="HatchyverseAPI.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="chainId"> (optional)</param>
        /// <param name="typeId"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (List&lt;MastersColor&gt;)</returns>
        public async System.Threading.Tasks.Task<HatchyverseAPI.Client.ApiResponse<List<MastersColor>>> GetMastersColorsWithHttpInfoAsync(double? chainId = default(double?), double? typeId = default(double?), System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
        {

            HatchyverseAPI.Client.RequestOptions localVarRequestOptions = new HatchyverseAPI.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };


            var localVarContentType = HatchyverseAPI.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = HatchyverseAPI.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            if (chainId != null)
            {
                localVarRequestOptions.QueryParameters.Add(HatchyverseAPI.Client.ClientUtils.ParameterToMultiMap("", "chainId", chainId));
            }
            if (typeId != null)
            {
                localVarRequestOptions.QueryParameters.Add(HatchyverseAPI.Client.ClientUtils.ParameterToMultiMap("", "typeId", typeId));
            }


            // make the HTTP request

            var task = this.AsynchronousClient.GetAsync<List<MastersColor>>("/masters/colors", localVarRequestOptions, this.Configuration, cancellationToken);

#if UNITY_EDITOR || !UNITY_WEBGL
            var localVarResponse = await task.ConfigureAwait(false);
#else
            var localVarResponse = await task;
#endif

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetMastersColors", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="HatchyverseAPI.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="getMastersEquipSignatureRequest"></param>
        /// <param name="chainId"> (optional)</param>
        /// <returns>GetMastersEquipSignature200Response</returns>
        public GetMastersEquipSignature200Response GetMastersEquipSignature(GetMastersEquipSignatureRequest getMastersEquipSignatureRequest, double? chainId = default(double?))
        {
            HatchyverseAPI.Client.ApiResponse<GetMastersEquipSignature200Response> localVarResponse = GetMastersEquipSignatureWithHttpInfo(getMastersEquipSignatureRequest, chainId);
            return localVarResponse.Data;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="HatchyverseAPI.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="getMastersEquipSignatureRequest"></param>
        /// <param name="chainId"> (optional)</param>
        /// <returns>ApiResponse of GetMastersEquipSignature200Response</returns>
        public HatchyverseAPI.Client.ApiResponse<GetMastersEquipSignature200Response> GetMastersEquipSignatureWithHttpInfo(GetMastersEquipSignatureRequest getMastersEquipSignatureRequest, double? chainId = default(double?))
        {
            // verify the required parameter 'getMastersEquipSignatureRequest' is set
            if (getMastersEquipSignatureRequest == null)
                throw new HatchyverseAPI.Client.ApiException(400, "Missing required parameter 'getMastersEquipSignatureRequest' when calling MastersApi->GetMastersEquipSignature");

            HatchyverseAPI.Client.RequestOptions localVarRequestOptions = new HatchyverseAPI.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = HatchyverseAPI.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = HatchyverseAPI.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            if (chainId != null)
            {
                localVarRequestOptions.QueryParameters.Add(HatchyverseAPI.Client.ClientUtils.ParameterToMultiMap("", "chainId", chainId));
            }
            localVarRequestOptions.Data = getMastersEquipSignatureRequest;


            // make the HTTP request
            var localVarResponse = this.Client.Post<GetMastersEquipSignature200Response>("/masters/equip/signature", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetMastersEquipSignature", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="HatchyverseAPI.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="getMastersEquipSignatureRequest"></param>
        /// <param name="chainId"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of GetMastersEquipSignature200Response</returns>
        public async System.Threading.Tasks.Task<GetMastersEquipSignature200Response> GetMastersEquipSignatureAsync(GetMastersEquipSignatureRequest getMastersEquipSignatureRequest, double? chainId = default(double?), System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
        {
            var task = GetMastersEquipSignatureWithHttpInfoAsync(getMastersEquipSignatureRequest, chainId, cancellationToken);
#if UNITY_EDITOR || !UNITY_WEBGL
            HatchyverseAPI.Client.ApiResponse<GetMastersEquipSignature200Response> localVarResponse = await task.ConfigureAwait(false);
#else
            HatchyverseAPI.Client.ApiResponse<GetMastersEquipSignature200Response> localVarResponse = await task;
#endif
            return localVarResponse.Data;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="HatchyverseAPI.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="getMastersEquipSignatureRequest"></param>
        /// <param name="chainId"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (GetMastersEquipSignature200Response)</returns>
        public async System.Threading.Tasks.Task<HatchyverseAPI.Client.ApiResponse<GetMastersEquipSignature200Response>> GetMastersEquipSignatureWithHttpInfoAsync(GetMastersEquipSignatureRequest getMastersEquipSignatureRequest, double? chainId = default(double?), System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
        {
            // verify the required parameter 'getMastersEquipSignatureRequest' is set
            if (getMastersEquipSignatureRequest == null)
                throw new HatchyverseAPI.Client.ApiException(400, "Missing required parameter 'getMastersEquipSignatureRequest' when calling MastersApi->GetMastersEquipSignature");


            HatchyverseAPI.Client.RequestOptions localVarRequestOptions = new HatchyverseAPI.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };


            var localVarContentType = HatchyverseAPI.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = HatchyverseAPI.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            if (chainId != null)
            {
                localVarRequestOptions.QueryParameters.Add(HatchyverseAPI.Client.ClientUtils.ParameterToMultiMap("", "chainId", chainId));
            }
            localVarRequestOptions.Data = getMastersEquipSignatureRequest;


            // make the HTTP request

            var task = this.AsynchronousClient.PostAsync<GetMastersEquipSignature200Response>("/masters/equip/signature", localVarRequestOptions, this.Configuration, cancellationToken);

#if UNITY_EDITOR || !UNITY_WEBGL
            var localVarResponse = await task.ConfigureAwait(false);
#else
            var localVarResponse = await task;
#endif

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetMastersEquipSignature", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="HatchyverseAPI.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="getMastersFreePFPSignatureRequest"></param>
        /// <param name="chainId"> (optional)</param>
        /// <returns>GetMastersFreePFPSignature200Response</returns>
        public GetMastersFreePFPSignature200Response GetMastersFreePFPSignature(GetMastersFreePFPSignatureRequest getMastersFreePFPSignatureRequest, double? chainId = default(double?))
        {
            HatchyverseAPI.Client.ApiResponse<GetMastersFreePFPSignature200Response> localVarResponse = GetMastersFreePFPSignatureWithHttpInfo(getMastersFreePFPSignatureRequest, chainId);
            return localVarResponse.Data;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="HatchyverseAPI.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="getMastersFreePFPSignatureRequest"></param>
        /// <param name="chainId"> (optional)</param>
        /// <returns>ApiResponse of GetMastersFreePFPSignature200Response</returns>
        public HatchyverseAPI.Client.ApiResponse<GetMastersFreePFPSignature200Response> GetMastersFreePFPSignatureWithHttpInfo(GetMastersFreePFPSignatureRequest getMastersFreePFPSignatureRequest, double? chainId = default(double?))
        {
            // verify the required parameter 'getMastersFreePFPSignatureRequest' is set
            if (getMastersFreePFPSignatureRequest == null)
                throw new HatchyverseAPI.Client.ApiException(400, "Missing required parameter 'getMastersFreePFPSignatureRequest' when calling MastersApi->GetMastersFreePFPSignature");

            HatchyverseAPI.Client.RequestOptions localVarRequestOptions = new HatchyverseAPI.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = HatchyverseAPI.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = HatchyverseAPI.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            if (chainId != null)
            {
                localVarRequestOptions.QueryParameters.Add(HatchyverseAPI.Client.ClientUtils.ParameterToMultiMap("", "chainId", chainId));
            }
            localVarRequestOptions.Data = getMastersFreePFPSignatureRequest;


            // make the HTTP request
            var localVarResponse = this.Client.Post<GetMastersFreePFPSignature200Response>("/masters/avatars/free", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetMastersFreePFPSignature", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="HatchyverseAPI.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="getMastersFreePFPSignatureRequest"></param>
        /// <param name="chainId"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of GetMastersFreePFPSignature200Response</returns>
        public async System.Threading.Tasks.Task<GetMastersFreePFPSignature200Response> GetMastersFreePFPSignatureAsync(GetMastersFreePFPSignatureRequest getMastersFreePFPSignatureRequest, double? chainId = default(double?), System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
        {
            var task = GetMastersFreePFPSignatureWithHttpInfoAsync(getMastersFreePFPSignatureRequest, chainId, cancellationToken);
#if UNITY_EDITOR || !UNITY_WEBGL
            HatchyverseAPI.Client.ApiResponse<GetMastersFreePFPSignature200Response> localVarResponse = await task.ConfigureAwait(false);
#else
            HatchyverseAPI.Client.ApiResponse<GetMastersFreePFPSignature200Response> localVarResponse = await task;
#endif
            return localVarResponse.Data;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="HatchyverseAPI.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="getMastersFreePFPSignatureRequest"></param>
        /// <param name="chainId"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (GetMastersFreePFPSignature200Response)</returns>
        public async System.Threading.Tasks.Task<HatchyverseAPI.Client.ApiResponse<GetMastersFreePFPSignature200Response>> GetMastersFreePFPSignatureWithHttpInfoAsync(GetMastersFreePFPSignatureRequest getMastersFreePFPSignatureRequest, double? chainId = default(double?), System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
        {
            // verify the required parameter 'getMastersFreePFPSignatureRequest' is set
            if (getMastersFreePFPSignatureRequest == null)
                throw new HatchyverseAPI.Client.ApiException(400, "Missing required parameter 'getMastersFreePFPSignatureRequest' when calling MastersApi->GetMastersFreePFPSignature");


            HatchyverseAPI.Client.RequestOptions localVarRequestOptions = new HatchyverseAPI.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };


            var localVarContentType = HatchyverseAPI.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = HatchyverseAPI.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            if (chainId != null)
            {
                localVarRequestOptions.QueryParameters.Add(HatchyverseAPI.Client.ClientUtils.ParameterToMultiMap("", "chainId", chainId));
            }
            localVarRequestOptions.Data = getMastersFreePFPSignatureRequest;


            // make the HTTP request

            var task = this.AsynchronousClient.PostAsync<GetMastersFreePFPSignature200Response>("/masters/avatars/free", localVarRequestOptions, this.Configuration, cancellationToken);

#if UNITY_EDITOR || !UNITY_WEBGL
            var localVarResponse = await task.ConfigureAwait(false);
#else
            var localVarResponse = await task;
#endif

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetMastersFreePFPSignature", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="HatchyverseAPI.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="chainId"> (optional)</param>
        /// <returns>List&lt;TraitGender&gt;</returns>
        public List<TraitGender> GetMastersGenders(double? chainId = default(double?))
        {
            HatchyverseAPI.Client.ApiResponse<List<TraitGender>> localVarResponse = GetMastersGendersWithHttpInfo(chainId);
            return localVarResponse.Data;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="HatchyverseAPI.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="chainId"> (optional)</param>
        /// <returns>ApiResponse of List&lt;TraitGender&gt;</returns>
        public HatchyverseAPI.Client.ApiResponse<List<TraitGender>> GetMastersGendersWithHttpInfo(double? chainId = default(double?))
        {
            HatchyverseAPI.Client.RequestOptions localVarRequestOptions = new HatchyverseAPI.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = HatchyverseAPI.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = HatchyverseAPI.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            if (chainId != null)
            {
                localVarRequestOptions.QueryParameters.Add(HatchyverseAPI.Client.ClientUtils.ParameterToMultiMap("", "chainId", chainId));
            }


            // make the HTTP request
            var localVarResponse = this.Client.Get<List<TraitGender>>("/masters/genders", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetMastersGenders", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="HatchyverseAPI.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="chainId"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of List&lt;TraitGender&gt;</returns>
        public async System.Threading.Tasks.Task<List<TraitGender>> GetMastersGendersAsync(double? chainId = default(double?), System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
        {
            var task = GetMastersGendersWithHttpInfoAsync(chainId, cancellationToken);
#if UNITY_EDITOR || !UNITY_WEBGL
            HatchyverseAPI.Client.ApiResponse<List<TraitGender>> localVarResponse = await task.ConfigureAwait(false);
#else
            HatchyverseAPI.Client.ApiResponse<List<TraitGender>> localVarResponse = await task;
#endif
            return localVarResponse.Data;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="HatchyverseAPI.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="chainId"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (List&lt;TraitGender&gt;)</returns>
        public async System.Threading.Tasks.Task<HatchyverseAPI.Client.ApiResponse<List<TraitGender>>> GetMastersGendersWithHttpInfoAsync(double? chainId = default(double?), System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
        {

            HatchyverseAPI.Client.RequestOptions localVarRequestOptions = new HatchyverseAPI.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };


            var localVarContentType = HatchyverseAPI.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = HatchyverseAPI.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            if (chainId != null)
            {
                localVarRequestOptions.QueryParameters.Add(HatchyverseAPI.Client.ClientUtils.ParameterToMultiMap("", "chainId", chainId));
            }


            // make the HTTP request

            var task = this.AsynchronousClient.GetAsync<List<TraitGender>>("/masters/genders", localVarRequestOptions, this.Configuration, cancellationToken);

#if UNITY_EDITOR || !UNITY_WEBGL
            var localVarResponse = await task.ConfigureAwait(false);
#else
            var localVarResponse = await task;
#endif

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetMastersGenders", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="HatchyverseAPI.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="tokenId"></param>
        /// <param name="chainId"> (optional)</param>
        /// <returns>MastersItem</returns>
        public MastersItem GetMastersItem(string tokenId, double? chainId = default(double?))
        {
            HatchyverseAPI.Client.ApiResponse<MastersItem> localVarResponse = GetMastersItemWithHttpInfo(tokenId, chainId);
            return localVarResponse.Data;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="HatchyverseAPI.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="tokenId"></param>
        /// <param name="chainId"> (optional)</param>
        /// <returns>ApiResponse of MastersItem</returns>
        public HatchyverseAPI.Client.ApiResponse<MastersItem> GetMastersItemWithHttpInfo(string tokenId, double? chainId = default(double?))
        {
            // verify the required parameter 'tokenId' is set
            if (tokenId == null)
                throw new HatchyverseAPI.Client.ApiException(400, "Missing required parameter 'tokenId' when calling MastersApi->GetMastersItem");

            HatchyverseAPI.Client.RequestOptions localVarRequestOptions = new HatchyverseAPI.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = HatchyverseAPI.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = HatchyverseAPI.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("tokenId", HatchyverseAPI.Client.ClientUtils.ParameterToString(tokenId)); // path parameter
            if (chainId != null)
            {
                localVarRequestOptions.QueryParameters.Add(HatchyverseAPI.Client.ClientUtils.ParameterToMultiMap("", "chainId", chainId));
            }


            // make the HTTP request
            var localVarResponse = this.Client.Get<MastersItem>("/masters/items/{tokenId}", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetMastersItem", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="HatchyverseAPI.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="tokenId"></param>
        /// <param name="chainId"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of MastersItem</returns>
        public async System.Threading.Tasks.Task<MastersItem> GetMastersItemAsync(string tokenId, double? chainId = default(double?), System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
        {
            var task = GetMastersItemWithHttpInfoAsync(tokenId, chainId, cancellationToken);
#if UNITY_EDITOR || !UNITY_WEBGL
            HatchyverseAPI.Client.ApiResponse<MastersItem> localVarResponse = await task.ConfigureAwait(false);
#else
            HatchyverseAPI.Client.ApiResponse<MastersItem> localVarResponse = await task;
#endif
            return localVarResponse.Data;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="HatchyverseAPI.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="tokenId"></param>
        /// <param name="chainId"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (MastersItem)</returns>
        public async System.Threading.Tasks.Task<HatchyverseAPI.Client.ApiResponse<MastersItem>> GetMastersItemWithHttpInfoAsync(string tokenId, double? chainId = default(double?), System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
        {
            // verify the required parameter 'tokenId' is set
            if (tokenId == null)
                throw new HatchyverseAPI.Client.ApiException(400, "Missing required parameter 'tokenId' when calling MastersApi->GetMastersItem");


            HatchyverseAPI.Client.RequestOptions localVarRequestOptions = new HatchyverseAPI.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };


            var localVarContentType = HatchyverseAPI.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = HatchyverseAPI.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("tokenId", HatchyverseAPI.Client.ClientUtils.ParameterToString(tokenId)); // path parameter
            if (chainId != null)
            {
                localVarRequestOptions.QueryParameters.Add(HatchyverseAPI.Client.ClientUtils.ParameterToMultiMap("", "chainId", chainId));
            }


            // make the HTTP request

            var task = this.AsynchronousClient.GetAsync<MastersItem>("/masters/items/{tokenId}", localVarRequestOptions, this.Configuration, cancellationToken);

#if UNITY_EDITOR || !UNITY_WEBGL
            var localVarResponse = await task.ConfigureAwait(false);
#else
            var localVarResponse = await task;
#endif

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetMastersItem", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="HatchyverseAPI.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="chainId"> (optional)</param>
        /// <returns>List&lt;ItemCategory&gt;</returns>
        public List<ItemCategory> GetMastersItemCategories(double? chainId = default(double?))
        {
            HatchyverseAPI.Client.ApiResponse<List<ItemCategory>> localVarResponse = GetMastersItemCategoriesWithHttpInfo(chainId);
            return localVarResponse.Data;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="HatchyverseAPI.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="chainId"> (optional)</param>
        /// <returns>ApiResponse of List&lt;ItemCategory&gt;</returns>
        public HatchyverseAPI.Client.ApiResponse<List<ItemCategory>> GetMastersItemCategoriesWithHttpInfo(double? chainId = default(double?))
        {
            HatchyverseAPI.Client.RequestOptions localVarRequestOptions = new HatchyverseAPI.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = HatchyverseAPI.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = HatchyverseAPI.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            if (chainId != null)
            {
                localVarRequestOptions.QueryParameters.Add(HatchyverseAPI.Client.ClientUtils.ParameterToMultiMap("", "chainId", chainId));
            }


            // make the HTTP request
            var localVarResponse = this.Client.Get<List<ItemCategory>>("/masters/items/categories", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetMastersItemCategories", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="HatchyverseAPI.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="chainId"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of List&lt;ItemCategory&gt;</returns>
        public async System.Threading.Tasks.Task<List<ItemCategory>> GetMastersItemCategoriesAsync(double? chainId = default(double?), System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
        {
            var task = GetMastersItemCategoriesWithHttpInfoAsync(chainId, cancellationToken);
#if UNITY_EDITOR || !UNITY_WEBGL
            HatchyverseAPI.Client.ApiResponse<List<ItemCategory>> localVarResponse = await task.ConfigureAwait(false);
#else
            HatchyverseAPI.Client.ApiResponse<List<ItemCategory>> localVarResponse = await task;
#endif
            return localVarResponse.Data;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="HatchyverseAPI.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="chainId"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (List&lt;ItemCategory&gt;)</returns>
        public async System.Threading.Tasks.Task<HatchyverseAPI.Client.ApiResponse<List<ItemCategory>>> GetMastersItemCategoriesWithHttpInfoAsync(double? chainId = default(double?), System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
        {

            HatchyverseAPI.Client.RequestOptions localVarRequestOptions = new HatchyverseAPI.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };


            var localVarContentType = HatchyverseAPI.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = HatchyverseAPI.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            if (chainId != null)
            {
                localVarRequestOptions.QueryParameters.Add(HatchyverseAPI.Client.ClientUtils.ParameterToMultiMap("", "chainId", chainId));
            }


            // make the HTTP request

            var task = this.AsynchronousClient.GetAsync<List<ItemCategory>>("/masters/items/categories", localVarRequestOptions, this.Configuration, cancellationToken);

#if UNITY_EDITOR || !UNITY_WEBGL
            var localVarResponse = await task.ConfigureAwait(false);
#else
            var localVarResponse = await task;
#endif

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetMastersItemCategories", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="HatchyverseAPI.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="chainId"> (optional)</param>
        /// <returns>List&lt;MastersItem&gt;</returns>
        public List<MastersItem> GetMastersItems(double? chainId = default(double?))
        {
            HatchyverseAPI.Client.ApiResponse<List<MastersItem>> localVarResponse = GetMastersItemsWithHttpInfo(chainId);
            return localVarResponse.Data;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="HatchyverseAPI.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="chainId"> (optional)</param>
        /// <returns>ApiResponse of List&lt;MastersItem&gt;</returns>
        public HatchyverseAPI.Client.ApiResponse<List<MastersItem>> GetMastersItemsWithHttpInfo(double? chainId = default(double?))
        {
            HatchyverseAPI.Client.RequestOptions localVarRequestOptions = new HatchyverseAPI.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = HatchyverseAPI.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = HatchyverseAPI.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            if (chainId != null)
            {
                localVarRequestOptions.QueryParameters.Add(HatchyverseAPI.Client.ClientUtils.ParameterToMultiMap("", "chainId", chainId));
            }


            // make the HTTP request
            var localVarResponse = this.Client.Get<List<MastersItem>>("/masters/items", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetMastersItems", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="HatchyverseAPI.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="chainId"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of List&lt;MastersItem&gt;</returns>
        public async System.Threading.Tasks.Task<List<MastersItem>> GetMastersItemsAsync(double? chainId = default(double?), System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
        {
            var task = GetMastersItemsWithHttpInfoAsync(chainId, cancellationToken);
#if UNITY_EDITOR || !UNITY_WEBGL
            HatchyverseAPI.Client.ApiResponse<List<MastersItem>> localVarResponse = await task.ConfigureAwait(false);
#else
            HatchyverseAPI.Client.ApiResponse<List<MastersItem>> localVarResponse = await task;
#endif
            return localVarResponse.Data;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="HatchyverseAPI.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="chainId"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (List&lt;MastersItem&gt;)</returns>
        public async System.Threading.Tasks.Task<HatchyverseAPI.Client.ApiResponse<List<MastersItem>>> GetMastersItemsWithHttpInfoAsync(double? chainId = default(double?), System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
        {

            HatchyverseAPI.Client.RequestOptions localVarRequestOptions = new HatchyverseAPI.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };


            var localVarContentType = HatchyverseAPI.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = HatchyverseAPI.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            if (chainId != null)
            {
                localVarRequestOptions.QueryParameters.Add(HatchyverseAPI.Client.ClientUtils.ParameterToMultiMap("", "chainId", chainId));
            }


            // make the HTTP request

            var task = this.AsynchronousClient.GetAsync<List<MastersItem>>("/masters/items", localVarRequestOptions, this.Configuration, cancellationToken);

#if UNITY_EDITOR || !UNITY_WEBGL
            var localVarResponse = await task.ConfigureAwait(false);
#else
            var localVarResponse = await task;
#endif

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetMastersItems", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="HatchyverseAPI.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="address"></param>
        /// <param name="chainId"> (optional)</param>
        /// <param name="includeSubnet"> (optional)</param>
        /// <returns>List&lt;MastersItemBalance&gt;</returns>
        public List<MastersItemBalance> GetMastersItemsBalance(string address, double? chainId = default(double?), bool? includeSubnet = default(bool?))
        {
            HatchyverseAPI.Client.ApiResponse<List<MastersItemBalance>> localVarResponse = GetMastersItemsBalanceWithHttpInfo(address, chainId, includeSubnet);
            return localVarResponse.Data;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="HatchyverseAPI.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="address"></param>
        /// <param name="chainId"> (optional)</param>
        /// <param name="includeSubnet"> (optional)</param>
        /// <returns>ApiResponse of List&lt;MastersItemBalance&gt;</returns>
        public HatchyverseAPI.Client.ApiResponse<List<MastersItemBalance>> GetMastersItemsBalanceWithHttpInfo(string address, double? chainId = default(double?), bool? includeSubnet = default(bool?))
        {
            // verify the required parameter 'address' is set
            if (address == null)
                throw new HatchyverseAPI.Client.ApiException(400, "Missing required parameter 'address' when calling MastersApi->GetMastersItemsBalance");

            HatchyverseAPI.Client.RequestOptions localVarRequestOptions = new HatchyverseAPI.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = HatchyverseAPI.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = HatchyverseAPI.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("address", HatchyverseAPI.Client.ClientUtils.ParameterToString(address)); // path parameter
            if (chainId != null)
            {
                localVarRequestOptions.QueryParameters.Add(HatchyverseAPI.Client.ClientUtils.ParameterToMultiMap("", "chainId", chainId));
            }
            if (includeSubnet != null)
            {
                localVarRequestOptions.QueryParameters.Add(HatchyverseAPI.Client.ClientUtils.ParameterToMultiMap("", "includeSubnet", includeSubnet));
            }


            // make the HTTP request
            var localVarResponse = this.Client.Get<List<MastersItemBalance>>("/masters/items/balance/{address}", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetMastersItemsBalance", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="HatchyverseAPI.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="address"></param>
        /// <param name="chainId"> (optional)</param>
        /// <param name="includeSubnet"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of List&lt;MastersItemBalance&gt;</returns>
        public async System.Threading.Tasks.Task<List<MastersItemBalance>> GetMastersItemsBalanceAsync(string address, double? chainId = default(double?), bool? includeSubnet = default(bool?), System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
        {
            var task = GetMastersItemsBalanceWithHttpInfoAsync(address, chainId, includeSubnet, cancellationToken);
#if UNITY_EDITOR || !UNITY_WEBGL
            HatchyverseAPI.Client.ApiResponse<List<MastersItemBalance>> localVarResponse = await task.ConfigureAwait(false);
#else
            HatchyverseAPI.Client.ApiResponse<List<MastersItemBalance>> localVarResponse = await task;
#endif
            return localVarResponse.Data;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="HatchyverseAPI.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="address"></param>
        /// <param name="chainId"> (optional)</param>
        /// <param name="includeSubnet"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (List&lt;MastersItemBalance&gt;)</returns>
        public async System.Threading.Tasks.Task<HatchyverseAPI.Client.ApiResponse<List<MastersItemBalance>>> GetMastersItemsBalanceWithHttpInfoAsync(string address, double? chainId = default(double?), bool? includeSubnet = default(bool?), System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
        {
            // verify the required parameter 'address' is set
            if (address == null)
                throw new HatchyverseAPI.Client.ApiException(400, "Missing required parameter 'address' when calling MastersApi->GetMastersItemsBalance");


            HatchyverseAPI.Client.RequestOptions localVarRequestOptions = new HatchyverseAPI.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };


            var localVarContentType = HatchyverseAPI.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = HatchyverseAPI.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("address", HatchyverseAPI.Client.ClientUtils.ParameterToString(address)); // path parameter
            if (chainId != null)
            {
                localVarRequestOptions.QueryParameters.Add(HatchyverseAPI.Client.ClientUtils.ParameterToMultiMap("", "chainId", chainId));
            }
            if (includeSubnet != null)
            {
                localVarRequestOptions.QueryParameters.Add(HatchyverseAPI.Client.ClientUtils.ParameterToMultiMap("", "includeSubnet", includeSubnet));
            }


            // make the HTTP request

            var task = this.AsynchronousClient.GetAsync<List<MastersItemBalance>>("/masters/items/balance/{address}", localVarRequestOptions, this.Configuration, cancellationToken);

#if UNITY_EDITOR || !UNITY_WEBGL
            var localVarResponse = await task.ConfigureAwait(false);
#else
            var localVarResponse = await task;
#endif

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetMastersItemsBalance", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="HatchyverseAPI.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="getMastersLootboxJPSignatureRequest"></param>
        /// <param name="chainId"> (optional)</param>
        /// <returns>MastersLootboxJoepegsSignature</returns>
        public MastersLootboxJoepegsSignature GetMastersLootboxJPSignature(GetMastersLootboxJPSignatureRequest getMastersLootboxJPSignatureRequest, double? chainId = default(double?))
        {
            HatchyverseAPI.Client.ApiResponse<MastersLootboxJoepegsSignature> localVarResponse = GetMastersLootboxJPSignatureWithHttpInfo(getMastersLootboxJPSignatureRequest, chainId);
            return localVarResponse.Data;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="HatchyverseAPI.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="getMastersLootboxJPSignatureRequest"></param>
        /// <param name="chainId"> (optional)</param>
        /// <returns>ApiResponse of MastersLootboxJoepegsSignature</returns>
        public HatchyverseAPI.Client.ApiResponse<MastersLootboxJoepegsSignature> GetMastersLootboxJPSignatureWithHttpInfo(GetMastersLootboxJPSignatureRequest getMastersLootboxJPSignatureRequest, double? chainId = default(double?))
        {
            // verify the required parameter 'getMastersLootboxJPSignatureRequest' is set
            if (getMastersLootboxJPSignatureRequest == null)
                throw new HatchyverseAPI.Client.ApiException(400, "Missing required parameter 'getMastersLootboxJPSignatureRequest' when calling MastersApi->GetMastersLootboxJPSignature");

            HatchyverseAPI.Client.RequestOptions localVarRequestOptions = new HatchyverseAPI.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = HatchyverseAPI.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = HatchyverseAPI.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            if (chainId != null)
            {
                localVarRequestOptions.QueryParameters.Add(HatchyverseAPI.Client.ClientUtils.ParameterToMultiMap("", "chainId", chainId));
            }
            localVarRequestOptions.Data = getMastersLootboxJPSignatureRequest;


            // make the HTTP request
            var localVarResponse = this.Client.Post<MastersLootboxJoepegsSignature>("/masters/lootbox/joepegs", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetMastersLootboxJPSignature", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="HatchyverseAPI.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="getMastersLootboxJPSignatureRequest"></param>
        /// <param name="chainId"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of MastersLootboxJoepegsSignature</returns>
        public async System.Threading.Tasks.Task<MastersLootboxJoepegsSignature> GetMastersLootboxJPSignatureAsync(GetMastersLootboxJPSignatureRequest getMastersLootboxJPSignatureRequest, double? chainId = default(double?), System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
        {
            var task = GetMastersLootboxJPSignatureWithHttpInfoAsync(getMastersLootboxJPSignatureRequest, chainId, cancellationToken);
#if UNITY_EDITOR || !UNITY_WEBGL
            HatchyverseAPI.Client.ApiResponse<MastersLootboxJoepegsSignature> localVarResponse = await task.ConfigureAwait(false);
#else
            HatchyverseAPI.Client.ApiResponse<MastersLootboxJoepegsSignature> localVarResponse = await task;
#endif
            return localVarResponse.Data;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="HatchyverseAPI.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="getMastersLootboxJPSignatureRequest"></param>
        /// <param name="chainId"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (MastersLootboxJoepegsSignature)</returns>
        public async System.Threading.Tasks.Task<HatchyverseAPI.Client.ApiResponse<MastersLootboxJoepegsSignature>> GetMastersLootboxJPSignatureWithHttpInfoAsync(GetMastersLootboxJPSignatureRequest getMastersLootboxJPSignatureRequest, double? chainId = default(double?), System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
        {
            // verify the required parameter 'getMastersLootboxJPSignatureRequest' is set
            if (getMastersLootboxJPSignatureRequest == null)
                throw new HatchyverseAPI.Client.ApiException(400, "Missing required parameter 'getMastersLootboxJPSignatureRequest' when calling MastersApi->GetMastersLootboxJPSignature");


            HatchyverseAPI.Client.RequestOptions localVarRequestOptions = new HatchyverseAPI.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };


            var localVarContentType = HatchyverseAPI.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = HatchyverseAPI.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            if (chainId != null)
            {
                localVarRequestOptions.QueryParameters.Add(HatchyverseAPI.Client.ClientUtils.ParameterToMultiMap("", "chainId", chainId));
            }
            localVarRequestOptions.Data = getMastersLootboxJPSignatureRequest;


            // make the HTTP request

            var task = this.AsynchronousClient.PostAsync<MastersLootboxJoepegsSignature>("/masters/lootbox/joepegs", localVarRequestOptions, this.Configuration, cancellationToken);

#if UNITY_EDITOR || !UNITY_WEBGL
            var localVarResponse = await task.ConfigureAwait(false);
#else
            var localVarResponse = await task;
#endif

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetMastersLootboxJPSignature", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="HatchyverseAPI.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="getMastersLootboxSignatureRequest"></param>
        /// <param name="chainId"> (optional)</param>
        /// <returns>MastersLootboxSignature</returns>
        public MastersLootboxSignature GetMastersLootboxSignature(GetMastersLootboxSignatureRequest getMastersLootboxSignatureRequest, double? chainId = default(double?))
        {
            HatchyverseAPI.Client.ApiResponse<MastersLootboxSignature> localVarResponse = GetMastersLootboxSignatureWithHttpInfo(getMastersLootboxSignatureRequest, chainId);
            return localVarResponse.Data;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="HatchyverseAPI.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="getMastersLootboxSignatureRequest"></param>
        /// <param name="chainId"> (optional)</param>
        /// <returns>ApiResponse of MastersLootboxSignature</returns>
        public HatchyverseAPI.Client.ApiResponse<MastersLootboxSignature> GetMastersLootboxSignatureWithHttpInfo(GetMastersLootboxSignatureRequest getMastersLootboxSignatureRequest, double? chainId = default(double?))
        {
            // verify the required parameter 'getMastersLootboxSignatureRequest' is set
            if (getMastersLootboxSignatureRequest == null)
                throw new HatchyverseAPI.Client.ApiException(400, "Missing required parameter 'getMastersLootboxSignatureRequest' when calling MastersApi->GetMastersLootboxSignature");

            HatchyverseAPI.Client.RequestOptions localVarRequestOptions = new HatchyverseAPI.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = HatchyverseAPI.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = HatchyverseAPI.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            if (chainId != null)
            {
                localVarRequestOptions.QueryParameters.Add(HatchyverseAPI.Client.ClientUtils.ParameterToMultiMap("", "chainId", chainId));
            }
            localVarRequestOptions.Data = getMastersLootboxSignatureRequest;


            // make the HTTP request
            var localVarResponse = this.Client.Post<MastersLootboxSignature>("/masters/lootbox", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetMastersLootboxSignature", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="HatchyverseAPI.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="getMastersLootboxSignatureRequest"></param>
        /// <param name="chainId"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of MastersLootboxSignature</returns>
        public async System.Threading.Tasks.Task<MastersLootboxSignature> GetMastersLootboxSignatureAsync(GetMastersLootboxSignatureRequest getMastersLootboxSignatureRequest, double? chainId = default(double?), System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
        {
            var task = GetMastersLootboxSignatureWithHttpInfoAsync(getMastersLootboxSignatureRequest, chainId, cancellationToken);
#if UNITY_EDITOR || !UNITY_WEBGL
            HatchyverseAPI.Client.ApiResponse<MastersLootboxSignature> localVarResponse = await task.ConfigureAwait(false);
#else
            HatchyverseAPI.Client.ApiResponse<MastersLootboxSignature> localVarResponse = await task;
#endif
            return localVarResponse.Data;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="HatchyverseAPI.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="getMastersLootboxSignatureRequest"></param>
        /// <param name="chainId"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (MastersLootboxSignature)</returns>
        public async System.Threading.Tasks.Task<HatchyverseAPI.Client.ApiResponse<MastersLootboxSignature>> GetMastersLootboxSignatureWithHttpInfoAsync(GetMastersLootboxSignatureRequest getMastersLootboxSignatureRequest, double? chainId = default(double?), System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
        {
            // verify the required parameter 'getMastersLootboxSignatureRequest' is set
            if (getMastersLootboxSignatureRequest == null)
                throw new HatchyverseAPI.Client.ApiException(400, "Missing required parameter 'getMastersLootboxSignatureRequest' when calling MastersApi->GetMastersLootboxSignature");


            HatchyverseAPI.Client.RequestOptions localVarRequestOptions = new HatchyverseAPI.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };


            var localVarContentType = HatchyverseAPI.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = HatchyverseAPI.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            if (chainId != null)
            {
                localVarRequestOptions.QueryParameters.Add(HatchyverseAPI.Client.ClientUtils.ParameterToMultiMap("", "chainId", chainId));
            }
            localVarRequestOptions.Data = getMastersLootboxSignatureRequest;


            // make the HTTP request

            var task = this.AsynchronousClient.PostAsync<MastersLootboxSignature>("/masters/lootbox", localVarRequestOptions, this.Configuration, cancellationToken);

#if UNITY_EDITOR || !UNITY_WEBGL
            var localVarResponse = await task.ConfigureAwait(false);
#else
            var localVarResponse = await task;
#endif

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetMastersLootboxSignature", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="HatchyverseAPI.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="chainId"> (optional)</param>
        /// <param name="gameId"> (optional)</param>
        /// <returns>List&lt;MastersLootbox&gt;</returns>
        public List<MastersLootbox> GetMastersLootboxes(double? chainId = default(double?), string gameId = default(string))
        {
            HatchyverseAPI.Client.ApiResponse<List<MastersLootbox>> localVarResponse = GetMastersLootboxesWithHttpInfo(chainId, gameId);
            return localVarResponse.Data;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="HatchyverseAPI.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="chainId"> (optional)</param>
        /// <param name="gameId"> (optional)</param>
        /// <returns>ApiResponse of List&lt;MastersLootbox&gt;</returns>
        public HatchyverseAPI.Client.ApiResponse<List<MastersLootbox>> GetMastersLootboxesWithHttpInfo(double? chainId = default(double?), string gameId = default(string))
        {
            HatchyverseAPI.Client.RequestOptions localVarRequestOptions = new HatchyverseAPI.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = HatchyverseAPI.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = HatchyverseAPI.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            if (chainId != null)
            {
                localVarRequestOptions.QueryParameters.Add(HatchyverseAPI.Client.ClientUtils.ParameterToMultiMap("", "chainId", chainId));
            }
            if (gameId != null)
            {
                localVarRequestOptions.QueryParameters.Add(HatchyverseAPI.Client.ClientUtils.ParameterToMultiMap("", "gameId", gameId));
            }


            // make the HTTP request
            var localVarResponse = this.Client.Get<List<MastersLootbox>>("/masters/lootbox", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetMastersLootboxes", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="HatchyverseAPI.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="chainId"> (optional)</param>
        /// <param name="gameId"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of List&lt;MastersLootbox&gt;</returns>
        public async System.Threading.Tasks.Task<List<MastersLootbox>> GetMastersLootboxesAsync(double? chainId = default(double?), string gameId = default(string), System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
        {
            var task = GetMastersLootboxesWithHttpInfoAsync(chainId, gameId, cancellationToken);
#if UNITY_EDITOR || !UNITY_WEBGL
            HatchyverseAPI.Client.ApiResponse<List<MastersLootbox>> localVarResponse = await task.ConfigureAwait(false);
#else
            HatchyverseAPI.Client.ApiResponse<List<MastersLootbox>> localVarResponse = await task;
#endif
            return localVarResponse.Data;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="HatchyverseAPI.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="chainId"> (optional)</param>
        /// <param name="gameId"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (List&lt;MastersLootbox&gt;)</returns>
        public async System.Threading.Tasks.Task<HatchyverseAPI.Client.ApiResponse<List<MastersLootbox>>> GetMastersLootboxesWithHttpInfoAsync(double? chainId = default(double?), string gameId = default(string), System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
        {

            HatchyverseAPI.Client.RequestOptions localVarRequestOptions = new HatchyverseAPI.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };


            var localVarContentType = HatchyverseAPI.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = HatchyverseAPI.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            if (chainId != null)
            {
                localVarRequestOptions.QueryParameters.Add(HatchyverseAPI.Client.ClientUtils.ParameterToMultiMap("", "chainId", chainId));
            }
            if (gameId != null)
            {
                localVarRequestOptions.QueryParameters.Add(HatchyverseAPI.Client.ClientUtils.ParameterToMultiMap("", "gameId", gameId));
            }


            // make the HTTP request

            var task = this.AsynchronousClient.GetAsync<List<MastersLootbox>>("/masters/lootbox", localVarRequestOptions, this.Configuration, cancellationToken);

#if UNITY_EDITOR || !UNITY_WEBGL
            var localVarResponse = await task.ConfigureAwait(false);
#else
            var localVarResponse = await task;
#endif

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetMastersLootboxes", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="HatchyverseAPI.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="tokenId"></param>
        /// <param name="extension"> (optional)</param>
        /// <param name="chainId"> (optional)</param>
        /// <param name="authorization"> (optional)</param>
        /// <returns>GetMastersPFPImageUploadURL200Response</returns>
        public GetMastersPFPImageUploadURL200Response GetMastersPFPImageUploadURL(double tokenId, string extension = default(string), double? chainId = default(double?), string authorization = default(string))
        {
            HatchyverseAPI.Client.ApiResponse<GetMastersPFPImageUploadURL200Response> localVarResponse = GetMastersPFPImageUploadURLWithHttpInfo(tokenId, extension, chainId, authorization);
            return localVarResponse.Data;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="HatchyverseAPI.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="tokenId"></param>
        /// <param name="extension"> (optional)</param>
        /// <param name="chainId"> (optional)</param>
        /// <param name="authorization"> (optional)</param>
        /// <returns>ApiResponse of GetMastersPFPImageUploadURL200Response</returns>
        public HatchyverseAPI.Client.ApiResponse<GetMastersPFPImageUploadURL200Response> GetMastersPFPImageUploadURLWithHttpInfo(double tokenId, string extension = default(string), double? chainId = default(double?), string authorization = default(string))
        {
            HatchyverseAPI.Client.RequestOptions localVarRequestOptions = new HatchyverseAPI.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = HatchyverseAPI.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = HatchyverseAPI.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("tokenId", HatchyverseAPI.Client.ClientUtils.ParameterToString(tokenId)); // path parameter
            if (extension != null)
            {
                localVarRequestOptions.QueryParameters.Add(HatchyverseAPI.Client.ClientUtils.ParameterToMultiMap("", "extension", extension));
            }
            if (chainId != null)
            {
                localVarRequestOptions.QueryParameters.Add(HatchyverseAPI.Client.ClientUtils.ParameterToMultiMap("", "chainId", chainId));
            }
            if (authorization != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", HatchyverseAPI.Client.ClientUtils.ParameterToString(authorization)); // header parameter
            }


            // make the HTTP request
            var localVarResponse = this.Client.Get<GetMastersPFPImageUploadURL200Response>("/masters/avatars/image-upload-url/{tokenId}", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetMastersPFPImageUploadURL", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="HatchyverseAPI.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="tokenId"></param>
        /// <param name="extension"> (optional)</param>
        /// <param name="chainId"> (optional)</param>
        /// <param name="authorization"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of GetMastersPFPImageUploadURL200Response</returns>
        public async System.Threading.Tasks.Task<GetMastersPFPImageUploadURL200Response> GetMastersPFPImageUploadURLAsync(double tokenId, string extension = default(string), double? chainId = default(double?), string authorization = default(string), System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
        {
            var task = GetMastersPFPImageUploadURLWithHttpInfoAsync(tokenId, extension, chainId, authorization, cancellationToken);
#if UNITY_EDITOR || !UNITY_WEBGL
            HatchyverseAPI.Client.ApiResponse<GetMastersPFPImageUploadURL200Response> localVarResponse = await task.ConfigureAwait(false);
#else
            HatchyverseAPI.Client.ApiResponse<GetMastersPFPImageUploadURL200Response> localVarResponse = await task;
#endif
            return localVarResponse.Data;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="HatchyverseAPI.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="tokenId"></param>
        /// <param name="extension"> (optional)</param>
        /// <param name="chainId"> (optional)</param>
        /// <param name="authorization"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (GetMastersPFPImageUploadURL200Response)</returns>
        public async System.Threading.Tasks.Task<HatchyverseAPI.Client.ApiResponse<GetMastersPFPImageUploadURL200Response>> GetMastersPFPImageUploadURLWithHttpInfoAsync(double tokenId, string extension = default(string), double? chainId = default(double?), string authorization = default(string), System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
        {

            HatchyverseAPI.Client.RequestOptions localVarRequestOptions = new HatchyverseAPI.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };


            var localVarContentType = HatchyverseAPI.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = HatchyverseAPI.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("tokenId", HatchyverseAPI.Client.ClientUtils.ParameterToString(tokenId)); // path parameter
            if (extension != null)
            {
                localVarRequestOptions.QueryParameters.Add(HatchyverseAPI.Client.ClientUtils.ParameterToMultiMap("", "extension", extension));
            }
            if (chainId != null)
            {
                localVarRequestOptions.QueryParameters.Add(HatchyverseAPI.Client.ClientUtils.ParameterToMultiMap("", "chainId", chainId));
            }
            if (authorization != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", HatchyverseAPI.Client.ClientUtils.ParameterToString(authorization)); // header parameter
            }


            // make the HTTP request

            var task = this.AsynchronousClient.GetAsync<GetMastersPFPImageUploadURL200Response>("/masters/avatars/image-upload-url/{tokenId}", localVarRequestOptions, this.Configuration, cancellationToken);

#if UNITY_EDITOR || !UNITY_WEBGL
            var localVarResponse = await task.ConfigureAwait(false);
#else
            var localVarResponse = await task;
#endif

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetMastersPFPImageUploadURL", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="HatchyverseAPI.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="getMastersPFPSignatureRequest"></param>
        /// <param name="chainId"> (optional)</param>
        /// <returns>Object</returns>
        public Object GetMastersPFPSignature(GetMastersPFPSignatureRequest getMastersPFPSignatureRequest, double? chainId = default(double?))
        {
            HatchyverseAPI.Client.ApiResponse<Object> localVarResponse = GetMastersPFPSignatureWithHttpInfo(getMastersPFPSignatureRequest, chainId);
            return localVarResponse.Data;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="HatchyverseAPI.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="getMastersPFPSignatureRequest"></param>
        /// <param name="chainId"> (optional)</param>
        /// <returns>ApiResponse of Object</returns>
        public HatchyverseAPI.Client.ApiResponse<Object> GetMastersPFPSignatureWithHttpInfo(GetMastersPFPSignatureRequest getMastersPFPSignatureRequest, double? chainId = default(double?))
        {
            // verify the required parameter 'getMastersPFPSignatureRequest' is set
            if (getMastersPFPSignatureRequest == null)
                throw new HatchyverseAPI.Client.ApiException(400, "Missing required parameter 'getMastersPFPSignatureRequest' when calling MastersApi->GetMastersPFPSignature");

            HatchyverseAPI.Client.RequestOptions localVarRequestOptions = new HatchyverseAPI.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = HatchyverseAPI.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = HatchyverseAPI.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            if (chainId != null)
            {
                localVarRequestOptions.QueryParameters.Add(HatchyverseAPI.Client.ClientUtils.ParameterToMultiMap("", "chainId", chainId));
            }
            localVarRequestOptions.Data = getMastersPFPSignatureRequest;


            // make the HTTP request
            var localVarResponse = this.Client.Post<Object>("/masters/avatars", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetMastersPFPSignature", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="HatchyverseAPI.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="getMastersPFPSignatureRequest"></param>
        /// <param name="chainId"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of Object</returns>
        public async System.Threading.Tasks.Task<Object> GetMastersPFPSignatureAsync(GetMastersPFPSignatureRequest getMastersPFPSignatureRequest, double? chainId = default(double?), System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
        {
            var task = GetMastersPFPSignatureWithHttpInfoAsync(getMastersPFPSignatureRequest, chainId, cancellationToken);
#if UNITY_EDITOR || !UNITY_WEBGL
            HatchyverseAPI.Client.ApiResponse<Object> localVarResponse = await task.ConfigureAwait(false);
#else
            HatchyverseAPI.Client.ApiResponse<Object> localVarResponse = await task;
#endif
            return localVarResponse.Data;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="HatchyverseAPI.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="getMastersPFPSignatureRequest"></param>
        /// <param name="chainId"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (Object)</returns>
        public async System.Threading.Tasks.Task<HatchyverseAPI.Client.ApiResponse<Object>> GetMastersPFPSignatureWithHttpInfoAsync(GetMastersPFPSignatureRequest getMastersPFPSignatureRequest, double? chainId = default(double?), System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
        {
            // verify the required parameter 'getMastersPFPSignatureRequest' is set
            if (getMastersPFPSignatureRequest == null)
                throw new HatchyverseAPI.Client.ApiException(400, "Missing required parameter 'getMastersPFPSignatureRequest' when calling MastersApi->GetMastersPFPSignature");


            HatchyverseAPI.Client.RequestOptions localVarRequestOptions = new HatchyverseAPI.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };


            var localVarContentType = HatchyverseAPI.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = HatchyverseAPI.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            if (chainId != null)
            {
                localVarRequestOptions.QueryParameters.Add(HatchyverseAPI.Client.ClientUtils.ParameterToMultiMap("", "chainId", chainId));
            }
            localVarRequestOptions.Data = getMastersPFPSignatureRequest;


            // make the HTTP request

            var task = this.AsynchronousClient.PostAsync<Object>("/masters/avatars", localVarRequestOptions, this.Configuration, cancellationToken);

#if UNITY_EDITOR || !UNITY_WEBGL
            var localVarResponse = await task.ConfigureAwait(false);
#else
            var localVarResponse = await task;
#endif

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetMastersPFPSignature", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="HatchyverseAPI.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="chainId"> (optional)</param>
        /// <returns>List&lt;MastersTraitType&gt;</returns>
        public List<MastersTraitType> GetMastersTraitTypes(double? chainId = default(double?))
        {
            HatchyverseAPI.Client.ApiResponse<List<MastersTraitType>> localVarResponse = GetMastersTraitTypesWithHttpInfo(chainId);
            return localVarResponse.Data;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="HatchyverseAPI.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="chainId"> (optional)</param>
        /// <returns>ApiResponse of List&lt;MastersTraitType&gt;</returns>
        public HatchyverseAPI.Client.ApiResponse<List<MastersTraitType>> GetMastersTraitTypesWithHttpInfo(double? chainId = default(double?))
        {
            HatchyverseAPI.Client.RequestOptions localVarRequestOptions = new HatchyverseAPI.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = HatchyverseAPI.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = HatchyverseAPI.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            if (chainId != null)
            {
                localVarRequestOptions.QueryParameters.Add(HatchyverseAPI.Client.ClientUtils.ParameterToMultiMap("", "chainId", chainId));
            }


            // make the HTTP request
            var localVarResponse = this.Client.Get<List<MastersTraitType>>("/masters/traits/types", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetMastersTraitTypes", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="HatchyverseAPI.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="chainId"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of List&lt;MastersTraitType&gt;</returns>
        public async System.Threading.Tasks.Task<List<MastersTraitType>> GetMastersTraitTypesAsync(double? chainId = default(double?), System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
        {
            var task = GetMastersTraitTypesWithHttpInfoAsync(chainId, cancellationToken);
#if UNITY_EDITOR || !UNITY_WEBGL
            HatchyverseAPI.Client.ApiResponse<List<MastersTraitType>> localVarResponse = await task.ConfigureAwait(false);
#else
            HatchyverseAPI.Client.ApiResponse<List<MastersTraitType>> localVarResponse = await task;
#endif
            return localVarResponse.Data;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="HatchyverseAPI.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="chainId"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (List&lt;MastersTraitType&gt;)</returns>
        public async System.Threading.Tasks.Task<HatchyverseAPI.Client.ApiResponse<List<MastersTraitType>>> GetMastersTraitTypesWithHttpInfoAsync(double? chainId = default(double?), System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
        {

            HatchyverseAPI.Client.RequestOptions localVarRequestOptions = new HatchyverseAPI.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };


            var localVarContentType = HatchyverseAPI.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = HatchyverseAPI.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            if (chainId != null)
            {
                localVarRequestOptions.QueryParameters.Add(HatchyverseAPI.Client.ClientUtils.ParameterToMultiMap("", "chainId", chainId));
            }


            // make the HTTP request

            var task = this.AsynchronousClient.GetAsync<List<MastersTraitType>>("/masters/traits/types", localVarRequestOptions, this.Configuration, cancellationToken);

#if UNITY_EDITOR || !UNITY_WEBGL
            var localVarResponse = await task.ConfigureAwait(false);
#else
            var localVarResponse = await task;
#endif

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetMastersTraitTypes", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="HatchyverseAPI.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="chainId"> (optional)</param>
        /// <returns>List&lt;MastersTrait&gt;</returns>
        public List<MastersTrait> GetMastersTraits(double? chainId = default(double?))
        {
            HatchyverseAPI.Client.ApiResponse<List<MastersTrait>> localVarResponse = GetMastersTraitsWithHttpInfo(chainId);
            return localVarResponse.Data;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="HatchyverseAPI.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="chainId"> (optional)</param>
        /// <returns>ApiResponse of List&lt;MastersTrait&gt;</returns>
        public HatchyverseAPI.Client.ApiResponse<List<MastersTrait>> GetMastersTraitsWithHttpInfo(double? chainId = default(double?))
        {
            HatchyverseAPI.Client.RequestOptions localVarRequestOptions = new HatchyverseAPI.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = HatchyverseAPI.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = HatchyverseAPI.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            if (chainId != null)
            {
                localVarRequestOptions.QueryParameters.Add(HatchyverseAPI.Client.ClientUtils.ParameterToMultiMap("", "chainId", chainId));
            }


            // make the HTTP request
            var localVarResponse = this.Client.Get<List<MastersTrait>>("/masters/traits", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetMastersTraits", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="HatchyverseAPI.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="chainId"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of List&lt;MastersTrait&gt;</returns>
        public async System.Threading.Tasks.Task<List<MastersTrait>> GetMastersTraitsAsync(double? chainId = default(double?), System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
        {
            var task = GetMastersTraitsWithHttpInfoAsync(chainId, cancellationToken);
#if UNITY_EDITOR || !UNITY_WEBGL
            HatchyverseAPI.Client.ApiResponse<List<MastersTrait>> localVarResponse = await task.ConfigureAwait(false);
#else
            HatchyverseAPI.Client.ApiResponse<List<MastersTrait>> localVarResponse = await task;
#endif
            return localVarResponse.Data;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="HatchyverseAPI.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="chainId"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (List&lt;MastersTrait&gt;)</returns>
        public async System.Threading.Tasks.Task<HatchyverseAPI.Client.ApiResponse<List<MastersTrait>>> GetMastersTraitsWithHttpInfoAsync(double? chainId = default(double?), System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
        {

            HatchyverseAPI.Client.RequestOptions localVarRequestOptions = new HatchyverseAPI.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };


            var localVarContentType = HatchyverseAPI.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = HatchyverseAPI.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            if (chainId != null)
            {
                localVarRequestOptions.QueryParameters.Add(HatchyverseAPI.Client.ClientUtils.ParameterToMultiMap("", "chainId", chainId));
            }


            // make the HTTP request

            var task = this.AsynchronousClient.GetAsync<List<MastersTrait>>("/masters/traits", localVarRequestOptions, this.Configuration, cancellationToken);

#if UNITY_EDITOR || !UNITY_WEBGL
            var localVarResponse = await task.ConfigureAwait(false);
#else
            var localVarResponse = await task;
#endif

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetMastersTraits", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="HatchyverseAPI.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="chainId"> (optional)</param>
        /// <returns>List&lt;MastersMintTrait&gt;</returns>
        public List<MastersMintTrait> GetMintTraits(double? chainId = default(double?))
        {
            HatchyverseAPI.Client.ApiResponse<List<MastersMintTrait>> localVarResponse = GetMintTraitsWithHttpInfo(chainId);
            return localVarResponse.Data;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="HatchyverseAPI.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="chainId"> (optional)</param>
        /// <returns>ApiResponse of List&lt;MastersMintTrait&gt;</returns>
        public HatchyverseAPI.Client.ApiResponse<List<MastersMintTrait>> GetMintTraitsWithHttpInfo(double? chainId = default(double?))
        {
            HatchyverseAPI.Client.RequestOptions localVarRequestOptions = new HatchyverseAPI.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = HatchyverseAPI.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = HatchyverseAPI.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            if (chainId != null)
            {
                localVarRequestOptions.QueryParameters.Add(HatchyverseAPI.Client.ClientUtils.ParameterToMultiMap("", "chainId", chainId));
            }


            // make the HTTP request
            var localVarResponse = this.Client.Post<List<MastersMintTrait>>("/masters/mint/traits", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetMintTraits", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="HatchyverseAPI.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="chainId"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of List&lt;MastersMintTrait&gt;</returns>
        public async System.Threading.Tasks.Task<List<MastersMintTrait>> GetMintTraitsAsync(double? chainId = default(double?), System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
        {
            var task = GetMintTraitsWithHttpInfoAsync(chainId, cancellationToken);
#if UNITY_EDITOR || !UNITY_WEBGL
            HatchyverseAPI.Client.ApiResponse<List<MastersMintTrait>> localVarResponse = await task.ConfigureAwait(false);
#else
            HatchyverseAPI.Client.ApiResponse<List<MastersMintTrait>> localVarResponse = await task;
#endif
            return localVarResponse.Data;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="HatchyverseAPI.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="chainId"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (List&lt;MastersMintTrait&gt;)</returns>
        public async System.Threading.Tasks.Task<HatchyverseAPI.Client.ApiResponse<List<MastersMintTrait>>> GetMintTraitsWithHttpInfoAsync(double? chainId = default(double?), System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
        {

            HatchyverseAPI.Client.RequestOptions localVarRequestOptions = new HatchyverseAPI.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };


            var localVarContentType = HatchyverseAPI.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = HatchyverseAPI.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            if (chainId != null)
            {
                localVarRequestOptions.QueryParameters.Add(HatchyverseAPI.Client.ClientUtils.ParameterToMultiMap("", "chainId", chainId));
            }


            // make the HTTP request

            var task = this.AsynchronousClient.PostAsync<List<MastersMintTrait>>("/masters/mint/traits", localVarRequestOptions, this.Configuration, cancellationToken);

#if UNITY_EDITOR || !UNITY_WEBGL
            var localVarResponse = await task.ConfigureAwait(false);
#else
            var localVarResponse = await task;
#endif

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetMintTraits", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="HatchyverseAPI.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="mintMastersItemRequest"></param>
        /// <param name="chainId"> (optional)</param>
        /// <returns>MintMastersItem200Response</returns>
        public MintMastersItem200Response MintMastersItem(MintMastersItemRequest mintMastersItemRequest, double? chainId = default(double?))
        {
            HatchyverseAPI.Client.ApiResponse<MintMastersItem200Response> localVarResponse = MintMastersItemWithHttpInfo(mintMastersItemRequest, chainId);
            return localVarResponse.Data;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="HatchyverseAPI.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="mintMastersItemRequest"></param>
        /// <param name="chainId"> (optional)</param>
        /// <returns>ApiResponse of MintMastersItem200Response</returns>
        public HatchyverseAPI.Client.ApiResponse<MintMastersItem200Response> MintMastersItemWithHttpInfo(MintMastersItemRequest mintMastersItemRequest, double? chainId = default(double?))
        {
            // verify the required parameter 'mintMastersItemRequest' is set
            if (mintMastersItemRequest == null)
                throw new HatchyverseAPI.Client.ApiException(400, "Missing required parameter 'mintMastersItemRequest' when calling MastersApi->MintMastersItem");

            HatchyverseAPI.Client.RequestOptions localVarRequestOptions = new HatchyverseAPI.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = HatchyverseAPI.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = HatchyverseAPI.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            if (chainId != null)
            {
                localVarRequestOptions.QueryParameters.Add(HatchyverseAPI.Client.ClientUtils.ParameterToMultiMap("", "chainId", chainId));
            }
            localVarRequestOptions.Data = mintMastersItemRequest;


            // make the HTTP request
            var localVarResponse = this.Client.Post<MintMastersItem200Response>("/masters/items/mint", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("MintMastersItem", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="HatchyverseAPI.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="mintMastersItemRequest"></param>
        /// <param name="chainId"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of MintMastersItem200Response</returns>
        public async System.Threading.Tasks.Task<MintMastersItem200Response> MintMastersItemAsync(MintMastersItemRequest mintMastersItemRequest, double? chainId = default(double?), System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
        {
            var task = MintMastersItemWithHttpInfoAsync(mintMastersItemRequest, chainId, cancellationToken);
#if UNITY_EDITOR || !UNITY_WEBGL
            HatchyverseAPI.Client.ApiResponse<MintMastersItem200Response> localVarResponse = await task.ConfigureAwait(false);
#else
            HatchyverseAPI.Client.ApiResponse<MintMastersItem200Response> localVarResponse = await task;
#endif
            return localVarResponse.Data;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="HatchyverseAPI.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="mintMastersItemRequest"></param>
        /// <param name="chainId"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (MintMastersItem200Response)</returns>
        public async System.Threading.Tasks.Task<HatchyverseAPI.Client.ApiResponse<MintMastersItem200Response>> MintMastersItemWithHttpInfoAsync(MintMastersItemRequest mintMastersItemRequest, double? chainId = default(double?), System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
        {
            // verify the required parameter 'mintMastersItemRequest' is set
            if (mintMastersItemRequest == null)
                throw new HatchyverseAPI.Client.ApiException(400, "Missing required parameter 'mintMastersItemRequest' when calling MastersApi->MintMastersItem");


            HatchyverseAPI.Client.RequestOptions localVarRequestOptions = new HatchyverseAPI.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };


            var localVarContentType = HatchyverseAPI.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = HatchyverseAPI.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            if (chainId != null)
            {
                localVarRequestOptions.QueryParameters.Add(HatchyverseAPI.Client.ClientUtils.ParameterToMultiMap("", "chainId", chainId));
            }
            localVarRequestOptions.Data = mintMastersItemRequest;


            // make the HTTP request

            var task = this.AsynchronousClient.PostAsync<MintMastersItem200Response>("/masters/items/mint", localVarRequestOptions, this.Configuration, cancellationToken);

#if UNITY_EDITOR || !UNITY_WEBGL
            var localVarResponse = await task.ConfigureAwait(false);
#else
            var localVarResponse = await task;
#endif

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("MintMastersItem", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="HatchyverseAPI.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="tokenId"></param>
        /// <param name="chainId"> (optional)</param>
        /// <param name="extension"> (optional)</param>
        /// <returns>MintMastersItem200Response</returns>
        public MintMastersItem200Response UpdateImage(double tokenId, double? chainId = default(double?), double? extension = default(double?))
        {
            HatchyverseAPI.Client.ApiResponse<MintMastersItem200Response> localVarResponse = UpdateImageWithHttpInfo(tokenId, chainId, extension);
            return localVarResponse.Data;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="HatchyverseAPI.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="tokenId"></param>
        /// <param name="chainId"> (optional)</param>
        /// <param name="extension"> (optional)</param>
        /// <returns>ApiResponse of MintMastersItem200Response</returns>
        public HatchyverseAPI.Client.ApiResponse<MintMastersItem200Response> UpdateImageWithHttpInfo(double tokenId, double? chainId = default(double?), double? extension = default(double?))
        {
            HatchyverseAPI.Client.RequestOptions localVarRequestOptions = new HatchyverseAPI.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = HatchyverseAPI.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = HatchyverseAPI.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("tokenId", HatchyverseAPI.Client.ClientUtils.ParameterToString(tokenId)); // path parameter
            if (chainId != null)
            {
                localVarRequestOptions.QueryParameters.Add(HatchyverseAPI.Client.ClientUtils.ParameterToMultiMap("", "chainId", chainId));
            }
            if (extension != null)
            {
                localVarRequestOptions.QueryParameters.Add(HatchyverseAPI.Client.ClientUtils.ParameterToMultiMap("", "extension", extension));
            }


            // make the HTTP request
            var localVarResponse = this.Client.Post<MintMastersItem200Response>("/masters/avatars/image/{tokenId}", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("UpdateImage", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="HatchyverseAPI.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="tokenId"></param>
        /// <param name="chainId"> (optional)</param>
        /// <param name="extension"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of MintMastersItem200Response</returns>
        public async System.Threading.Tasks.Task<MintMastersItem200Response> UpdateImageAsync(double tokenId, double? chainId = default(double?), double? extension = default(double?), System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
        {
            var task = UpdateImageWithHttpInfoAsync(tokenId, chainId, extension, cancellationToken);
#if UNITY_EDITOR || !UNITY_WEBGL
            HatchyverseAPI.Client.ApiResponse<MintMastersItem200Response> localVarResponse = await task.ConfigureAwait(false);
#else
            HatchyverseAPI.Client.ApiResponse<MintMastersItem200Response> localVarResponse = await task;
#endif
            return localVarResponse.Data;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="HatchyverseAPI.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="tokenId"></param>
        /// <param name="chainId"> (optional)</param>
        /// <param name="extension"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (MintMastersItem200Response)</returns>
        public async System.Threading.Tasks.Task<HatchyverseAPI.Client.ApiResponse<MintMastersItem200Response>> UpdateImageWithHttpInfoAsync(double tokenId, double? chainId = default(double?), double? extension = default(double?), System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
        {

            HatchyverseAPI.Client.RequestOptions localVarRequestOptions = new HatchyverseAPI.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };


            var localVarContentType = HatchyverseAPI.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = HatchyverseAPI.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("tokenId", HatchyverseAPI.Client.ClientUtils.ParameterToString(tokenId)); // path parameter
            if (chainId != null)
            {
                localVarRequestOptions.QueryParameters.Add(HatchyverseAPI.Client.ClientUtils.ParameterToMultiMap("", "chainId", chainId));
            }
            if (extension != null)
            {
                localVarRequestOptions.QueryParameters.Add(HatchyverseAPI.Client.ClientUtils.ParameterToMultiMap("", "extension", extension));
            }


            // make the HTTP request

            var task = this.AsynchronousClient.PostAsync<MintMastersItem200Response>("/masters/avatars/image/{tokenId}", localVarRequestOptions, this.Configuration, cancellationToken);

#if UNITY_EDITOR || !UNITY_WEBGL
            var localVarResponse = await task.ConfigureAwait(false);
#else
            var localVarResponse = await task;
#endif

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("UpdateImage", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

    }
}
