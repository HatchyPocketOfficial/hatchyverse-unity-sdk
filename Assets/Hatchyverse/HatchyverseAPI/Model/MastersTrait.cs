/*
 * masters-api
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.0.0
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using OpenAPIDateConverter = HatchyverseAPI.Client.OpenAPIDateConverter;

namespace HatchyverseAPI.Model
{
    /// <summary>
    /// MastersTrait
    /// </summary>
    [DataContract(Name = "MastersTrait")]
    public partial class MastersTrait
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="MastersTrait" /> class.
        /// </summary>
        [JsonConstructorAttribute]
        protected MastersTrait() { }
        /// <summary>
        /// Initializes a new instance of the <see cref="MastersTrait" /> class.
        /// </summary>
        /// <param name="id">id (required).</param>
        /// <param name="createdAt">createdAt (default to &quot;2024-12-12T00:24:34.694Z&quot;).</param>
        /// <param name="updatedAt">updatedAt (default to &quot;2024-12-12T00:24:34.695Z&quot;).</param>
        /// <param name="name">name (required).</param>
        /// <param name="image">image (required).</param>
        /// <param name="frontImage">frontImage.</param>
        /// <param name="backImage">backImage.</param>
        /// <param name="type">type (required).</param>
        /// <param name="gender">gender (required).</param>
        /// <param name="color">color (required).</param>
        /// <param name="hide">hide (required).</param>
        public MastersTrait(double id = default(double), DateTime createdAt = default(DateTime), DateTime updatedAt = default(DateTime), string name = default(string), string image = default(string), string frontImage = default(string), string backImage = default(string), MastersTraitType type = default(MastersTraitType), TraitGender gender = default(TraitGender), MastersColor color = default(MastersColor), bool hide = default(bool))
        {
            this.Id = id;
            // to ensure "name" is required (not null)
            if (name == null)
            {
                throw new ArgumentNullException("name is a required property for MastersTrait and cannot be null");
            }
            this.Name = name;
            // to ensure "image" is required (not null)
            if (image == null)
            {
                throw new ArgumentNullException("image is a required property for MastersTrait and cannot be null");
            }
            this.Image = image;
            // to ensure "type" is required (not null)
            if (type == null)
            {
                throw new ArgumentNullException("type is a required property for MastersTrait and cannot be null");
            }
            this.Type = type;
            // to ensure "gender" is required (not null)
            if (gender == null)
            {
                throw new ArgumentNullException("gender is a required property for MastersTrait and cannot be null");
            }
            this.Gender = gender;
            // to ensure "color" is required (not null)
            if (color == null)
            {
                throw new ArgumentNullException("color is a required property for MastersTrait and cannot be null");
            }
            this.Color = color;
            this.Hide = hide;
            this.CreatedAt = createdAt;
            this.UpdatedAt = updatedAt;
            this.FrontImage = frontImage;
            this.BackImage = backImage;
        }

        /// <summary>
        /// Gets or Sets Id
        /// </summary>
        [DataMember(Name = "id", IsRequired = true, EmitDefaultValue = true)]
        public double Id { get; set; }

        /// <summary>
        /// Gets or Sets CreatedAt
        /// </summary>
        [DataMember(Name = "createdAt", EmitDefaultValue = false)]
        public DateTime CreatedAt { get; set; }

        /// <summary>
        /// Gets or Sets UpdatedAt
        /// </summary>
        [DataMember(Name = "updatedAt", EmitDefaultValue = false)]
        public DateTime UpdatedAt { get; set; }

        /// <summary>
        /// Gets or Sets Name
        /// </summary>
        [DataMember(Name = "name", IsRequired = true, EmitDefaultValue = true)]
        public string Name { get; set; }

        /// <summary>
        /// Gets or Sets Image
        /// </summary>
        [DataMember(Name = "image", IsRequired = true, EmitDefaultValue = true)]
        public string Image { get; set; }

        /// <summary>
        /// Gets or Sets FrontImage
        /// </summary>
        [DataMember(Name = "frontImage", EmitDefaultValue = false)]
        public string FrontImage { get; set; }

        /// <summary>
        /// Gets or Sets BackImage
        /// </summary>
        [DataMember(Name = "backImage", EmitDefaultValue = false)]
        public string BackImage { get; set; }

        /// <summary>
        /// Gets or Sets Type
        /// </summary>
        [DataMember(Name = "type", IsRequired = true, EmitDefaultValue = true)]
        public MastersTraitType Type { get; set; }

        /// <summary>
        /// Gets or Sets Gender
        /// </summary>
        [DataMember(Name = "gender", IsRequired = true, EmitDefaultValue = true)]
        public TraitGender Gender { get; set; }

        /// <summary>
        /// Gets or Sets Color
        /// </summary>
        [DataMember(Name = "color", IsRequired = true, EmitDefaultValue = true)]
        public MastersColor Color { get; set; }

        /// <summary>
        /// Gets or Sets Hide
        /// </summary>
        [DataMember(Name = "hide", IsRequired = true, EmitDefaultValue = true)]
        public bool Hide { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class MastersTrait {\n");
            sb.Append("  Id: ").Append(Id).Append("\n");
            sb.Append("  CreatedAt: ").Append(CreatedAt).Append("\n");
            sb.Append("  UpdatedAt: ").Append(UpdatedAt).Append("\n");
            sb.Append("  Name: ").Append(Name).Append("\n");
            sb.Append("  Image: ").Append(Image).Append("\n");
            sb.Append("  FrontImage: ").Append(FrontImage).Append("\n");
            sb.Append("  BackImage: ").Append(BackImage).Append("\n");
            sb.Append("  Type: ").Append(Type).Append("\n");
            sb.Append("  Gender: ").Append(Gender).Append("\n");
            sb.Append("  Color: ").Append(Color).Append("\n");
            sb.Append("  Hide: ").Append(Hide).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

    }

}
