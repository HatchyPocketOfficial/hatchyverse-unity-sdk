/*
 * hatchyverse-api
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.0.0
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using OpenAPIDateConverter = HatchyverseAPI.Client.OpenAPIDateConverter;

namespace HatchyverseAPI.Model
{
    /// <summary>
    /// LootboxPrice
    /// </summary>
    [DataContract(Name = "LootboxPrice")]
    public partial class LootboxPrice
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="LootboxPrice" /> class.
        /// </summary>
        [JsonConstructorAttribute]
        protected LootboxPrice() { }
        /// <summary>
        /// Initializes a new instance of the <see cref="LootboxPrice" /> class.
        /// </summary>
        /// <param name="lootbox">lootbox.</param>
        /// <param name="currency">currency (required).</param>
        /// <param name="price">price (required).</param>
        /// <param name="decimals">decimals (required).</param>
        /// <param name="address">address (required).</param>
        /// <param name="image">image (required).</param>
        public LootboxPrice(MastersLootbox lootbox = default(MastersLootbox), string currency = default(string), string price = default(string), double decimals = default(double), string address = default(string), string image = default(string))
        {
            // to ensure "currency" is required (not null)
            if (currency == null)
            {
                throw new ArgumentNullException("currency is a required property for LootboxPrice and cannot be null");
            }
            this.Currency = currency;
            // to ensure "price" is required (not null)
            if (price == null)
            {
                throw new ArgumentNullException("price is a required property for LootboxPrice and cannot be null");
            }
            this.Price = price;
            this.Decimals = decimals;
            // to ensure "address" is required (not null)
            if (address == null)
            {
                throw new ArgumentNullException("address is a required property for LootboxPrice and cannot be null");
            }
            this.Address = address;
            // to ensure "image" is required (not null)
            if (image == null)
            {
                throw new ArgumentNullException("image is a required property for LootboxPrice and cannot be null");
            }
            this.Image = image;
            this.Lootbox = lootbox;
        }

        /// <summary>
        /// Gets or Sets Lootbox
        /// </summary>
        [DataMember(Name = "lootbox", EmitDefaultValue = false)]
        public MastersLootbox Lootbox { get; set; }

        /// <summary>
        /// Gets or Sets Currency
        /// </summary>
        [DataMember(Name = "currency", IsRequired = true, EmitDefaultValue = true)]
        public string Currency { get; set; }

        /// <summary>
        /// Gets or Sets Price
        /// </summary>
        [DataMember(Name = "price", IsRequired = true, EmitDefaultValue = true)]
        public string Price { get; set; }

        /// <summary>
        /// Gets or Sets Decimals
        /// </summary>
        [DataMember(Name = "decimals", IsRequired = true, EmitDefaultValue = true)]
        public double Decimals { get; set; }

        /// <summary>
        /// Gets or Sets Address
        /// </summary>
        [DataMember(Name = "address", IsRequired = true, EmitDefaultValue = true)]
        public string Address { get; set; }

        /// <summary>
        /// Gets or Sets Image
        /// </summary>
        [DataMember(Name = "image", IsRequired = true, EmitDefaultValue = true)]
        public string Image { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class LootboxPrice {\n");
            sb.Append("  Lootbox: ").Append(Lootbox).Append("\n");
            sb.Append("  Currency: ").Append(Currency).Append("\n");
            sb.Append("  Price: ").Append(Price).Append("\n");
            sb.Append("  Decimals: ").Append(Decimals).Append("\n");
            sb.Append("  Address: ").Append(Address).Append("\n");
            sb.Append("  Image: ").Append(Image).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

    }

}
