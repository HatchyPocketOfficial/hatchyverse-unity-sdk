/*
 * hatchyverse-api
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.0.0
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using OpenAPIDateConverter = HatchyverseAPI.Client.OpenAPIDateConverter;

namespace HatchyverseAPI.Model
{
    /// <summary>
    /// MastersLootboxSignature
    /// </summary>
    [DataContract(Name = "MastersLootboxSignature")]
    public partial class MastersLootboxSignature
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="MastersLootboxSignature" /> class.
        /// </summary>
        [JsonConstructorAttribute]
        protected MastersLootboxSignature() { }
        /// <summary>
        /// Initializes a new instance of the <see cref="MastersLootboxSignature" /> class.
        /// </summary>
        /// <param name="receiver">receiver (required).</param>
        /// <param name="tokenIds">tokenIds (required).</param>
        /// <param name="amounts">amounts (required).</param>
        /// <param name="items">items (required).</param>
        /// <param name="nonce">nonce (required).</param>
        /// <param name="claimableUntil">claimableUntil (required).</param>
        /// <param name="currency">currency (required).</param>
        /// <param name="price">price (required).</param>
        /// <param name="decimals">decimals (required).</param>
        /// <param name="payWithTicket">payWithTicket (required).</param>
        /// <param name="ticketId">ticketId (required).</param>
        /// <param name="signature">signature (required).</param>
        public MastersLootboxSignature(string receiver = default(string), List<double> tokenIds = default(List<double>), List<double> amounts = default(List<double>), List<MastersItem> items = default(List<MastersItem>), MastersLootboxJoepegsSignatureNonce nonce = default(MastersLootboxJoepegsSignatureNonce), double claimableUntil = default(double), string currency = default(string), string price = default(string), double decimals = default(double), bool payWithTicket = default(bool), double ticketId = default(double), string signature = default(string))
        {
            // to ensure "receiver" is required (not null)
            if (receiver == null)
            {
                throw new ArgumentNullException("receiver is a required property for MastersLootboxSignature and cannot be null");
            }
            this.Receiver = receiver;
            // to ensure "tokenIds" is required (not null)
            if (tokenIds == null)
            {
                throw new ArgumentNullException("tokenIds is a required property for MastersLootboxSignature and cannot be null");
            }
            this.TokenIds = tokenIds;
            // to ensure "amounts" is required (not null)
            if (amounts == null)
            {
                throw new ArgumentNullException("amounts is a required property for MastersLootboxSignature and cannot be null");
            }
            this.Amounts = amounts;
            // to ensure "items" is required (not null)
            if (items == null)
            {
                throw new ArgumentNullException("items is a required property for MastersLootboxSignature and cannot be null");
            }
            this.Items = items;
            // to ensure "nonce" is required (not null)
            if (nonce == null)
            {
                throw new ArgumentNullException("nonce is a required property for MastersLootboxSignature and cannot be null");
            }
            this.Nonce = nonce;
            this.ClaimableUntil = claimableUntil;
            // to ensure "currency" is required (not null)
            if (currency == null)
            {
                throw new ArgumentNullException("currency is a required property for MastersLootboxSignature and cannot be null");
            }
            this.Currency = currency;
            // to ensure "price" is required (not null)
            if (price == null)
            {
                throw new ArgumentNullException("price is a required property for MastersLootboxSignature and cannot be null");
            }
            this.Price = price;
            this.Decimals = decimals;
            this.PayWithTicket = payWithTicket;
            this.TicketId = ticketId;
            // to ensure "signature" is required (not null)
            if (signature == null)
            {
                throw new ArgumentNullException("signature is a required property for MastersLootboxSignature and cannot be null");
            }
            this.Signature = signature;
        }

        /// <summary>
        /// Gets or Sets Receiver
        /// </summary>
        [DataMember(Name = "receiver", IsRequired = true, EmitDefaultValue = true)]
        public string Receiver { get; set; }

        /// <summary>
        /// Gets or Sets TokenIds
        /// </summary>
        [DataMember(Name = "tokenIds", IsRequired = true, EmitDefaultValue = true)]
        public List<double> TokenIds { get; set; }

        /// <summary>
        /// Gets or Sets Amounts
        /// </summary>
        [DataMember(Name = "amounts", IsRequired = true, EmitDefaultValue = true)]
        public List<double> Amounts { get; set; }

        /// <summary>
        /// Gets or Sets Items
        /// </summary>
        [DataMember(Name = "items", IsRequired = true, EmitDefaultValue = true)]
        public List<MastersItem> Items { get; set; }

        /// <summary>
        /// Gets or Sets Nonce
        /// </summary>
        [DataMember(Name = "nonce", IsRequired = true, EmitDefaultValue = true)]
        public MastersLootboxJoepegsSignatureNonce Nonce { get; set; }

        /// <summary>
        /// Gets or Sets ClaimableUntil
        /// </summary>
        [DataMember(Name = "claimableUntil", IsRequired = true, EmitDefaultValue = true)]
        public double ClaimableUntil { get; set; }

        /// <summary>
        /// Gets or Sets Currency
        /// </summary>
        [DataMember(Name = "currency", IsRequired = true, EmitDefaultValue = true)]
        public string Currency { get; set; }

        /// <summary>
        /// Gets or Sets Price
        /// </summary>
        [DataMember(Name = "price", IsRequired = true, EmitDefaultValue = true)]
        public string Price { get; set; }

        /// <summary>
        /// Gets or Sets Decimals
        /// </summary>
        [DataMember(Name = "decimals", IsRequired = true, EmitDefaultValue = true)]
        public double Decimals { get; set; }

        /// <summary>
        /// Gets or Sets PayWithTicket
        /// </summary>
        [DataMember(Name = "payWithTicket", IsRequired = true, EmitDefaultValue = true)]
        public bool PayWithTicket { get; set; }

        /// <summary>
        /// Gets or Sets TicketId
        /// </summary>
        [DataMember(Name = "ticketId", IsRequired = true, EmitDefaultValue = true)]
        public double TicketId { get; set; }

        /// <summary>
        /// Gets or Sets Signature
        /// </summary>
        [DataMember(Name = "signature", IsRequired = true, EmitDefaultValue = true)]
        public string Signature { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class MastersLootboxSignature {\n");
            sb.Append("  Receiver: ").Append(Receiver).Append("\n");
            sb.Append("  TokenIds: ").Append(TokenIds).Append("\n");
            sb.Append("  Amounts: ").Append(Amounts).Append("\n");
            sb.Append("  Items: ").Append(Items).Append("\n");
            sb.Append("  Nonce: ").Append(Nonce).Append("\n");
            sb.Append("  ClaimableUntil: ").Append(ClaimableUntil).Append("\n");
            sb.Append("  Currency: ").Append(Currency).Append("\n");
            sb.Append("  Price: ").Append(Price).Append("\n");
            sb.Append("  Decimals: ").Append(Decimals).Append("\n");
            sb.Append("  PayWithTicket: ").Append(PayWithTicket).Append("\n");
            sb.Append("  TicketId: ").Append(TicketId).Append("\n");
            sb.Append("  Signature: ").Append(Signature).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

    }

}
