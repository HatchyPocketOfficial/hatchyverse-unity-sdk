/*
 * masters-api
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.0.0
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using OpenAPIDateConverter = HatchyverseAPI.Client.OpenAPIDateConverter;

namespace HatchyverseAPI.Model
{
    /// <summary>
    /// A Timestamp represents a point in time independent of any time zone or calendar, represented as seconds and fractions of seconds at nanosecond resolution in UTC Epoch time. It is encoded using the Proleptic Gregorian Calendar which extends the Gregorian calendar backwards to year one. It is encoded assuming all minutes are 60 seconds long, i.e. leap seconds are \&quot;smeared\&quot; so that no leap second table is needed for interpretation. Range is from 0001-01-01T00:00:00Z to 9999-12-31T23:59:59.999999999Z.
    /// </summary>
    [DataContract(Name = "FirebaseFirestore.Timestamp")]
    public partial class FirebaseFirestoreTimestamp
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="FirebaseFirestoreTimestamp" /> class.
        /// </summary>
        [JsonConstructorAttribute]
        protected FirebaseFirestoreTimestamp() { }
        /// <summary>
        /// Initializes a new instance of the <see cref="FirebaseFirestoreTimestamp" /> class.
        /// </summary>
        /// <param name="seconds">The number of seconds of UTC time since Unix epoch 1970-01-01T00:00:00Z. (required).</param>
        /// <param name="nanoseconds">The non-negative fractions of a second at nanosecond resolution. (required).</param>
        public FirebaseFirestoreTimestamp(double seconds = default(double), double nanoseconds = default(double))
        {
            this.Seconds = seconds;
            this.Nanoseconds = nanoseconds;
        }

        /// <summary>
        /// The number of seconds of UTC time since Unix epoch 1970-01-01T00:00:00Z.
        /// </summary>
        /// <value>The number of seconds of UTC time since Unix epoch 1970-01-01T00:00:00Z.</value>
        [DataMember(Name = "seconds", IsRequired = true, EmitDefaultValue = true)]
        public double Seconds { get; set; }

        /// <summary>
        /// The non-negative fractions of a second at nanosecond resolution.
        /// </summary>
        /// <value>The non-negative fractions of a second at nanosecond resolution.</value>
        [DataMember(Name = "nanoseconds", IsRequired = true, EmitDefaultValue = true)]
        public double Nanoseconds { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class FirebaseFirestoreTimestamp {\n");
            sb.Append("  Seconds: ").Append(Seconds).Append("\n");
            sb.Append("  Nanoseconds: ").Append(Nanoseconds).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

    }

}
