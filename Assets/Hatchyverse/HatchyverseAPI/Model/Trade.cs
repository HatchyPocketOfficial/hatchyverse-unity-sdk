/*
 * hatchyverse-api
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.0.0
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using OpenAPIDateConverter = HatchyverseAPI.Client.OpenAPIDateConverter;

namespace HatchyverseAPI.Model
{
    /// <summary>
    /// Trade
    /// </summary>
    [DataContract(Name = "Trade")]
    public partial class Trade
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="Trade" /> class.
        /// </summary>
        [JsonConstructorAttribute]
        protected Trade() { }
        /// <summary>
        /// Initializes a new instance of the <see cref="Trade" /> class.
        /// </summary>
        /// <param name="requestAssets">requestAssets (required).</param>
        /// <param name="offerAssets">offerAssets (required).</param>
        /// <param name="usersOffers">usersOffers (required).</param>
        /// <param name="createdAt">createdAt (required).</param>
        /// <param name="updatedAt">updatedAt (required).</param>
        /// <param name="userId">userId (required).</param>
        /// <param name="username">username (required).</param>
        /// <param name="status">status (required).</param>
        /// <param name="uid">uid (required).</param>
        public Trade(List<TradeAsset> requestAssets = default(List<TradeAsset>), List<TradeAsset> offerAssets = default(List<TradeAsset>), List<TradeAsset> usersOffers = default(List<TradeAsset>), string createdAt = default(string), string updatedAt = default(string), string userId = default(string), string username = default(string), string status = default(string), string uid = default(string))
        {
            // to ensure "requestAssets" is required (not null)
            if (requestAssets == null)
            {
                throw new ArgumentNullException("requestAssets is a required property for Trade and cannot be null");
            }
            this.RequestAssets = requestAssets;
            // to ensure "offerAssets" is required (not null)
            if (offerAssets == null)
            {
                throw new ArgumentNullException("offerAssets is a required property for Trade and cannot be null");
            }
            this.OfferAssets = offerAssets;
            // to ensure "usersOffers" is required (not null)
            if (usersOffers == null)
            {
                throw new ArgumentNullException("usersOffers is a required property for Trade and cannot be null");
            }
            this.UsersOffers = usersOffers;
            // to ensure "createdAt" is required (not null)
            if (createdAt == null)
            {
                throw new ArgumentNullException("createdAt is a required property for Trade and cannot be null");
            }
            this.CreatedAt = createdAt;
            // to ensure "updatedAt" is required (not null)
            if (updatedAt == null)
            {
                throw new ArgumentNullException("updatedAt is a required property for Trade and cannot be null");
            }
            this.UpdatedAt = updatedAt;
            // to ensure "userId" is required (not null)
            if (userId == null)
            {
                throw new ArgumentNullException("userId is a required property for Trade and cannot be null");
            }
            this.UserId = userId;
            // to ensure "username" is required (not null)
            if (username == null)
            {
                throw new ArgumentNullException("username is a required property for Trade and cannot be null");
            }
            this.Username = username;
            // to ensure "status" is required (not null)
            if (status == null)
            {
                throw new ArgumentNullException("status is a required property for Trade and cannot be null");
            }
            this.Status = status;
            // to ensure "uid" is required (not null)
            if (uid == null)
            {
                throw new ArgumentNullException("uid is a required property for Trade and cannot be null");
            }
            this.Uid = uid;
        }

        /// <summary>
        /// Gets or Sets RequestAssets
        /// </summary>
        [DataMember(Name = "requestAssets", IsRequired = true, EmitDefaultValue = true)]
        public List<TradeAsset> RequestAssets { get; set; }

        /// <summary>
        /// Gets or Sets OfferAssets
        /// </summary>
        [DataMember(Name = "offerAssets", IsRequired = true, EmitDefaultValue = true)]
        public List<TradeAsset> OfferAssets { get; set; }

        /// <summary>
        /// Gets or Sets UsersOffers
        /// </summary>
        [DataMember(Name = "usersOffers", IsRequired = true, EmitDefaultValue = true)]
        public List<TradeAsset> UsersOffers { get; set; }

        /// <summary>
        /// Gets or Sets CreatedAt
        /// </summary>
        [DataMember(Name = "createdAt", IsRequired = true, EmitDefaultValue = true)]
        public string CreatedAt { get; set; }

        /// <summary>
        /// Gets or Sets UpdatedAt
        /// </summary>
        [DataMember(Name = "updatedAt", IsRequired = true, EmitDefaultValue = true)]
        public string UpdatedAt { get; set; }

        /// <summary>
        /// Gets or Sets UserId
        /// </summary>
        [DataMember(Name = "userId", IsRequired = true, EmitDefaultValue = true)]
        public string UserId { get; set; }

        /// <summary>
        /// Gets or Sets Username
        /// </summary>
        [DataMember(Name = "username", IsRequired = true, EmitDefaultValue = true)]
        public string Username { get; set; }

        /// <summary>
        /// Gets or Sets Status
        /// </summary>
        [DataMember(Name = "status", IsRequired = true, EmitDefaultValue = true)]
        public string Status { get; set; }

        /// <summary>
        /// Gets or Sets Uid
        /// </summary>
        [DataMember(Name = "uid", IsRequired = true, EmitDefaultValue = true)]
        public string Uid { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class Trade {\n");
            sb.Append("  RequestAssets: ").Append(RequestAssets).Append("\n");
            sb.Append("  OfferAssets: ").Append(OfferAssets).Append("\n");
            sb.Append("  UsersOffers: ").Append(UsersOffers).Append("\n");
            sb.Append("  CreatedAt: ").Append(CreatedAt).Append("\n");
            sb.Append("  UpdatedAt: ").Append(UpdatedAt).Append("\n");
            sb.Append("  UserId: ").Append(UserId).Append("\n");
            sb.Append("  Username: ").Append(Username).Append("\n");
            sb.Append("  Status: ").Append(Status).Append("\n");
            sb.Append("  Uid: ").Append(Uid).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

    }

}
