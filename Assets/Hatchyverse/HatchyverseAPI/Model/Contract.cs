/*
 * hatchyverse-api
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.0.0
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using OpenAPIDateConverter = HatchyverseAPI.Client.OpenAPIDateConverter;

namespace HatchyverseAPI.Model
{
    /// <summary>
    /// Contract
    /// </summary>
    [DataContract(Name = "Contract")]
    public partial class Contract
    {
        /// <summary>
        /// Defines ContractType
        /// </summary>
        [JsonConverter(typeof(StringEnumConverter))]
        public enum ContractTypeEnum
        {
            /// <summary>
            /// Enum ERC721 for value: ERC721
            /// </summary>
            [EnumMember(Value = "ERC721")]
            ERC721 = 1,

            /// <summary>
            /// Enum ERC1155 for value: ERC1155
            /// </summary>
            [EnumMember(Value = "ERC1155")]
            ERC1155 = 2,

            /// <summary>
            /// Enum ERC20 for value: ERC20
            /// </summary>
            [EnumMember(Value = "ERC20")]
            ERC20 = 3,

            /// <summary>
            /// Enum Other for value: Other
            /// </summary>
            [EnumMember(Value = "Other")]
            Other = 4
        }


        /// <summary>
        /// Gets or Sets ContractType
        /// </summary>
        [DataMember(Name = "contractType", EmitDefaultValue = false)]
        public ContractTypeEnum? ContractType { get; set; }
        /// <summary>
        /// Initializes a new instance of the <see cref="Contract" /> class.
        /// </summary>
        [JsonConstructorAttribute]
        protected Contract() { }
        /// <summary>
        /// Initializes a new instance of the <see cref="Contract" /> class.
        /// </summary>
        /// <param name="uid">uid (required).</param>
        /// <param name="name">name (required).</param>
        /// <param name="description">description.</param>
        /// <param name="address">address (required).</param>
        /// <param name="chainId">chainId (required).</param>
        /// <param name="link">link (required).</param>
        /// <param name="contractType">contractType.</param>
        /// <param name="deployDate">deployDate (required).</param>
        /// <param name="owner">owner (required).</param>
        /// <param name="verified">verified (required).</param>
        public Contract(string uid = default(string), string name = default(string), string description = default(string), string address = default(string), double chainId = default(double), string link = default(string), ContractTypeEnum? contractType = default(ContractTypeEnum?), string deployDate = default(string), string owner = default(string), bool verified = default(bool))
        {
            // to ensure "uid" is required (not null)
            if (uid == null)
            {
                throw new ArgumentNullException("uid is a required property for Contract and cannot be null");
            }
            this.Uid = uid;
            // to ensure "name" is required (not null)
            if (name == null)
            {
                throw new ArgumentNullException("name is a required property for Contract and cannot be null");
            }
            this.Name = name;
            // to ensure "address" is required (not null)
            if (address == null)
            {
                throw new ArgumentNullException("address is a required property for Contract and cannot be null");
            }
            this.Address = address;
            this.ChainId = chainId;
            // to ensure "link" is required (not null)
            if (link == null)
            {
                throw new ArgumentNullException("link is a required property for Contract and cannot be null");
            }
            this.Link = link;
            // to ensure "deployDate" is required (not null)
            if (deployDate == null)
            {
                throw new ArgumentNullException("deployDate is a required property for Contract and cannot be null");
            }
            this.DeployDate = deployDate;
            // to ensure "owner" is required (not null)
            if (owner == null)
            {
                throw new ArgumentNullException("owner is a required property for Contract and cannot be null");
            }
            this.Owner = owner;
            this.Verified = verified;
            this.Description = description;
            this.ContractType = contractType;
        }

        /// <summary>
        /// Gets or Sets Uid
        /// </summary>
        [DataMember(Name = "uid", IsRequired = true, EmitDefaultValue = true)]
        public string Uid { get; set; }

        /// <summary>
        /// Gets or Sets Name
        /// </summary>
        [DataMember(Name = "name", IsRequired = true, EmitDefaultValue = true)]
        public string Name { get; set; }

        /// <summary>
        /// Gets or Sets Description
        /// </summary>
        [DataMember(Name = "description", EmitDefaultValue = false)]
        public string Description { get; set; }

        /// <summary>
        /// Gets or Sets Address
        /// </summary>
        [DataMember(Name = "address", IsRequired = true, EmitDefaultValue = true)]
        public string Address { get; set; }

        /// <summary>
        /// Gets or Sets ChainId
        /// </summary>
        [DataMember(Name = "chainId", IsRequired = true, EmitDefaultValue = true)]
        public double ChainId { get; set; }

        /// <summary>
        /// Gets or Sets Link
        /// </summary>
        [DataMember(Name = "link", IsRequired = true, EmitDefaultValue = true)]
        public string Link { get; set; }

        /// <summary>
        /// Gets or Sets DeployDate
        /// </summary>
        [DataMember(Name = "deployDate", IsRequired = true, EmitDefaultValue = true)]
        public string DeployDate { get; set; }

        /// <summary>
        /// Gets or Sets Owner
        /// </summary>
        [DataMember(Name = "owner", IsRequired = true, EmitDefaultValue = true)]
        public string Owner { get; set; }

        /// <summary>
        /// Gets or Sets Verified
        /// </summary>
        [DataMember(Name = "verified", IsRequired = true, EmitDefaultValue = true)]
        public bool Verified { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class Contract {\n");
            sb.Append("  Uid: ").Append(Uid).Append("\n");
            sb.Append("  Name: ").Append(Name).Append("\n");
            sb.Append("  Description: ").Append(Description).Append("\n");
            sb.Append("  Address: ").Append(Address).Append("\n");
            sb.Append("  ChainId: ").Append(ChainId).Append("\n");
            sb.Append("  Link: ").Append(Link).Append("\n");
            sb.Append("  ContractType: ").Append(ContractType).Append("\n");
            sb.Append("  DeployDate: ").Append(DeployDate).Append("\n");
            sb.Append("  Owner: ").Append(Owner).Append("\n");
            sb.Append("  Verified: ").Append(Verified).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

    }

}
