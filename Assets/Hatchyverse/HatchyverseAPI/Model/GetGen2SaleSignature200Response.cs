/*
 * hatchyverse-api
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.0.0
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using OpenAPIDateConverter = HatchyverseAPI.Client.OpenAPIDateConverter;

namespace HatchyverseAPI.Model
{
    /// <summary>
    /// GetGen2SaleSignature200Response
    /// </summary>
    [DataContract(Name = "GetGen2SaleSignature_200_response")]
    public partial class GetGen2SaleSignature200Response
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="GetGen2SaleSignature200Response" /> class.
        /// </summary>
        [JsonConstructorAttribute]
        protected GetGen2SaleSignature200Response() { }
        /// <summary>
        /// Initializes a new instance of the <see cref="GetGen2SaleSignature200Response" /> class.
        /// </summary>
        /// <param name="signature">signature (required).</param>
        /// <param name="nonce">nonce (required).</param>
        /// <param name="price">price (required).</param>
        /// <param name="referral">referral (required).</param>
        /// <param name="amount">amount (required).</param>
        /// <param name="eggType">eggType (required).</param>
        /// <param name="receiver">receiver (required).</param>
        public GetGen2SaleSignature200Response(string signature = default(string), Object nonce = default(Object), string price = default(string), string referral = default(string), double amount = default(double), double eggType = default(double), string receiver = default(string))
        {
            // to ensure "signature" is required (not null)
            if (signature == null)
            {
                throw new ArgumentNullException("signature is a required property for GetGen2SaleSignature200Response and cannot be null");
            }
            this.Signature = signature;
            // to ensure "nonce" is required (not null)
            if (nonce == null)
            {
                throw new ArgumentNullException("nonce is a required property for GetGen2SaleSignature200Response and cannot be null");
            }
            this.Nonce = nonce;
            // to ensure "price" is required (not null)
            if (price == null)
            {
                throw new ArgumentNullException("price is a required property for GetGen2SaleSignature200Response and cannot be null");
            }
            this.Price = price;
            // to ensure "referral" is required (not null)
            if (referral == null)
            {
                throw new ArgumentNullException("referral is a required property for GetGen2SaleSignature200Response and cannot be null");
            }
            this.Referral = referral;
            this.Amount = amount;
            this.EggType = eggType;
            // to ensure "receiver" is required (not null)
            if (receiver == null)
            {
                throw new ArgumentNullException("receiver is a required property for GetGen2SaleSignature200Response and cannot be null");
            }
            this.Receiver = receiver;
        }

        /// <summary>
        /// Gets or Sets Signature
        /// </summary>
        [DataMember(Name = "signature", IsRequired = true, EmitDefaultValue = true)]
        public string Signature { get; set; }

        /// <summary>
        /// Gets or Sets Nonce
        /// </summary>
        [DataMember(Name = "nonce", IsRequired = true, EmitDefaultValue = true)]
        public Object Nonce { get; set; }

        /// <summary>
        /// Gets or Sets Price
        /// </summary>
        [DataMember(Name = "price", IsRequired = true, EmitDefaultValue = true)]
        public string Price { get; set; }

        /// <summary>
        /// Gets or Sets Referral
        /// </summary>
        [DataMember(Name = "referral", IsRequired = true, EmitDefaultValue = true)]
        public string Referral { get; set; }

        /// <summary>
        /// Gets or Sets Amount
        /// </summary>
        [DataMember(Name = "amount", IsRequired = true, EmitDefaultValue = true)]
        public double Amount { get; set; }

        /// <summary>
        /// Gets or Sets EggType
        /// </summary>
        [DataMember(Name = "eggType", IsRequired = true, EmitDefaultValue = true)]
        public double EggType { get; set; }

        /// <summary>
        /// Gets or Sets Receiver
        /// </summary>
        [DataMember(Name = "receiver", IsRequired = true, EmitDefaultValue = true)]
        public string Receiver { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class GetGen2SaleSignature200Response {\n");
            sb.Append("  Signature: ").Append(Signature).Append("\n");
            sb.Append("  Nonce: ").Append(Nonce).Append("\n");
            sb.Append("  Price: ").Append(Price).Append("\n");
            sb.Append("  Referral: ").Append(Referral).Append("\n");
            sb.Append("  Amount: ").Append(Amount).Append("\n");
            sb.Append("  EggType: ").Append(EggType).Append("\n");
            sb.Append("  Receiver: ").Append(Receiver).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

    }

}
