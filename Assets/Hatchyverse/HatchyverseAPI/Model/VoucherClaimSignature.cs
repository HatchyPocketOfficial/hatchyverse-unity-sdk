/*
 * masters-api
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.0.0
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using OpenAPIDateConverter = HatchyverseAPI.Client.OpenAPIDateConverter;

namespace HatchyverseAPI.Model
{
    /// <summary>
    /// VoucherClaimSignature
    /// </summary>
    [DataContract(Name = "VoucherClaimSignature")]
    public partial class VoucherClaimSignature
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="VoucherClaimSignature" /> class.
        /// </summary>
        [JsonConstructorAttribute]
        protected VoucherClaimSignature() { }
        /// <summary>
        /// Initializes a new instance of the <see cref="VoucherClaimSignature" /> class.
        /// </summary>
        /// <param name="rewardContractType">rewardContractType (required).</param>
        /// <param name="rewardHolderAddress">rewardHolderAddress (required).</param>
        /// <param name="rewardContract">rewardContract (required).</param>
        /// <param name="receiver">receiver (required).</param>
        /// <param name="amount">amount (required).</param>
        /// <param name="claimableUntil">claimableUntil (required).</param>
        /// <param name="voucherId">voucherId (required).</param>
        /// <param name="signature">signature (required).</param>
        /// <param name="tokenId">tokenId.</param>
        /// <param name="eggType">eggType.</param>
        public VoucherClaimSignature(double rewardContractType = default(double), string rewardHolderAddress = default(string), string rewardContract = default(string), string receiver = default(string), double? amount = default(double?), double claimableUntil = default(double), string voucherId = default(string), string signature = default(string), double tokenId = default(double), double eggType = default(double))
        {
            this.RewardContractType = rewardContractType;
            // to ensure "rewardHolderAddress" is required (not null)
            if (rewardHolderAddress == null)
            {
                throw new ArgumentNullException("rewardHolderAddress is a required property for VoucherClaimSignature and cannot be null");
            }
            this.RewardHolderAddress = rewardHolderAddress;
            // to ensure "rewardContract" is required (not null)
            if (rewardContract == null)
            {
                throw new ArgumentNullException("rewardContract is a required property for VoucherClaimSignature and cannot be null");
            }
            this.RewardContract = rewardContract;
            // to ensure "receiver" is required (not null)
            if (receiver == null)
            {
                throw new ArgumentNullException("receiver is a required property for VoucherClaimSignature and cannot be null");
            }
            this.Receiver = receiver;
            // to ensure "amount" is required (not null)
            if (amount == null)
            {
                throw new ArgumentNullException("amount is a required property for VoucherClaimSignature and cannot be null");
            }
            this.Amount = amount;
            this.ClaimableUntil = claimableUntil;
            // to ensure "voucherId" is required (not null)
            if (voucherId == null)
            {
                throw new ArgumentNullException("voucherId is a required property for VoucherClaimSignature and cannot be null");
            }
            this.VoucherId = voucherId;
            // to ensure "signature" is required (not null)
            if (signature == null)
            {
                throw new ArgumentNullException("signature is a required property for VoucherClaimSignature and cannot be null");
            }
            this.Signature = signature;
            this.TokenId = tokenId;
            this.EggType = eggType;
        }

        /// <summary>
        /// Gets or Sets RewardContractType
        /// </summary>
        [DataMember(Name = "rewardContractType", IsRequired = true, EmitDefaultValue = true)]
        public double RewardContractType { get; set; }

        /// <summary>
        /// Gets or Sets RewardHolderAddress
        /// </summary>
        [DataMember(Name = "rewardHolderAddress", IsRequired = true, EmitDefaultValue = true)]
        public string RewardHolderAddress { get; set; }

        /// <summary>
        /// Gets or Sets RewardContract
        /// </summary>
        [DataMember(Name = "rewardContract", IsRequired = true, EmitDefaultValue = true)]
        public string RewardContract { get; set; }

        /// <summary>
        /// Gets or Sets Receiver
        /// </summary>
        [DataMember(Name = "receiver", IsRequired = true, EmitDefaultValue = true)]
        public string Receiver { get; set; }

        /// <summary>
        /// Gets or Sets Amount
        /// </summary>
        [DataMember(Name = "amount", IsRequired = true, EmitDefaultValue = true)]
        public double? Amount { get; set; }

        /// <summary>
        /// Gets or Sets ClaimableUntil
        /// </summary>
        [DataMember(Name = "claimableUntil", IsRequired = true, EmitDefaultValue = true)]
        public double ClaimableUntil { get; set; }

        /// <summary>
        /// Gets or Sets VoucherId
        /// </summary>
        [DataMember(Name = "voucherId", IsRequired = true, EmitDefaultValue = true)]
        public string VoucherId { get; set; }

        /// <summary>
        /// Gets or Sets Signature
        /// </summary>
        [DataMember(Name = "signature", IsRequired = true, EmitDefaultValue = true)]
        public string Signature { get; set; }

        /// <summary>
        /// Gets or Sets TokenId
        /// </summary>
        [DataMember(Name = "tokenId", EmitDefaultValue = false)]
        public double TokenId { get; set; }

        /// <summary>
        /// Gets or Sets EggType
        /// </summary>
        [DataMember(Name = "eggType", EmitDefaultValue = false)]
        public double EggType { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class VoucherClaimSignature {\n");
            sb.Append("  RewardContractType: ").Append(RewardContractType).Append("\n");
            sb.Append("  RewardHolderAddress: ").Append(RewardHolderAddress).Append("\n");
            sb.Append("  RewardContract: ").Append(RewardContract).Append("\n");
            sb.Append("  Receiver: ").Append(Receiver).Append("\n");
            sb.Append("  Amount: ").Append(Amount).Append("\n");
            sb.Append("  ClaimableUntil: ").Append(ClaimableUntil).Append("\n");
            sb.Append("  VoucherId: ").Append(VoucherId).Append("\n");
            sb.Append("  Signature: ").Append(Signature).Append("\n");
            sb.Append("  TokenId: ").Append(TokenId).Append("\n");
            sb.Append("  EggType: ").Append(EggType).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

    }

}
