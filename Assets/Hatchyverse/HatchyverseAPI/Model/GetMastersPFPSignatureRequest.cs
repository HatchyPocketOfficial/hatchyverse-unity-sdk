/*
 * hatchyverse-api
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.0.0
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using OpenAPIDateConverter = HatchyverseAPI.Client.OpenAPIDateConverter;

namespace HatchyverseAPI.Model
{
    /// <summary>
    /// GetMastersPFPSignatureRequest
    /// </summary>
    [DataContract(Name = "GetMastersPFPSignature_request")]
    public partial class GetMastersPFPSignatureRequest
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="GetMastersPFPSignatureRequest" /> class.
        /// </summary>
        [JsonConstructorAttribute]
        protected GetMastersPFPSignatureRequest() { }
        /// <summary>
        /// Initializes a new instance of the <see cref="GetMastersPFPSignatureRequest" /> class.
        /// </summary>
        /// <param name="payWithTicket">payWithTicket (required).</param>
        /// <param name="currency">currency (required).</param>
        /// <param name="traits">traits (required).</param>
        /// <param name="receiver">receiver.</param>
        public GetMastersPFPSignatureRequest(bool payWithTicket = default(bool), string currency = default(string), List<double> traits = default(List<double>), string receiver = default(string))
        {
            this.PayWithTicket = payWithTicket;
            // to ensure "currency" is required (not null)
            if (currency == null)
            {
                throw new ArgumentNullException("currency is a required property for GetMastersPFPSignatureRequest and cannot be null");
            }
            this.Currency = currency;
            // to ensure "traits" is required (not null)
            if (traits == null)
            {
                throw new ArgumentNullException("traits is a required property for GetMastersPFPSignatureRequest and cannot be null");
            }
            this.Traits = traits;
            this.Receiver = receiver;
        }

        /// <summary>
        /// Gets or Sets PayWithTicket
        /// </summary>
        [DataMember(Name = "payWithTicket", IsRequired = true, EmitDefaultValue = true)]
        public bool PayWithTicket { get; set; }

        /// <summary>
        /// Gets or Sets Currency
        /// </summary>
        [DataMember(Name = "currency", IsRequired = true, EmitDefaultValue = true)]
        public string Currency { get; set; }

        /// <summary>
        /// Gets or Sets Traits
        /// </summary>
        [DataMember(Name = "traits", IsRequired = true, EmitDefaultValue = true)]
        public List<double> Traits { get; set; }

        /// <summary>
        /// Gets or Sets Receiver
        /// </summary>
        [DataMember(Name = "receiver", EmitDefaultValue = false)]
        public string Receiver { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class GetMastersPFPSignatureRequest {\n");
            sb.Append("  PayWithTicket: ").Append(PayWithTicket).Append("\n");
            sb.Append("  Currency: ").Append(Currency).Append("\n");
            sb.Append("  Traits: ").Append(Traits).Append("\n");
            sb.Append("  Receiver: ").Append(Receiver).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

    }

}
