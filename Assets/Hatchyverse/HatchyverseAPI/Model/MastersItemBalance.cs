/*
 * hatchyverse-api
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.0.0
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using OpenAPIDateConverter = HatchyverseAPI.Client.OpenAPIDateConverter;

namespace HatchyverseAPI.Model
{
    /// <summary>
    /// MastersItemBalance
    /// </summary>
    [DataContract(Name = "MastersItemBalance")]
    public partial class MastersItemBalance
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="MastersItemBalance" /> class.
        /// </summary>
        [JsonConstructorAttribute]
        protected MastersItemBalance() { }
        /// <summary>
        /// Initializes a new instance of the <see cref="MastersItemBalance" /> class.
        /// </summary>
        /// <param name="id">id (required).</param>
        /// <param name="createdAt">createdAt (required).</param>
        /// <param name="updatedAt">updatedAt (required).</param>
        /// <param name="name">name (required).</param>
        /// <param name="category">category (required).</param>
        /// <param name="gender">gender.</param>
        /// <param name="description">description.</param>
        /// <param name="image">image (required).</param>
        /// <param name="frontImage">frontImage.</param>
        /// <param name="backImage">backImage.</param>
        /// <param name="maskImage">maskImage.</param>
        /// <param name="rarity">rarity.</param>
        /// <param name="effects">effects.</param>
        /// <param name="storyNotes">storyNotes.</param>
        /// <param name="balance">balance (required).</param>
        public MastersItemBalance(double id = default(double), string createdAt = default(string), string updatedAt = default(string), string name = default(string), ItemCategory category = default(ItemCategory), TraitGender gender = default(TraitGender), string description = default(string), string image = default(string), string frontImage = default(string), string backImage = default(string), string maskImage = default(string), string rarity = default(string), string effects = default(string), string storyNotes = default(string), double balance = default(double))
        {
            this.Id = id;
            // to ensure "createdAt" is required (not null)
            if (createdAt == null)
            {
                throw new ArgumentNullException("createdAt is a required property for MastersItemBalance and cannot be null");
            }
            this.CreatedAt = createdAt;
            // to ensure "updatedAt" is required (not null)
            if (updatedAt == null)
            {
                throw new ArgumentNullException("updatedAt is a required property for MastersItemBalance and cannot be null");
            }
            this.UpdatedAt = updatedAt;
            // to ensure "name" is required (not null)
            if (name == null)
            {
                throw new ArgumentNullException("name is a required property for MastersItemBalance and cannot be null");
            }
            this.Name = name;
            // to ensure "category" is required (not null)
            if (category == null)
            {
                throw new ArgumentNullException("category is a required property for MastersItemBalance and cannot be null");
            }
            this.Category = category;
            // to ensure "image" is required (not null)
            if (image == null)
            {
                throw new ArgumentNullException("image is a required property for MastersItemBalance and cannot be null");
            }
            this.Image = image;
            this.Balance = balance;
            this.Gender = gender;
            this.Description = description;
            this.FrontImage = frontImage;
            this.BackImage = backImage;
            this.MaskImage = maskImage;
            this.Rarity = rarity;
            this.Effects = effects;
            this.StoryNotes = storyNotes;
        }

        /// <summary>
        /// Gets or Sets Id
        /// </summary>
        [DataMember(Name = "id", IsRequired = true, EmitDefaultValue = true)]
        public double Id { get; set; }

        /// <summary>
        /// Gets or Sets CreatedAt
        /// </summary>
        [DataMember(Name = "createdAt", IsRequired = true, EmitDefaultValue = true)]
        public string CreatedAt { get; set; }

        /// <summary>
        /// Gets or Sets UpdatedAt
        /// </summary>
        [DataMember(Name = "updatedAt", IsRequired = true, EmitDefaultValue = true)]
        public string UpdatedAt { get; set; }

        /// <summary>
        /// Gets or Sets Name
        /// </summary>
        [DataMember(Name = "name", IsRequired = true, EmitDefaultValue = true)]
        public string Name { get; set; }

        /// <summary>
        /// Gets or Sets Category
        /// </summary>
        [DataMember(Name = "category", IsRequired = true, EmitDefaultValue = true)]
        public ItemCategory Category { get; set; }

        /// <summary>
        /// Gets or Sets Gender
        /// </summary>
        [DataMember(Name = "gender", EmitDefaultValue = true)]
        public TraitGender Gender { get; set; }

        /// <summary>
        /// Gets or Sets Description
        /// </summary>
        [DataMember(Name = "description", EmitDefaultValue = true)]
        public string Description { get; set; }

        /// <summary>
        /// Gets or Sets Image
        /// </summary>
        [DataMember(Name = "image", IsRequired = true, EmitDefaultValue = true)]
        public string Image { get; set; }

        /// <summary>
        /// Gets or Sets FrontImage
        /// </summary>
        [DataMember(Name = "frontImage", EmitDefaultValue = true)]
        public string FrontImage { get; set; }

        /// <summary>
        /// Gets or Sets BackImage
        /// </summary>
        [DataMember(Name = "backImage", EmitDefaultValue = true)]
        public string BackImage { get; set; }

        /// <summary>
        /// Gets or Sets MaskImage
        /// </summary>
        [DataMember(Name = "maskImage", EmitDefaultValue = true)]
        public string MaskImage { get; set; }

        /// <summary>
        /// Gets or Sets Rarity
        /// </summary>
        [DataMember(Name = "rarity", EmitDefaultValue = true)]
        public string Rarity { get; set; }

        /// <summary>
        /// Gets or Sets Effects
        /// </summary>
        [DataMember(Name = "effects", EmitDefaultValue = true)]
        public string Effects { get; set; }

        /// <summary>
        /// Gets or Sets StoryNotes
        /// </summary>
        [DataMember(Name = "storyNotes", EmitDefaultValue = true)]
        public string StoryNotes { get; set; }

        /// <summary>
        /// Gets or Sets Balance
        /// </summary>
        [DataMember(Name = "balance", IsRequired = true, EmitDefaultValue = true)]
        public double Balance { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class MastersItemBalance {\n");
            sb.Append("  Id: ").Append(Id).Append("\n");
            sb.Append("  CreatedAt: ").Append(CreatedAt).Append("\n");
            sb.Append("  UpdatedAt: ").Append(UpdatedAt).Append("\n");
            sb.Append("  Name: ").Append(Name).Append("\n");
            sb.Append("  Category: ").Append(Category).Append("\n");
            sb.Append("  Gender: ").Append(Gender).Append("\n");
            sb.Append("  Description: ").Append(Description).Append("\n");
            sb.Append("  Image: ").Append(Image).Append("\n");
            sb.Append("  FrontImage: ").Append(FrontImage).Append("\n");
            sb.Append("  BackImage: ").Append(BackImage).Append("\n");
            sb.Append("  MaskImage: ").Append(MaskImage).Append("\n");
            sb.Append("  Rarity: ").Append(Rarity).Append("\n");
            sb.Append("  Effects: ").Append(Effects).Append("\n");
            sb.Append("  StoryNotes: ").Append(StoryNotes).Append("\n");
            sb.Append("  Balance: ").Append(Balance).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

    }

}
