/*
 * hatchyverse-api
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.0.0
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using OpenAPIDateConverter = HatchyverseAPI.Client.OpenAPIDateConverter;

namespace HatchyverseAPI.Model
{
    /// <summary>
    /// BatchVoucherClaimSignature
    /// </summary>
    [DataContract(Name = "BatchVoucherClaimSignature")]
    public partial class BatchVoucherClaimSignature
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="BatchVoucherClaimSignature" /> class.
        /// </summary>
        [JsonConstructorAttribute]
        protected BatchVoucherClaimSignature() { }
        /// <summary>
        /// Initializes a new instance of the <see cref="BatchVoucherClaimSignature" /> class.
        /// </summary>
        /// <param name="rewardContractType">rewardContractType (required).</param>
        /// <param name="rewardHolderAddress">rewardHolderAddress (required).</param>
        /// <param name="rewardContract">rewardContract (required).</param>
        /// <param name="receiver">receiver (required).</param>
        /// <param name="tokenIds">tokenIds.</param>
        /// <param name="amounts">amounts (required).</param>
        /// <param name="claimableUntil">claimableUntil (required).</param>
        /// <param name="voucherIds">voucherIds (required).</param>
        /// <param name="signature">signature (required).</param>
        public BatchVoucherClaimSignature(double rewardContractType = default(double), string rewardHolderAddress = default(string), string rewardContract = default(string), string receiver = default(string), List<string> tokenIds = default(List<string>), List<double> amounts = default(List<double>), double claimableUntil = default(double), List<string> voucherIds = default(List<string>), string signature = default(string))
        {
            this.RewardContractType = rewardContractType;
            // to ensure "rewardHolderAddress" is required (not null)
            if (rewardHolderAddress == null)
            {
                throw new ArgumentNullException("rewardHolderAddress is a required property for BatchVoucherClaimSignature and cannot be null");
            }
            this.RewardHolderAddress = rewardHolderAddress;
            // to ensure "rewardContract" is required (not null)
            if (rewardContract == null)
            {
                throw new ArgumentNullException("rewardContract is a required property for BatchVoucherClaimSignature and cannot be null");
            }
            this.RewardContract = rewardContract;
            // to ensure "receiver" is required (not null)
            if (receiver == null)
            {
                throw new ArgumentNullException("receiver is a required property for BatchVoucherClaimSignature and cannot be null");
            }
            this.Receiver = receiver;
            // to ensure "amounts" is required (not null)
            if (amounts == null)
            {
                throw new ArgumentNullException("amounts is a required property for BatchVoucherClaimSignature and cannot be null");
            }
            this.Amounts = amounts;
            this.ClaimableUntil = claimableUntil;
            // to ensure "voucherIds" is required (not null)
            if (voucherIds == null)
            {
                throw new ArgumentNullException("voucherIds is a required property for BatchVoucherClaimSignature and cannot be null");
            }
            this.VoucherIds = voucherIds;
            // to ensure "signature" is required (not null)
            if (signature == null)
            {
                throw new ArgumentNullException("signature is a required property for BatchVoucherClaimSignature and cannot be null");
            }
            this.Signature = signature;
            this.TokenIds = tokenIds;
        }

        /// <summary>
        /// Gets or Sets RewardContractType
        /// </summary>
        [DataMember(Name = "rewardContractType", IsRequired = true, EmitDefaultValue = true)]
        public double RewardContractType { get; set; }

        /// <summary>
        /// Gets or Sets RewardHolderAddress
        /// </summary>
        [DataMember(Name = "rewardHolderAddress", IsRequired = true, EmitDefaultValue = true)]
        public string RewardHolderAddress { get; set; }

        /// <summary>
        /// Gets or Sets RewardContract
        /// </summary>
        [DataMember(Name = "rewardContract", IsRequired = true, EmitDefaultValue = true)]
        public string RewardContract { get; set; }

        /// <summary>
        /// Gets or Sets Receiver
        /// </summary>
        [DataMember(Name = "receiver", IsRequired = true, EmitDefaultValue = true)]
        public string Receiver { get; set; }

        /// <summary>
        /// Gets or Sets TokenIds
        /// </summary>
        [DataMember(Name = "tokenIds", EmitDefaultValue = false)]
        public List<string> TokenIds { get; set; }

        /// <summary>
        /// Gets or Sets Amounts
        /// </summary>
        [DataMember(Name = "amounts", IsRequired = true, EmitDefaultValue = true)]
        public List<double> Amounts { get; set; }

        /// <summary>
        /// Gets or Sets ClaimableUntil
        /// </summary>
        [DataMember(Name = "claimableUntil", IsRequired = true, EmitDefaultValue = true)]
        public double ClaimableUntil { get; set; }

        /// <summary>
        /// Gets or Sets VoucherIds
        /// </summary>
        [DataMember(Name = "voucherIds", IsRequired = true, EmitDefaultValue = true)]
        public List<string> VoucherIds { get; set; }

        /// <summary>
        /// Gets or Sets Signature
        /// </summary>
        [DataMember(Name = "signature", IsRequired = true, EmitDefaultValue = true)]
        public string Signature { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class BatchVoucherClaimSignature {\n");
            sb.Append("  RewardContractType: ").Append(RewardContractType).Append("\n");
            sb.Append("  RewardHolderAddress: ").Append(RewardHolderAddress).Append("\n");
            sb.Append("  RewardContract: ").Append(RewardContract).Append("\n");
            sb.Append("  Receiver: ").Append(Receiver).Append("\n");
            sb.Append("  TokenIds: ").Append(TokenIds).Append("\n");
            sb.Append("  Amounts: ").Append(Amounts).Append("\n");
            sb.Append("  ClaimableUntil: ").Append(ClaimableUntil).Append("\n");
            sb.Append("  VoucherIds: ").Append(VoucherIds).Append("\n");
            sb.Append("  Signature: ").Append(Signature).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

    }

}
