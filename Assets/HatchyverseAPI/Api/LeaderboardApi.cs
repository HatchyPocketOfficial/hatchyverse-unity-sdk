/*
 * masters-api
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.0.0
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.Net;
using System.Net.Mime;
using HatchyverseAPI.Client;
using HatchyverseAPI.Model;

namespace HatchyverseAPI.Api
{

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface ILeaderboardApiSync : IApiAccessor
    {
        #region Synchronous Operations
        /// <summary>
        /// 
        /// </summary>
        /// <exception cref="HatchyverseAPI.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="addScoreRequest"></param>
        /// <returns>Score</returns>
        Score AddScore(AddScoreRequest addScoreRequest);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="HatchyverseAPI.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="addScoreRequest"></param>
        /// <returns>ApiResponse of Score</returns>
        ApiResponse<Score> AddScoreWithHttpInfo(AddScoreRequest addScoreRequest);
        /// <summary>
        /// 
        /// </summary>
        /// <exception cref="HatchyverseAPI.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="gameId"></param>
        /// <param name="limit"> (optional)</param>
        /// <returns>List&lt;GetRankLeaderboard200ResponseInner&gt;</returns>
        List<GetRankLeaderboard200ResponseInner> GetRankLeaderboard(string gameId, double? limit = default(double?));

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="HatchyverseAPI.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="gameId"></param>
        /// <param name="limit"> (optional)</param>
        /// <returns>ApiResponse of List&lt;GetRankLeaderboard200ResponseInner&gt;</returns>
        ApiResponse<List<GetRankLeaderboard200ResponseInner>> GetRankLeaderboardWithHttpInfo(string gameId, double? limit = default(double?));
        /// <summary>
        /// 
        /// </summary>
        /// <exception cref="HatchyverseAPI.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="gameId"></param>
        /// <param name="limit"> (optional)</param>
        /// <returns>List&lt;Score&gt;</returns>
        List<Score> GetScoreLeaderboard(string gameId, double? limit = default(double?));

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="HatchyverseAPI.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="gameId"></param>
        /// <param name="limit"> (optional)</param>
        /// <returns>ApiResponse of List&lt;Score&gt;</returns>
        ApiResponse<List<Score>> GetScoreLeaderboardWithHttpInfo(string gameId, double? limit = default(double?));
        /// <summary>
        /// 
        /// </summary>
        /// <exception cref="HatchyverseAPI.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="gameId"></param>
        /// <returns>Rank</returns>
        Rank GetUserRank(string gameId);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="HatchyverseAPI.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="gameId"></param>
        /// <returns>ApiResponse of Rank</returns>
        ApiResponse<Rank> GetUserRankWithHttpInfo(string gameId);
        /// <summary>
        /// 
        /// </summary>
        /// <exception cref="HatchyverseAPI.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="gameId"></param>
        /// <returns>Score</returns>
        Score GetUserScore(string gameId);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="HatchyverseAPI.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="gameId"></param>
        /// <returns>ApiResponse of Score</returns>
        ApiResponse<Score> GetUserScoreWithHttpInfo(string gameId);
        /// <summary>
        /// 
        /// </summary>
        /// <exception cref="HatchyverseAPI.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="updateRankRequest"></param>
        /// <returns>Rank</returns>
        Rank UpdateRank(UpdateRankRequest updateRankRequest);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="HatchyverseAPI.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="updateRankRequest"></param>
        /// <returns>ApiResponse of Rank</returns>
        ApiResponse<Rank> UpdateRankWithHttpInfo(UpdateRankRequest updateRankRequest);
        #endregion Synchronous Operations
    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface ILeaderboardApiAsync : IApiAccessor
    {
        #region Asynchronous Operations
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="HatchyverseAPI.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="addScoreRequest"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of Score</returns>
        System.Threading.Tasks.Task<Score> AddScoreAsync(AddScoreRequest addScoreRequest, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken));

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="HatchyverseAPI.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="addScoreRequest"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (Score)</returns>
        System.Threading.Tasks.Task<ApiResponse<Score>> AddScoreWithHttpInfoAsync(AddScoreRequest addScoreRequest, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken));
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="HatchyverseAPI.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="gameId"></param>
        /// <param name="limit"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of List&lt;GetRankLeaderboard200ResponseInner&gt;</returns>
        System.Threading.Tasks.Task<List<GetRankLeaderboard200ResponseInner>> GetRankLeaderboardAsync(string gameId, double? limit = default(double?), System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken));

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="HatchyverseAPI.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="gameId"></param>
        /// <param name="limit"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (List&lt;GetRankLeaderboard200ResponseInner&gt;)</returns>
        System.Threading.Tasks.Task<ApiResponse<List<GetRankLeaderboard200ResponseInner>>> GetRankLeaderboardWithHttpInfoAsync(string gameId, double? limit = default(double?), System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken));
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="HatchyverseAPI.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="gameId"></param>
        /// <param name="limit"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of List&lt;Score&gt;</returns>
        System.Threading.Tasks.Task<List<Score>> GetScoreLeaderboardAsync(string gameId, double? limit = default(double?), System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken));

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="HatchyverseAPI.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="gameId"></param>
        /// <param name="limit"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (List&lt;Score&gt;)</returns>
        System.Threading.Tasks.Task<ApiResponse<List<Score>>> GetScoreLeaderboardWithHttpInfoAsync(string gameId, double? limit = default(double?), System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken));
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="HatchyverseAPI.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="gameId"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of Rank</returns>
        System.Threading.Tasks.Task<Rank> GetUserRankAsync(string gameId, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken));

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="HatchyverseAPI.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="gameId"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (Rank)</returns>
        System.Threading.Tasks.Task<ApiResponse<Rank>> GetUserRankWithHttpInfoAsync(string gameId, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken));
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="HatchyverseAPI.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="gameId"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of Score</returns>
        System.Threading.Tasks.Task<Score> GetUserScoreAsync(string gameId, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken));

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="HatchyverseAPI.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="gameId"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (Score)</returns>
        System.Threading.Tasks.Task<ApiResponse<Score>> GetUserScoreWithHttpInfoAsync(string gameId, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken));
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="HatchyverseAPI.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="updateRankRequest"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of Rank</returns>
        System.Threading.Tasks.Task<Rank> UpdateRankAsync(UpdateRankRequest updateRankRequest, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken));

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="HatchyverseAPI.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="updateRankRequest"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (Rank)</returns>
        System.Threading.Tasks.Task<ApiResponse<Rank>> UpdateRankWithHttpInfoAsync(UpdateRankRequest updateRankRequest, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken));
        #endregion Asynchronous Operations
    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface ILeaderboardApi : ILeaderboardApiSync, ILeaderboardApiAsync
    {

    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public partial class LeaderboardApi : IDisposable, ILeaderboardApi
    {
        private HatchyverseAPI.Client.ExceptionFactory _exceptionFactory = (name, response) => null;

        /// <summary>
        /// Initializes a new instance of the <see cref="LeaderboardApi"/> class.
        /// **IMPORTANT** This will also create an instance of HttpClient, which is less than ideal.
        /// It's better to reuse the <see href="https://docs.microsoft.com/en-us/dotnet/architecture/microservices/implement-resilient-applications/use-httpclientfactory-to-implement-resilient-http-requests#issues-with-the-original-httpclient-class-available-in-net">HttpClient and HttpClientHandler</see>.
        /// </summary>
        /// <returns></returns>
        public LeaderboardApi() : this((string)null)
        {
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="LeaderboardApi"/> class.
        /// **IMPORTANT** This will also create an instance of HttpClient, which is less than ideal.
        /// It's better to reuse the <see href="https://docs.microsoft.com/en-us/dotnet/architecture/microservices/implement-resilient-applications/use-httpclientfactory-to-implement-resilient-http-requests#issues-with-the-original-httpclient-class-available-in-net">HttpClient and HttpClientHandler</see>.
        /// </summary>
        /// <param name="basePath">The target service's base path in URL format.</param>
        /// <exception cref="ArgumentException"></exception>
        /// <returns></returns>
        public LeaderboardApi(string basePath)
        {
            this.Configuration = HatchyverseAPI.Client.Configuration.MergeConfigurations(
                HatchyverseAPI.Client.GlobalConfiguration.Instance,
                new HatchyverseAPI.Client.Configuration { BasePath = basePath }
            );
            this.ApiClient = new HatchyverseAPI.Client.ApiClient(this.Configuration.BasePath);
            this.Client =  this.ApiClient;
            this.AsynchronousClient = this.ApiClient;
            this.ExceptionFactory = HatchyverseAPI.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="LeaderboardApi"/> class using Configuration object.
        /// **IMPORTANT** This will also create an instance of HttpClient, which is less than ideal.
        /// It's better to reuse the <see href="https://docs.microsoft.com/en-us/dotnet/architecture/microservices/implement-resilient-applications/use-httpclientfactory-to-implement-resilient-http-requests#issues-with-the-original-httpclient-class-available-in-net">HttpClient and HttpClientHandler</see>.
        /// </summary>
        /// <param name="configuration">An instance of Configuration.</param>
        /// <exception cref="ArgumentNullException"></exception>
        /// <returns></returns>
        public LeaderboardApi(HatchyverseAPI.Client.Configuration configuration)
        {
            if (configuration == null) throw new ArgumentNullException("configuration");

            this.Configuration = HatchyverseAPI.Client.Configuration.MergeConfigurations(
                HatchyverseAPI.Client.GlobalConfiguration.Instance,
                configuration
            );
            this.ApiClient = new HatchyverseAPI.Client.ApiClient(this.Configuration.BasePath);
            this.Client = this.ApiClient;
            this.AsynchronousClient = this.ApiClient;
            ExceptionFactory = HatchyverseAPI.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="LeaderboardApi"/> class
        /// using a Configuration object and client instance.
        /// </summary>
        /// <param name="client">The client interface for synchronous API access.</param>
        /// <param name="asyncClient">The client interface for asynchronous API access.</param>
        /// <param name="configuration">The configuration object.</param>
        /// <exception cref="ArgumentNullException"></exception>
        public LeaderboardApi(HatchyverseAPI.Client.ISynchronousClient client, HatchyverseAPI.Client.IAsynchronousClient asyncClient, HatchyverseAPI.Client.IReadableConfiguration configuration)
        {
            if (client == null) throw new ArgumentNullException("client");
            if (asyncClient == null) throw new ArgumentNullException("asyncClient");
            if (configuration == null) throw new ArgumentNullException("configuration");

            this.Client = client;
            this.AsynchronousClient = asyncClient;
            this.Configuration = configuration;
            this.ExceptionFactory = HatchyverseAPI.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Disposes resources if they were created by us
        /// </summary>
        public void Dispose()
        {
            this.ApiClient?.Dispose();
        }

        /// <summary>
        /// Holds the ApiClient if created
        /// </summary>
        public HatchyverseAPI.Client.ApiClient ApiClient { get; set; } = null;

        /// <summary>
        /// The client for accessing this underlying API asynchronously.
        /// </summary>
        public HatchyverseAPI.Client.IAsynchronousClient AsynchronousClient { get; set; }

        /// <summary>
        /// The client for accessing this underlying API synchronously.
        /// </summary>
        public HatchyverseAPI.Client.ISynchronousClient Client { get; set; }

        /// <summary>
        /// Gets the base path of the API client.
        /// </summary>
        /// <value>The base path</value>
        public string GetBasePath()
        {
            return this.Configuration.BasePath;
        }

        /// <summary>
        /// Gets or sets the configuration object
        /// </summary>
        /// <value>An instance of the Configuration</value>
        public HatchyverseAPI.Client.IReadableConfiguration Configuration { get; set; }

        /// <summary>
        /// Provides a factory method hook for the creation of exceptions.
        /// </summary>
        public HatchyverseAPI.Client.ExceptionFactory ExceptionFactory
        {
            get
            {
                if (_exceptionFactory != null && _exceptionFactory.GetInvocationList().Length > 1)
                {
                    throw new InvalidOperationException("Multicast delegate for ExceptionFactory is unsupported.");
                }
                return _exceptionFactory;
            }
            set { _exceptionFactory = value; }
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="HatchyverseAPI.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="addScoreRequest"></param>
        /// <returns>Score</returns>
        public Score AddScore(AddScoreRequest addScoreRequest)
        {
            HatchyverseAPI.Client.ApiResponse<Score> localVarResponse = AddScoreWithHttpInfo(addScoreRequest);
            return localVarResponse.Data;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="HatchyverseAPI.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="addScoreRequest"></param>
        /// <returns>ApiResponse of Score</returns>
        public HatchyverseAPI.Client.ApiResponse<Score> AddScoreWithHttpInfo(AddScoreRequest addScoreRequest)
        {
            // verify the required parameter 'addScoreRequest' is set
            if (addScoreRequest == null)
                throw new HatchyverseAPI.Client.ApiException(400, "Missing required parameter 'addScoreRequest' when calling LeaderboardApi->AddScore");

            HatchyverseAPI.Client.RequestOptions localVarRequestOptions = new HatchyverseAPI.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = HatchyverseAPI.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = HatchyverseAPI.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.Data = addScoreRequest;


            // make the HTTP request
            var localVarResponse = this.Client.Post<Score>("/leaderboard/scores", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("AddScore", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="HatchyverseAPI.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="addScoreRequest"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of Score</returns>
        public async System.Threading.Tasks.Task<Score> AddScoreAsync(AddScoreRequest addScoreRequest, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
        {
            var task = AddScoreWithHttpInfoAsync(addScoreRequest, cancellationToken);
#if UNITY_EDITOR || !UNITY_WEBGL
            HatchyverseAPI.Client.ApiResponse<Score> localVarResponse = await task.ConfigureAwait(false);
#else
            HatchyverseAPI.Client.ApiResponse<Score> localVarResponse = await task;
#endif
            return localVarResponse.Data;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="HatchyverseAPI.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="addScoreRequest"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (Score)</returns>
        public async System.Threading.Tasks.Task<HatchyverseAPI.Client.ApiResponse<Score>> AddScoreWithHttpInfoAsync(AddScoreRequest addScoreRequest, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
        {
            // verify the required parameter 'addScoreRequest' is set
            if (addScoreRequest == null)
                throw new HatchyverseAPI.Client.ApiException(400, "Missing required parameter 'addScoreRequest' when calling LeaderboardApi->AddScore");


            HatchyverseAPI.Client.RequestOptions localVarRequestOptions = new HatchyverseAPI.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };


            var localVarContentType = HatchyverseAPI.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = HatchyverseAPI.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.Data = addScoreRequest;


            // make the HTTP request

            var task = this.AsynchronousClient.PostAsync<Score>("/leaderboard/scores", localVarRequestOptions, this.Configuration, cancellationToken);

#if UNITY_EDITOR || !UNITY_WEBGL
            var localVarResponse = await task.ConfigureAwait(false);
#else
            var localVarResponse = await task;
#endif

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("AddScore", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="HatchyverseAPI.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="gameId"></param>
        /// <param name="limit"> (optional)</param>
        /// <returns>List&lt;GetRankLeaderboard200ResponseInner&gt;</returns>
        public List<GetRankLeaderboard200ResponseInner> GetRankLeaderboard(string gameId, double? limit = default(double?))
        {
            HatchyverseAPI.Client.ApiResponse<List<GetRankLeaderboard200ResponseInner>> localVarResponse = GetRankLeaderboardWithHttpInfo(gameId, limit);
            return localVarResponse.Data;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="HatchyverseAPI.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="gameId"></param>
        /// <param name="limit"> (optional)</param>
        /// <returns>ApiResponse of List&lt;GetRankLeaderboard200ResponseInner&gt;</returns>
        public HatchyverseAPI.Client.ApiResponse<List<GetRankLeaderboard200ResponseInner>> GetRankLeaderboardWithHttpInfo(string gameId, double? limit = default(double?))
        {
            // verify the required parameter 'gameId' is set
            if (gameId == null)
                throw new HatchyverseAPI.Client.ApiException(400, "Missing required parameter 'gameId' when calling LeaderboardApi->GetRankLeaderboard");

            HatchyverseAPI.Client.RequestOptions localVarRequestOptions = new HatchyverseAPI.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = HatchyverseAPI.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = HatchyverseAPI.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("gameId", HatchyverseAPI.Client.ClientUtils.ParameterToString(gameId)); // path parameter
            if (limit != null)
            {
                localVarRequestOptions.QueryParameters.Add(HatchyverseAPI.Client.ClientUtils.ParameterToMultiMap("", "limit", limit));
            }


            // make the HTTP request
            var localVarResponse = this.Client.Get<List<GetRankLeaderboard200ResponseInner>>("/leaderboard/rank/{gameId}", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetRankLeaderboard", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="HatchyverseAPI.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="gameId"></param>
        /// <param name="limit"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of List&lt;GetRankLeaderboard200ResponseInner&gt;</returns>
        public async System.Threading.Tasks.Task<List<GetRankLeaderboard200ResponseInner>> GetRankLeaderboardAsync(string gameId, double? limit = default(double?), System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
        {
            var task = GetRankLeaderboardWithHttpInfoAsync(gameId, limit, cancellationToken);
#if UNITY_EDITOR || !UNITY_WEBGL
            HatchyverseAPI.Client.ApiResponse<List<GetRankLeaderboard200ResponseInner>> localVarResponse = await task.ConfigureAwait(false);
#else
            HatchyverseAPI.Client.ApiResponse<List<GetRankLeaderboard200ResponseInner>> localVarResponse = await task;
#endif
            return localVarResponse.Data;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="HatchyverseAPI.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="gameId"></param>
        /// <param name="limit"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (List&lt;GetRankLeaderboard200ResponseInner&gt;)</returns>
        public async System.Threading.Tasks.Task<HatchyverseAPI.Client.ApiResponse<List<GetRankLeaderboard200ResponseInner>>> GetRankLeaderboardWithHttpInfoAsync(string gameId, double? limit = default(double?), System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
        {
            // verify the required parameter 'gameId' is set
            if (gameId == null)
                throw new HatchyverseAPI.Client.ApiException(400, "Missing required parameter 'gameId' when calling LeaderboardApi->GetRankLeaderboard");


            HatchyverseAPI.Client.RequestOptions localVarRequestOptions = new HatchyverseAPI.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };


            var localVarContentType = HatchyverseAPI.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = HatchyverseAPI.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("gameId", HatchyverseAPI.Client.ClientUtils.ParameterToString(gameId)); // path parameter
            if (limit != null)
            {
                localVarRequestOptions.QueryParameters.Add(HatchyverseAPI.Client.ClientUtils.ParameterToMultiMap("", "limit", limit));
            }


            // make the HTTP request

            var task = this.AsynchronousClient.GetAsync<List<GetRankLeaderboard200ResponseInner>>("/leaderboard/rank/{gameId}", localVarRequestOptions, this.Configuration, cancellationToken);

#if UNITY_EDITOR || !UNITY_WEBGL
            var localVarResponse = await task.ConfigureAwait(false);
#else
            var localVarResponse = await task;
#endif

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetRankLeaderboard", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="HatchyverseAPI.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="gameId"></param>
        /// <param name="limit"> (optional)</param>
        /// <returns>List&lt;Score&gt;</returns>
        public List<Score> GetScoreLeaderboard(string gameId, double? limit = default(double?))
        {
            HatchyverseAPI.Client.ApiResponse<List<Score>> localVarResponse = GetScoreLeaderboardWithHttpInfo(gameId, limit);
            return localVarResponse.Data;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="HatchyverseAPI.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="gameId"></param>
        /// <param name="limit"> (optional)</param>
        /// <returns>ApiResponse of List&lt;Score&gt;</returns>
        public HatchyverseAPI.Client.ApiResponse<List<Score>> GetScoreLeaderboardWithHttpInfo(string gameId, double? limit = default(double?))
        {
            // verify the required parameter 'gameId' is set
            if (gameId == null)
                throw new HatchyverseAPI.Client.ApiException(400, "Missing required parameter 'gameId' when calling LeaderboardApi->GetScoreLeaderboard");

            HatchyverseAPI.Client.RequestOptions localVarRequestOptions = new HatchyverseAPI.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = HatchyverseAPI.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = HatchyverseAPI.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("gameId", HatchyverseAPI.Client.ClientUtils.ParameterToString(gameId)); // path parameter
            if (limit != null)
            {
                localVarRequestOptions.QueryParameters.Add(HatchyverseAPI.Client.ClientUtils.ParameterToMultiMap("", "limit", limit));
            }


            // make the HTTP request
            var localVarResponse = this.Client.Get<List<Score>>("/leaderboard/scores/{gameId}", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetScoreLeaderboard", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="HatchyverseAPI.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="gameId"></param>
        /// <param name="limit"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of List&lt;Score&gt;</returns>
        public async System.Threading.Tasks.Task<List<Score>> GetScoreLeaderboardAsync(string gameId, double? limit = default(double?), System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
        {
            var task = GetScoreLeaderboardWithHttpInfoAsync(gameId, limit, cancellationToken);
#if UNITY_EDITOR || !UNITY_WEBGL
            HatchyverseAPI.Client.ApiResponse<List<Score>> localVarResponse = await task.ConfigureAwait(false);
#else
            HatchyverseAPI.Client.ApiResponse<List<Score>> localVarResponse = await task;
#endif
            return localVarResponse.Data;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="HatchyverseAPI.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="gameId"></param>
        /// <param name="limit"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (List&lt;Score&gt;)</returns>
        public async System.Threading.Tasks.Task<HatchyverseAPI.Client.ApiResponse<List<Score>>> GetScoreLeaderboardWithHttpInfoAsync(string gameId, double? limit = default(double?), System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
        {
            // verify the required parameter 'gameId' is set
            if (gameId == null)
                throw new HatchyverseAPI.Client.ApiException(400, "Missing required parameter 'gameId' when calling LeaderboardApi->GetScoreLeaderboard");


            HatchyverseAPI.Client.RequestOptions localVarRequestOptions = new HatchyverseAPI.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };


            var localVarContentType = HatchyverseAPI.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = HatchyverseAPI.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("gameId", HatchyverseAPI.Client.ClientUtils.ParameterToString(gameId)); // path parameter
            if (limit != null)
            {
                localVarRequestOptions.QueryParameters.Add(HatchyverseAPI.Client.ClientUtils.ParameterToMultiMap("", "limit", limit));
            }


            // make the HTTP request

            var task = this.AsynchronousClient.GetAsync<List<Score>>("/leaderboard/scores/{gameId}", localVarRequestOptions, this.Configuration, cancellationToken);

#if UNITY_EDITOR || !UNITY_WEBGL
            var localVarResponse = await task.ConfigureAwait(false);
#else
            var localVarResponse = await task;
#endif

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetScoreLeaderboard", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="HatchyverseAPI.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="gameId"></param>
        /// <returns>Rank</returns>
        public Rank GetUserRank(string gameId)
        {
            HatchyverseAPI.Client.ApiResponse<Rank> localVarResponse = GetUserRankWithHttpInfo(gameId);
            return localVarResponse.Data;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="HatchyverseAPI.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="gameId"></param>
        /// <returns>ApiResponse of Rank</returns>
        public HatchyverseAPI.Client.ApiResponse<Rank> GetUserRankWithHttpInfo(string gameId)
        {
            // verify the required parameter 'gameId' is set
            if (gameId == null)
                throw new HatchyverseAPI.Client.ApiException(400, "Missing required parameter 'gameId' when calling LeaderboardApi->GetUserRank");

            HatchyverseAPI.Client.RequestOptions localVarRequestOptions = new HatchyverseAPI.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = HatchyverseAPI.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = HatchyverseAPI.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("gameId", HatchyverseAPI.Client.ClientUtils.ParameterToString(gameId)); // path parameter


            // make the HTTP request
            var localVarResponse = this.Client.Get<Rank>("/leaderboard/rank/{gameId}/me", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetUserRank", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="HatchyverseAPI.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="gameId"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of Rank</returns>
        public async System.Threading.Tasks.Task<Rank> GetUserRankAsync(string gameId, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
        {
            var task = GetUserRankWithHttpInfoAsync(gameId, cancellationToken);
#if UNITY_EDITOR || !UNITY_WEBGL
            HatchyverseAPI.Client.ApiResponse<Rank> localVarResponse = await task.ConfigureAwait(false);
#else
            HatchyverseAPI.Client.ApiResponse<Rank> localVarResponse = await task;
#endif
            return localVarResponse.Data;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="HatchyverseAPI.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="gameId"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (Rank)</returns>
        public async System.Threading.Tasks.Task<HatchyverseAPI.Client.ApiResponse<Rank>> GetUserRankWithHttpInfoAsync(string gameId, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
        {
            // verify the required parameter 'gameId' is set
            if (gameId == null)
                throw new HatchyverseAPI.Client.ApiException(400, "Missing required parameter 'gameId' when calling LeaderboardApi->GetUserRank");


            HatchyverseAPI.Client.RequestOptions localVarRequestOptions = new HatchyverseAPI.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };


            var localVarContentType = HatchyverseAPI.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = HatchyverseAPI.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("gameId", HatchyverseAPI.Client.ClientUtils.ParameterToString(gameId)); // path parameter


            // make the HTTP request

            var task = this.AsynchronousClient.GetAsync<Rank>("/leaderboard/rank/{gameId}/me", localVarRequestOptions, this.Configuration, cancellationToken);

#if UNITY_EDITOR || !UNITY_WEBGL
            var localVarResponse = await task.ConfigureAwait(false);
#else
            var localVarResponse = await task;
#endif

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetUserRank", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="HatchyverseAPI.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="gameId"></param>
        /// <returns>Score</returns>
        public Score GetUserScore(string gameId)
        {
            HatchyverseAPI.Client.ApiResponse<Score> localVarResponse = GetUserScoreWithHttpInfo(gameId);
            return localVarResponse.Data;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="HatchyverseAPI.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="gameId"></param>
        /// <returns>ApiResponse of Score</returns>
        public HatchyverseAPI.Client.ApiResponse<Score> GetUserScoreWithHttpInfo(string gameId)
        {
            // verify the required parameter 'gameId' is set
            if (gameId == null)
                throw new HatchyverseAPI.Client.ApiException(400, "Missing required parameter 'gameId' when calling LeaderboardApi->GetUserScore");

            HatchyverseAPI.Client.RequestOptions localVarRequestOptions = new HatchyverseAPI.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = HatchyverseAPI.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = HatchyverseAPI.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("gameId", HatchyverseAPI.Client.ClientUtils.ParameterToString(gameId)); // path parameter


            // make the HTTP request
            var localVarResponse = this.Client.Get<Score>("/leaderboard/scores/{gameId}/me", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetUserScore", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="HatchyverseAPI.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="gameId"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of Score</returns>
        public async System.Threading.Tasks.Task<Score> GetUserScoreAsync(string gameId, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
        {
            var task = GetUserScoreWithHttpInfoAsync(gameId, cancellationToken);
#if UNITY_EDITOR || !UNITY_WEBGL
            HatchyverseAPI.Client.ApiResponse<Score> localVarResponse = await task.ConfigureAwait(false);
#else
            HatchyverseAPI.Client.ApiResponse<Score> localVarResponse = await task;
#endif
            return localVarResponse.Data;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="HatchyverseAPI.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="gameId"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (Score)</returns>
        public async System.Threading.Tasks.Task<HatchyverseAPI.Client.ApiResponse<Score>> GetUserScoreWithHttpInfoAsync(string gameId, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
        {
            // verify the required parameter 'gameId' is set
            if (gameId == null)
                throw new HatchyverseAPI.Client.ApiException(400, "Missing required parameter 'gameId' when calling LeaderboardApi->GetUserScore");


            HatchyverseAPI.Client.RequestOptions localVarRequestOptions = new HatchyverseAPI.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };


            var localVarContentType = HatchyverseAPI.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = HatchyverseAPI.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("gameId", HatchyverseAPI.Client.ClientUtils.ParameterToString(gameId)); // path parameter


            // make the HTTP request

            var task = this.AsynchronousClient.GetAsync<Score>("/leaderboard/scores/{gameId}/me", localVarRequestOptions, this.Configuration, cancellationToken);

#if UNITY_EDITOR || !UNITY_WEBGL
            var localVarResponse = await task.ConfigureAwait(false);
#else
            var localVarResponse = await task;
#endif

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetUserScore", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="HatchyverseAPI.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="updateRankRequest"></param>
        /// <returns>Rank</returns>
        public Rank UpdateRank(UpdateRankRequest updateRankRequest)
        {
            HatchyverseAPI.Client.ApiResponse<Rank> localVarResponse = UpdateRankWithHttpInfo(updateRankRequest);
            return localVarResponse.Data;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="HatchyverseAPI.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="updateRankRequest"></param>
        /// <returns>ApiResponse of Rank</returns>
        public HatchyverseAPI.Client.ApiResponse<Rank> UpdateRankWithHttpInfo(UpdateRankRequest updateRankRequest)
        {
            // verify the required parameter 'updateRankRequest' is set
            if (updateRankRequest == null)
                throw new HatchyverseAPI.Client.ApiException(400, "Missing required parameter 'updateRankRequest' when calling LeaderboardApi->UpdateRank");

            HatchyverseAPI.Client.RequestOptions localVarRequestOptions = new HatchyverseAPI.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = HatchyverseAPI.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = HatchyverseAPI.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.Data = updateRankRequest;


            // make the HTTP request
            var localVarResponse = this.Client.Post<Rank>("/leaderboard/rank", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("UpdateRank", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="HatchyverseAPI.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="updateRankRequest"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of Rank</returns>
        public async System.Threading.Tasks.Task<Rank> UpdateRankAsync(UpdateRankRequest updateRankRequest, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
        {
            var task = UpdateRankWithHttpInfoAsync(updateRankRequest, cancellationToken);
#if UNITY_EDITOR || !UNITY_WEBGL
            HatchyverseAPI.Client.ApiResponse<Rank> localVarResponse = await task.ConfigureAwait(false);
#else
            HatchyverseAPI.Client.ApiResponse<Rank> localVarResponse = await task;
#endif
            return localVarResponse.Data;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="HatchyverseAPI.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="updateRankRequest"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (Rank)</returns>
        public async System.Threading.Tasks.Task<HatchyverseAPI.Client.ApiResponse<Rank>> UpdateRankWithHttpInfoAsync(UpdateRankRequest updateRankRequest, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
        {
            // verify the required parameter 'updateRankRequest' is set
            if (updateRankRequest == null)
                throw new HatchyverseAPI.Client.ApiException(400, "Missing required parameter 'updateRankRequest' when calling LeaderboardApi->UpdateRank");


            HatchyverseAPI.Client.RequestOptions localVarRequestOptions = new HatchyverseAPI.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };


            var localVarContentType = HatchyverseAPI.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = HatchyverseAPI.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.Data = updateRankRequest;


            // make the HTTP request

            var task = this.AsynchronousClient.PostAsync<Rank>("/leaderboard/rank", localVarRequestOptions, this.Configuration, cancellationToken);

#if UNITY_EDITOR || !UNITY_WEBGL
            var localVarResponse = await task.ConfigureAwait(false);
#else
            var localVarResponse = await task;
#endif

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("UpdateRank", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

    }
}
