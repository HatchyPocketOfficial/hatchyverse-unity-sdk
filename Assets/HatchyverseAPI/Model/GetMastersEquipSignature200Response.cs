/*
 * masters-api
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.0.0
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using OpenAPIDateConverter = HatchyverseAPI.Client.OpenAPIDateConverter;

namespace HatchyverseAPI.Model
{
    /// <summary>
    /// GetMastersEquipSignature200Response
    /// </summary>
    [DataContract(Name = "GetMastersEquipSignature_200_response")]
    public partial class GetMastersEquipSignature200Response
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="GetMastersEquipSignature200Response" /> class.
        /// </summary>
        [JsonConstructorAttribute]
        protected GetMastersEquipSignature200Response() { }
        /// <summary>
        /// Initializes a new instance of the <see cref="GetMastersEquipSignature200Response" /> class.
        /// </summary>
        /// <param name="signature">signature (required).</param>
        /// <param name="nonce">nonce (required).</param>
        /// <param name="tokenId">tokenId (required).</param>
        /// <param name="itemIds">itemIds (required).</param>
        /// <param name="owner">owner (required).</param>
        public GetMastersEquipSignature200Response(string signature = default(string), Object nonce = default(Object), double tokenId = default(double), List<double> itemIds = default(List<double>), string owner = default(string))
        {
            // to ensure "signature" is required (not null)
            if (signature == null)
            {
                throw new ArgumentNullException("signature is a required property for GetMastersEquipSignature200Response and cannot be null");
            }
            this.Signature = signature;
            // to ensure "nonce" is required (not null)
            if (nonce == null)
            {
                throw new ArgumentNullException("nonce is a required property for GetMastersEquipSignature200Response and cannot be null");
            }
            this.Nonce = nonce;
            this.TokenId = tokenId;
            // to ensure "itemIds" is required (not null)
            if (itemIds == null)
            {
                throw new ArgumentNullException("itemIds is a required property for GetMastersEquipSignature200Response and cannot be null");
            }
            this.ItemIds = itemIds;
            // to ensure "owner" is required (not null)
            if (owner == null)
            {
                throw new ArgumentNullException("owner is a required property for GetMastersEquipSignature200Response and cannot be null");
            }
            this.Owner = owner;
        }

        /// <summary>
        /// Gets or Sets Signature
        /// </summary>
        [DataMember(Name = "signature", IsRequired = true, EmitDefaultValue = true)]
        public string Signature { get; set; }

        /// <summary>
        /// Gets or Sets Nonce
        /// </summary>
        [DataMember(Name = "nonce", IsRequired = true, EmitDefaultValue = true)]
        public Object Nonce { get; set; }

        /// <summary>
        /// Gets or Sets TokenId
        /// </summary>
        [DataMember(Name = "tokenId", IsRequired = true, EmitDefaultValue = true)]
        public double TokenId { get; set; }

        /// <summary>
        /// Gets or Sets ItemIds
        /// </summary>
        [DataMember(Name = "itemIds", IsRequired = true, EmitDefaultValue = true)]
        public List<double> ItemIds { get; set; }

        /// <summary>
        /// Gets or Sets Owner
        /// </summary>
        [DataMember(Name = "owner", IsRequired = true, EmitDefaultValue = true)]
        public string Owner { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class GetMastersEquipSignature200Response {\n");
            sb.Append("  Signature: ").Append(Signature).Append("\n");
            sb.Append("  Nonce: ").Append(Nonce).Append("\n");
            sb.Append("  TokenId: ").Append(TokenId).Append("\n");
            sb.Append("  ItemIds: ").Append(ItemIds).Append("\n");
            sb.Append("  Owner: ").Append(Owner).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

    }

}
