/*
 * masters-api
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.0.0
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using OpenAPIDateConverter = HatchyverseAPI.Client.OpenAPIDateConverter;

namespace HatchyverseAPI.Model
{
    /// <summary>
    /// Voucher
    /// </summary>
    [DataContract(Name = "Voucher")]
    public partial class Voucher
    {
        /// <summary>
        /// Defines ContractType
        /// </summary>
        [JsonConverter(typeof(StringEnumConverter))]
        public enum ContractTypeEnum
        {
            /// <summary>
            /// Enum ERC20 for value: ERC20
            /// </summary>
            [EnumMember(Value = "ERC20")]
            ERC20 = 1,

            /// <summary>
            /// Enum ERC721 for value: ERC721
            /// </summary>
            [EnumMember(Value = "ERC721")]
            ERC721 = 2,

            /// <summary>
            /// Enum ERC1155 for value: ERC1155
            /// </summary>
            [EnumMember(Value = "ERC1155")]
            ERC1155 = 3
        }


        /// <summary>
        /// Gets or Sets ContractType
        /// </summary>
        [DataMember(Name = "contractType", IsRequired = true, EmitDefaultValue = true)]
        public ContractTypeEnum ContractType { get; set; }
        /// <summary>
        /// Defines Type
        /// </summary>
        [JsonConverter(typeof(StringEnumConverter))]
        public enum TypeEnum
        {
            /// <summary>
            /// Enum Blockchain for value: blockchain
            /// </summary>
            [EnumMember(Value = "blockchain")]
            Blockchain = 1,

            /// <summary>
            /// Enum Game for value: game
            /// </summary>
            [EnumMember(Value = "game")]
            Game = 2
        }


        /// <summary>
        /// Gets or Sets Type
        /// </summary>
        [DataMember(Name = "type", IsRequired = true, EmitDefaultValue = true)]
        public TypeEnum Type { get; set; }
        /// <summary>
        /// Initializes a new instance of the <see cref="Voucher" /> class.
        /// </summary>
        [JsonConstructorAttribute]
        protected Voucher() { }
        /// <summary>
        /// Initializes a new instance of the <see cref="Voucher" /> class.
        /// </summary>
        /// <param name="blockchainId">blockchainId (required).</param>
        /// <param name="uid">uid (required).</param>
        /// <param name="amount">amount (required).</param>
        /// <param name="category">category (required).</param>
        /// <param name="contract">contract (required).</param>
        /// <param name="contractType">contractType (required).</param>
        /// <param name="holder">holder (required).</param>
        /// <param name="name">name (required).</param>
        /// <param name="type">type (required).</param>
        /// <param name="userId">userId (required).</param>
        /// <param name="image">image.</param>
        /// <param name="receiver">receiver.</param>
        /// <param name="tokenId">tokenId.</param>
        public Voucher(string blockchainId = default(string), string uid = default(string), double amount = default(double), string category = default(string), string contract = default(string), ContractTypeEnum contractType = default(ContractTypeEnum), string holder = default(string), string name = default(string), TypeEnum type = default(TypeEnum), string userId = default(string), string image = default(string), string receiver = default(string), double tokenId = default(double))
        {
            // to ensure "blockchainId" is required (not null)
            if (blockchainId == null)
            {
                throw new ArgumentNullException("blockchainId is a required property for Voucher and cannot be null");
            }
            this.BlockchainId = blockchainId;
            // to ensure "uid" is required (not null)
            if (uid == null)
            {
                throw new ArgumentNullException("uid is a required property for Voucher and cannot be null");
            }
            this.Uid = uid;
            this.Amount = amount;
            // to ensure "category" is required (not null)
            if (category == null)
            {
                throw new ArgumentNullException("category is a required property for Voucher and cannot be null");
            }
            this.Category = category;
            // to ensure "contract" is required (not null)
            if (contract == null)
            {
                throw new ArgumentNullException("contract is a required property for Voucher and cannot be null");
            }
            this.Contract = contract;
            this.ContractType = contractType;
            // to ensure "holder" is required (not null)
            if (holder == null)
            {
                throw new ArgumentNullException("holder is a required property for Voucher and cannot be null");
            }
            this.Holder = holder;
            // to ensure "name" is required (not null)
            if (name == null)
            {
                throw new ArgumentNullException("name is a required property for Voucher and cannot be null");
            }
            this.Name = name;
            this.Type = type;
            // to ensure "userId" is required (not null)
            if (userId == null)
            {
                throw new ArgumentNullException("userId is a required property for Voucher and cannot be null");
            }
            this.UserId = userId;
            this.Image = image;
            this.Receiver = receiver;
            this.TokenId = tokenId;
        }

        /// <summary>
        /// Gets or Sets BlockchainId
        /// </summary>
        [DataMember(Name = "blockchainId", IsRequired = true, EmitDefaultValue = true)]
        public string BlockchainId { get; set; }

        /// <summary>
        /// Gets or Sets Uid
        /// </summary>
        [DataMember(Name = "uid", IsRequired = true, EmitDefaultValue = true)]
        public string Uid { get; set; }

        /// <summary>
        /// Gets or Sets Amount
        /// </summary>
        [DataMember(Name = "amount", IsRequired = true, EmitDefaultValue = true)]
        public double Amount { get; set; }

        /// <summary>
        /// Gets or Sets Category
        /// </summary>
        [DataMember(Name = "category", IsRequired = true, EmitDefaultValue = true)]
        public string Category { get; set; }

        /// <summary>
        /// Gets or Sets Contract
        /// </summary>
        [DataMember(Name = "contract", IsRequired = true, EmitDefaultValue = true)]
        public string Contract { get; set; }

        /// <summary>
        /// Gets or Sets Holder
        /// </summary>
        [DataMember(Name = "holder", IsRequired = true, EmitDefaultValue = true)]
        public string Holder { get; set; }

        /// <summary>
        /// Gets or Sets Name
        /// </summary>
        [DataMember(Name = "name", IsRequired = true, EmitDefaultValue = true)]
        public string Name { get; set; }

        /// <summary>
        /// Gets or Sets UserId
        /// </summary>
        [DataMember(Name = "userId", IsRequired = true, EmitDefaultValue = true)]
        public string UserId { get; set; }

        /// <summary>
        /// Gets or Sets Image
        /// </summary>
        [DataMember(Name = "image", EmitDefaultValue = false)]
        public string Image { get; set; }

        /// <summary>
        /// Gets or Sets Receiver
        /// </summary>
        [DataMember(Name = "receiver", EmitDefaultValue = false)]
        public string Receiver { get; set; }

        /// <summary>
        /// Gets or Sets TokenId
        /// </summary>
        [DataMember(Name = "tokenId", EmitDefaultValue = false)]
        public double TokenId { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class Voucher {\n");
            sb.Append("  BlockchainId: ").Append(BlockchainId).Append("\n");
            sb.Append("  Uid: ").Append(Uid).Append("\n");
            sb.Append("  Amount: ").Append(Amount).Append("\n");
            sb.Append("  Category: ").Append(Category).Append("\n");
            sb.Append("  Contract: ").Append(Contract).Append("\n");
            sb.Append("  ContractType: ").Append(ContractType).Append("\n");
            sb.Append("  Holder: ").Append(Holder).Append("\n");
            sb.Append("  Name: ").Append(Name).Append("\n");
            sb.Append("  Type: ").Append(Type).Append("\n");
            sb.Append("  UserId: ").Append(UserId).Append("\n");
            sb.Append("  Image: ").Append(Image).Append("\n");
            sb.Append("  Receiver: ").Append(Receiver).Append("\n");
            sb.Append("  TokenId: ").Append(TokenId).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

    }

}
